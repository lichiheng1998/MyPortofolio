{"version":3,"sources":["webpack:///./node_modules/showdown/dist/showdown.js","webpack:///./node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/core-js/modules/es7.string.pad-end.js","webpack:///./node_modules/core-js/modules/_string-pad.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","getDefaultOpts","simple","defaultOptions","omitExtraWLInCodeBlocks","defaultValue","describe","type","noHeaderId","prefixHeaderId","rawPrefixHeaderId","ghCompatibleHeaderId","rawHeaderId","headerLevelStart","parseImgDimensions","simplifiedAutoLink","excludeTrailingPunctuationFromURLs","literalMidWordUnderscores","literalMidWordAsterisks","strikethrough","tables","tablesHeaderId","ghCodeBlocks","tasklists","smoothLivePreview","smartIndentationFix","description","disableForced4SpacesIndentedSublists","simpleLineBreaks","requireSpaceBeforeHeadingText","ghMentions","ghMentionsLink","encodeEmails","openLinksInNewWindow","backslashEscapesHTMLTags","emoji","underline","completeHTMLDocument","metadata","splitAdjacentBlockquotes","JSON","parse","stringify","ret","opt","hasOwnProperty","showdown","parsers","extensions","globalOptions","setFlavor","flavor","github","original","ghost","vanilla","allOn","options","allOptionsOn","validate","extension","name","errMsg","valid","error","helper","isArray","i","length","baseMsg","ext","isString","toLowerCase","isUndefined","listeners","filter","regex","ln","RegExp","replace","escapeCharactersCallback","wholeMatch","m1","charCodeAt","setOption","key","value","this","getOption","getOptions","resetOptions","Error","preset","option","getFlavor","getFlavorOptions","getDefaultOptions","subParser","func","stdExtName","validExtension","getAllExtensions","removeExtension","resetExtensions","validateExtension","console","warn","a","String","isFunction","toString","call","Array","forEach","obj","callback","prop","s","escapeCharacters","text","charsToEscape","afterBackslash","regexString","unescapeHTMLEntities","txt","rgxFindMatchPos","str","left","right","flags","t","m","start","end","f","g","indexOf","x","l","pos","exec","test","lastIndex","index","match","push","matchRecursiveRegExp","matchPos","results","slice","replaceRecursiveRegExp","replacement","repStr","finalStr","lng","bits","join","regexIndexOf","fromIndex","substring","search","splitAtIndex","encodeEmailAddress","mail","encode","ch","Math","floor","random","r","padEnd","targetLength","padString","repeat","msg","alert","log","regexes","asteriskDashAndColon","emojis","+1","-1","100","1234","1st_place_medal","2nd_place_medal","3rd_place_medal","8ball","ab","abc","abcd","accept","aerial_tramway","airplane","alarm_clock","alembic","alien","ambulance","amphora","anchor","angel","anger","angry","anguished","ant","apple","aquarius","aries","arrow_backward","arrow_double_down","arrow_double_up","arrow_down","arrow_down_small","arrow_forward","arrow_heading_down","arrow_heading_up","arrow_left","arrow_lower_left","arrow_lower_right","arrow_right","arrow_right_hook","arrow_up","arrow_up_down","arrow_up_small","arrow_upper_left","arrow_upper_right","arrows_clockwise","arrows_counterclockwise","art","articulated_lorry","artificial_satellite","astonished","athletic_shoe","atm","atom_symbol","avocado","b","baby","baby_bottle","baby_chick","baby_symbol","back","bacon","badminton","baggage_claim","baguette_bread","balance_scale","balloon","ballot_box","ballot_box_with_check","bamboo","banana","bangbang","bank","bar_chart","barber","baseball","basketball","basketball_man","basketball_woman","bat","bath","bathtub","battery","beach_umbrella","bear","bed","bee","beer","beers","beetle","beginner","bell","bellhop_bell","bento","biking_man","bike","biking_woman","bikini","biohazard","bird","birthday","black_circle","black_flag","black_heart","black_joker","black_large_square","black_medium_small_square","black_medium_square","black_nib","black_small_square","black_square_button","blonde_man","blonde_woman","blossom","blowfish","blue_book","blue_car","blue_heart","blush","boar","boat","bomb","book","bookmark","bookmark_tabs","books","boom","boot","bouquet","bowing_man","bow_and_arrow","bowing_woman","bowling","boxing_glove","boy","bread","bride_with_veil","bridge_at_night","briefcase","broken_heart","bug","building_construction","bulb","bullettrain_front","bullettrain_side","burrito","bus","business_suit_levitating","busstop","bust_in_silhouette","busts_in_silhouette","butterfly","cactus","cake","calendar","call_me_hand","calling","camel","camera","camera_flash","camping","cancer","candle","candy","canoe","capital_abcd","capricorn","car","card_file_box","card_index","card_index_dividers","carousel_horse","carrot","cat","cat2","cd","chains","champagne","chart","chart_with_downwards_trend","chart_with_upwards_trend","checkered_flag","cheese","cherries","cherry_blossom","chestnut","chicken","children_crossing","chipmunk","chocolate_bar","christmas_tree","church","cinema","circus_tent","city_sunrise","city_sunset","cityscape","cl","clamp","clap","clapper","classical_building","clinking_glasses","clipboard","clock1","clock10","clock1030","clock11","clock1130","clock12","clock1230","clock130","clock2","clock230","clock3","clock330","clock4","clock430","clock5","clock530","clock6","clock630","clock7","clock730","clock8","clock830","clock9","clock930","closed_book","closed_lock_with_key","closed_umbrella","cloud","cloud_with_lightning","cloud_with_lightning_and_rain","cloud_with_rain","cloud_with_snow","clown_face","clubs","cocktail","coffee","coffin","cold_sweat","comet","computer","computer_mouse","confetti_ball","confounded","confused","congratulations","construction","construction_worker_man","construction_worker_woman","control_knobs","convenience_store","cookie","cool","policeman","copyright","corn","couch_and_lamp","couple","couple_with_heart_woman_man","couple_with_heart_man_man","couple_with_heart_woman_woman","couplekiss_man_man","couplekiss_man_woman","couplekiss_woman_woman","cow","cow2","cowboy_hat_face","crab","crayon","credit_card","crescent_moon","cricket","crocodile","croissant","crossed_fingers","crossed_flags","crossed_swords","crown","cry","crying_cat_face","crystal_ball","cucumber","cupid","curly_loop","currency_exchange","curry","custard","customs","cyclone","dagger","dancer","dancing_women","dancing_men","dango","dark_sunglasses","dart","dash","date","deciduous_tree","deer","department_store","derelict_house","desert","desert_island","desktop_computer","male_detective","diamond_shape_with_a_dot_inside","diamonds","disappointed","disappointed_relieved","dizzy","dizzy_face","do_not_litter","dog","dog2","dollar","dolls","dolphin","door","doughnut","dove","dragon","dragon_face","dress","dromedary_camel","drooling_face","droplet","drum","duck","dvd","e-mail","eagle","ear","ear_of_rice","earth_africa","earth_americas","earth_asia","egg","eggplant","eight_pointed_black_star","eight_spoked_asterisk","electric_plug","elephant","email","envelope_with_arrow","euro","european_castle","european_post_office","evergreen_tree","exclamation","expressionless","eye","eye_speech_bubble","eyeglasses","eyes","face_with_head_bandage","face_with_thermometer","fist_oncoming","factory","fallen_leaf","family_man_woman_boy","family_man_boy","family_man_boy_boy","family_man_girl","family_man_girl_boy","family_man_girl_girl","family_man_man_boy","family_man_man_boy_boy","family_man_man_girl","family_man_man_girl_boy","family_man_man_girl_girl","family_man_woman_boy_boy","family_man_woman_girl","family_man_woman_girl_boy","family_man_woman_girl_girl","family_woman_boy","family_woman_boy_boy","family_woman_girl","family_woman_girl_boy","family_woman_girl_girl","family_woman_woman_boy","family_woman_woman_boy_boy","family_woman_woman_girl","family_woman_woman_girl_boy","family_woman_woman_girl_girl","fast_forward","fax","fearful","feet","female_detective","ferris_wheel","ferry","field_hockey","file_cabinet","file_folder","film_projector","film_strip","fire","fire_engine","fireworks","first_quarter_moon","first_quarter_moon_with_face","fish","fish_cake","fishing_pole_and_fish","fist_raised","fist_left","fist_right","flashlight","fleur_de_lis","flight_arrival","flight_departure","floppy_disk","flower_playing_cards","flushed","fog","foggy","football","footprints","fork_and_knife","fountain","fountain_pen","four_leaf_clover","fox_face","framed_picture","free","fried_egg","fried_shrimp","fries","frog","frowning","frowning_face","frowning_man","frowning_woman","middle_finger","fuelpump","full_moon","full_moon_with_face","funeral_urn","game_die","gear","gem","gemini","gift","gift_heart","girl","globe_with_meridians","goal_net","goat","golf","golfing_man","golfing_woman","gorilla","grapes","green_apple","green_book","green_heart","green_salad","grey_exclamation","grey_question","grimacing","grin","grinning","guardsman","guardswoman","guitar","gun","haircut_woman","haircut_man","hamburger","hammer","hammer_and_pick","hammer_and_wrench","hamster","hand","handbag","handshake","hankey","hatched_chick","hatching_chick","headphones","hear_no_evil","heart","heart_decoration","heart_eyes","heart_eyes_cat","heartbeat","heartpulse","hearts","heavy_check_mark","heavy_division_sign","heavy_dollar_sign","heavy_heart_exclamation","heavy_minus_sign","heavy_multiplication_x","heavy_plus_sign","helicopter","herb","hibiscus","high_brightness","high_heel","hocho","hole","honey_pot","horse","horse_racing","hospital","hot_pepper","hotdog","hotel","hotsprings","hourglass","hourglass_flowing_sand","house","house_with_garden","houses","hugs","hushed","ice_cream","ice_hockey","ice_skate","icecream","id","ideograph_advantage","imp","inbox_tray","incoming_envelope","tipping_hand_woman","information_source","innocent","interrobang","iphone","izakaya_lantern","jack_o_lantern","japan","japanese_castle","japanese_goblin","japanese_ogre","jeans","joy","joy_cat","joystick","kaaba","keyboard","keycap_ten","kick_scooter","kimono","kiss","kissing","kissing_cat","kissing_closed_eyes","kissing_heart","kissing_smiling_eyes","kiwi_fruit","koala","koko","label","large_blue_circle","large_blue_diamond","large_orange_diamond","last_quarter_moon","last_quarter_moon_with_face","latin_cross","laughing","leaves","ledger","left_luggage","left_right_arrow","leftwards_arrow_with_hook","lemon","leo","leopard","level_slider","libra","light_rail","link","lion","lips","lipstick","lizard","lock","lock_with_ink_pen","lollipop","loop","loud_sound","loudspeaker","love_hotel","love_letter","low_brightness","lying_face","mag","mag_right","mahjong","mailbox","mailbox_closed","mailbox_with_mail","mailbox_with_no_mail","man","man_artist","man_astronaut","man_cartwheeling","man_cook","man_dancing","man_facepalming","man_factory_worker","man_farmer","man_firefighter","man_health_worker","man_in_tuxedo","man_judge","man_juggling","man_mechanic","man_office_worker","man_pilot","man_playing_handball","man_playing_water_polo","man_scientist","man_shrugging","man_singer","man_student","man_teacher","man_technologist","man_with_gua_pi_mao","man_with_turban","tangerine","mans_shoe","mantelpiece_clock","maple_leaf","martial_arts_uniform","mask","massage_woman","massage_man","meat_on_bone","medal_military","medal_sports","mega","melon","memo","men_wrestling","menorah","mens","metal","metro","microphone","microscope","milk_glass","milky_way","minibus","minidisc","mobile_phone_off","money_mouth_face","money_with_wings","moneybag","monkey","monkey_face","monorail","moon","mortar_board","mosque","motor_boat","motor_scooter","motorcycle","motorway","mount_fuji","mountain","mountain_biking_man","mountain_biking_woman","mountain_cableway","mountain_railway","mountain_snow","mouse","mouse2","movie_camera","moyai","mrs_claus","muscle","mushroom","musical_keyboard","musical_note","musical_score","mute","nail_care","name_badge","national_park","nauseated_face","necktie","negative_squared_cross_mark","nerd_face","neutral_face","new","new_moon","new_moon_with_face","newspaper","newspaper_roll","next_track_button","ng","no_good_man","no_good_woman","night_with_stars","no_bell","no_bicycles","no_entry","no_entry_sign","no_mobile_phones","no_mouth","no_pedestrians","no_smoking","non-potable_water","nose","notebook","notebook_with_decorative_cover","notes","nut_and_bolt","o","o2","ocean","octopus","oden","office","oil_drum","ok","ok_hand","ok_man","ok_woman","old_key","older_man","older_woman","om","on","oncoming_automobile","oncoming_bus","oncoming_police_car","oncoming_taxi","open_file_folder","open_hands","open_mouth","open_umbrella","ophiuchus","orange_book","orthodox_cross","outbox_tray","owl","ox","package","page_facing_up","page_with_curl","pager","paintbrush","palm_tree","pancakes","panda_face","paperclip","paperclips","parasol_on_ground","parking","part_alternation_mark","partly_sunny","passenger_ship","passport_control","pause_button","peace_symbol","peach","peanuts","pear","pen","pencil2","penguin","pensive","performing_arts","persevere","person_fencing","pouting_woman","phone","pick","pig","pig2","pig_nose","pill","pineapple","ping_pong","pisces","pizza","place_of_worship","plate_with_cutlery","play_or_pause_button","point_down","point_left","point_right","point_up","point_up_2","police_car","policewoman","poodle","popcorn","post_office","postal_horn","postbox","potable_water","potato","pouch","poultry_leg","pound","rage","pouting_cat","pouting_man","pray","prayer_beads","pregnant_woman","previous_track_button","prince","princess","printer","purple_heart","purse","pushpin","put_litter_in_its_place","question","rabbit","rabbit2","racehorse","racing_car","radio","radio_button","radioactive","railway_car","railway_track","rainbow","rainbow_flag","raised_back_of_hand","raised_hand_with_fingers_splayed","raised_hands","raising_hand_woman","raising_hand_man","ram","ramen","rat","record_button","recycle","red_circle","registered","relaxed","relieved","reminder_ribbon","repeat_one","rescue_worker_helmet","restroom","revolving_hearts","rewind","rhinoceros","ribbon","rice","rice_ball","rice_cracker","rice_scene","right_anger_bubble","ring","robot","rocket","rofl","roll_eyes","roller_coaster","rooster","rose","rosette","rotating_light","round_pushpin","rowing_man","rowing_woman","rugby_football","running_man","running_shirt_with_sash","running_woman","sa","sagittarius","sake","sandal","santa","satellite","saxophone","school","school_satchel","scissors","scorpion","scorpius","scream","scream_cat","scroll","seat","secret","see_no_evil","seedling","selfie","shallow_pan_of_food","shamrock","shark","shaved_ice","sheep","shell","shield","shinto_shrine","ship","shirt","shopping","shopping_cart","shower","shrimp","signal_strength","six_pointed_star","ski","skier","skull","skull_and_crossbones","sleeping","sleeping_bed","sleepy","slightly_frowning_face","slightly_smiling_face","slot_machine","small_airplane","small_blue_diamond","small_orange_diamond","small_red_triangle","small_red_triangle_down","smile","smile_cat","smiley","smiley_cat","smiling_imp","smirk","smirk_cat","smoking","snail","snake","sneezing_face","snowboarder","snowflake","snowman","snowman_with_snow","sob","soccer","soon","sos","sound","space_invader","spades","spaghetti","sparkle","sparkler","sparkles","sparkling_heart","speak_no_evil","speaker","speaking_head","speech_balloon","speedboat","spider","spider_web","spiral_calendar","spiral_notepad","spoon","squid","stadium","star","star2","star_and_crescent","star_of_david","stars","station","statue_of_liberty","steam_locomotive","stew","stop_button","stop_sign","stopwatch","straight_ruler","strawberry","stuck_out_tongue","stuck_out_tongue_closed_eyes","stuck_out_tongue_winking_eye","studio_microphone","stuffed_flatbread","sun_behind_large_cloud","sun_behind_rain_cloud","sun_behind_small_cloud","sun_with_face","sunflower","sunglasses","sunny","sunrise","sunrise_over_mountains","surfing_man","surfing_woman","sushi","suspension_railway","sweat","sweat_drops","sweat_smile","sweet_potato","swimming_man","swimming_woman","symbols","synagogue","syringe","taco","tada","tanabata_tree","taurus","taxi","tea","telephone_receiver","telescope","tennis","tent","thermometer","thinking","thought_balloon","ticket","tickets","tiger","tiger2","timer_clock","tipping_hand_man","tired_face","tm","toilet","tokyo_tower","tomato","tongue","top","tophat","tornado","trackball","tractor","traffic_light","train","train2","tram","triangular_flag_on_post","triangular_ruler","trident","triumph","trolleybus","trophy","tropical_drink","tropical_fish","truck","trumpet","tulip","tumbler_glass","turkey","turtle","tv","twisted_rightwards_arrows","two_hearts","two_men_holding_hands","two_women_holding_hands","u5272","u5408","u55b6","u6307","u6708","u6709","u6e80","u7121","u7533","u7981","u7a7a","umbrella","unamused","underage","unicorn","unlock","up","upside_down_face","v","vertical_traffic_light","vhs","vibration_mode","video_camera","video_game","violin","virgo","volcano","volleyball","vs","vulcan_salute","walking_man","walking_woman","waning_crescent_moon","waning_gibbous_moon","warning","wastebasket","watch","water_buffalo","watermelon","wave","wavy_dash","waxing_crescent_moon","wc","weary","wedding","weight_lifting_man","weight_lifting_woman","whale","whale2","wheel_of_dharma","wheelchair","white_check_mark","white_circle","white_flag","white_flower","white_large_square","white_medium_small_square","white_medium_square","white_small_square","white_square_button","wilted_flower","wind_chime","wind_face","wine_glass","wink","wolf","woman","woman_artist","woman_astronaut","woman_cartwheeling","woman_cook","woman_facepalming","woman_factory_worker","woman_farmer","woman_firefighter","woman_health_worker","woman_judge","woman_juggling","woman_mechanic","woman_office_worker","woman_pilot","woman_playing_handball","woman_playing_water_polo","woman_scientist","woman_shrugging","woman_singer","woman_student","woman_teacher","woman_technologist","woman_with_turban","womans_clothes","womans_hat","women_wrestling","womens","world_map","worried","wrench","writing_hand","yellow_heart","yen","yin_yang","yum","zap","zipper_mouth_face","zzz","octocat","Converter","converterOptions","langExtensions","outputModifiers","setConvFlavor","parsed","raw","format","_parseExtension","legacyExtensionLoading","validExt","listen","gOpt","_constructor","_dispatch","evtName","globals","ei","nText","makeHtml","gHtmlBlocks","gHtmlMdBlocks","gHtmlSpans","gUrls","gTitles","gDimensions","gListLevel","hashLinkCounts","converter","rsp","rgx","rTrimInputText","makeMarkdown","makeMd","src","HTMLParser","window","document","doc","createElement","innerHTML","preList","pres","querySelectorAll","presPH","childElementCount","firstChild","tagName","content","trim","language","getAttribute","classes","className","split","c","matches","outerHTML","setAttribute","substitutePreCodeTags","clean","node","n","childNodes","child","nodeType","nodeValue","removeChild","nodes","mdDoc","addExtension","useExtension","extensionName","splice","output","getMetadata","getMetadataFormat","_setMetadataPair","_setMetadataFormat","_setMetadataRaw","writeAnchorTag","linkText","linkId","url","m5","m6","title","result","wm","st","escape","mentions","username","lnk","target","simpleURLRegex","simpleURLRegex2","delimUrlRegex","simpleMailRegex","delimMailRegex","replaceLink","leadingMagicChars","m2","m3","trailingPunctuation","trailingMagicChars","lnkTxt","append","lmc","tmc","replaceMail","href","bq","pre","codeblock","nextChar","doctype","doctypeParsed","charset","lang","meta","leadingText","numSpaces","emojiCode","delim","blockText","blockTags","repFunc","inside","opTagPos","rgx1","patLeft","patRight","subTexts","newSubText1","concat","hashHTMLSpan","html","repText","limit","num","$1","isNaN","parseInt","setextRegexH1","setextRegexH2","spanGamut","hID","headerId","hashBlock","matchFound","hLevel","atxStyle","prefix","customizedHeaderId","hText","span","header","writeImageTag","altText","width","height","gDims","parseInside","lead","processListItems","listStr","trimTrailing","isParagraphed","m4","taskbtn","checked","item","bulletStyle","otp","wm2","styleStartNumber","list","listType","res","parseConsecutiveLists","olRgx","ulRgx","counterRxg","parseCL","style","parseMetadataContents","wholematch","grafs","grafsOut","grafsOutIt","codeFlag","$2","re","replaceFunc","blankLines","parseCells","cell","parseTable","rawTable","tableLines","sLine","rawHeaders","map","rawStyles","rawCells","headers","styles","cells","shift","tableHeaderId","row","ii","tb","tblLgn","buildTable","charCodeToReplace","fromCharCode","hasChildNodes","children","childrenLength","innerTxt","headerLevel","headerMark","hasAttribute","listItems","listItemsLenght","listNum","listItemTxt","childrenLenght","spansOnly","data","tableArray","headings","rows","headContent","allign","cols","getElementsByTagName","cellContent","cellSpacesCount","strLen","undefined","exports","module","toInteger","defined","count","Infinity","RangeError","$export","P","$pad","userAgent","WEBKIT_BUG","F","maxLength","arguments","toLength","that","fillString","S","stringLength","fillStr","intMaxLength","fillLen","stringFiller","ceil"],"mappings":"6EAAA,IAAAA,EAAAC,EAAQ,IAERA,EAAQ,KAERA,EAAQ,IAERA,EAAQ,KAERA,EAAQ,KAERA,EAAQ,IAERA,EAAQ,IAERA,EAAQ,KAERA,EAAQ,KAERA,EAAQ,IAERA,EAAQ,IAERA,EAAQ,IAERA,EAAQ,IAERA,EAAQ,IAERA,EAAQ,KAERA,EAAQ,IAERA,EAAQ,IAKR,WAIA,SAAAC,EAAAC,GACA,aAEA,IAAAC,EAAA,CACAC,wBAAA,CACAC,cAAA,EACAC,SAAA,wDACAC,KAAA,WAEAC,WAAA,CACAH,cAAA,EACAC,SAAA,kCACAC,KAAA,WAEAE,eAAA,CACAJ,cAAA,EACAC,SAAA,4JACAC,KAAA,UAEAG,kBAAA,CACAL,cAAA,EACAC,SAAA,uKACAC,KAAA,WAEAI,qBAAA,CACAN,cAAA,EACAC,SAAA,oIACAC,KAAA,WAEAK,YAAA,CACAP,cAAA,EACAC,SAAA,2JACAC,KAAA,WAEAM,iBAAA,CACAR,cAAA,EACAC,SAAA,gCACAC,KAAA,WAEAO,mBAAA,CACAT,cAAA,EACAC,SAAA,sCACAC,KAAA,WAEAQ,mBAAA,CACAV,cAAA,EACAC,SAAA,iCACAC,KAAA,WAEAS,mCAAA,CACAX,cAAA,EACAC,SAAA,sEACAC,KAAA,WAEAU,0BAAA,CACAZ,cAAA,EACAC,SAAA,mDACAC,KAAA,WAEAW,wBAAA,CACAb,cAAA,EACAC,SAAA,+CACAC,KAAA,WAEAY,cAAA,CACAd,cAAA,EACAC,SAAA,oCACAC,KAAA,WAEAa,OAAA,CACAf,cAAA,EACAC,SAAA,6BACAC,KAAA,WAEAc,eAAA,CACAhB,cAAA,EACAC,SAAA,6BACAC,KAAA,WAEAe,aAAA,CACAjB,cAAA,EACAC,SAAA,6CACAC,KAAA,WAEAgB,UAAA,CACAlB,cAAA,EACAC,SAAA,mCACAC,KAAA,WAEAiB,kBAAA,CACAnB,cAAA,EACAC,SAAA,kEACAC,KAAA,WAEAkB,oBAAA,CACApB,cAAA,EACAqB,YAAA,kDACAnB,KAAA,WAEAoB,qCAAA,CACAtB,cAAA,EACAqB,YAAA,oEACAnB,KAAA,WAEAqB,iBAAA,CACAvB,cAAA,EACAqB,YAAA,gDACAnB,KAAA,WAEAsB,8BAAA,CACAxB,cAAA,EACAqB,YAAA,6EACAnB,KAAA,WAEAuB,WAAA,CACAzB,cAAA,EACAqB,YAAA,2BACAnB,KAAA,WAEAwB,eAAA,CACA1B,aAAA,yBACAqB,YAAA,yFACAnB,KAAA,UAEAyB,aAAA,CACA3B,cAAA,EACAqB,YAAA,0IACAnB,KAAA,WAEA0B,qBAAA,CACA5B,cAAA,EACAqB,YAAA,gCACAnB,KAAA,WAEA2B,yBAAA,CACA7B,cAAA,EACAqB,YAAA,oDACAnB,KAAA,WAEA4B,MAAA,CACA9B,cAAA,EACAqB,YAAA,sDACAnB,KAAA,WAEA6B,UAAA,CACA/B,cAAA,EACAqB,YAAA,gLACAnB,KAAA,WAEA8B,qBAAA,CACAhC,cAAA,EACAqB,YAAA,mFACAnB,KAAA,WAEA+B,SAAA,CACAjC,cAAA,EACAqB,YAAA,gIACAnB,KAAA,WAEAgC,yBAAA,CACAlC,cAAA,EACAqB,YAAA,mCACAnB,KAAA,YAIA,QAAAL,EACA,OAAAsC,KAAAC,MAAAD,KAAAE,UAAAvC,IAGA,IAAAwC,EAAA,GAEA,QAAAC,KAAAzC,EACAA,EAAA0C,eAAAD,KACAD,EAAAC,GAAAzC,EAAAyC,GAAAvC,cAIA,OAAAsC,EAuBA,IAAAG,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAAhD,GAAA,GACAiD,EAAA,UACAC,EAAA,CACAC,OAAA,CACAhD,yBAAA,EACAW,oBAAA,EACAC,oCAAA,EACAC,2BAAA,EACAE,eAAA,EACAC,QAAA,EACAC,gBAAA,EACAC,cAAA,EACAC,WAAA,EACAI,sCAAA,EACAC,kBAAA,EACAC,+BAAA,EACAlB,sBAAA,EACAmB,YAAA,EACAI,0BAAA,EACAC,OAAA,EACAI,0BAAA,GAEAc,SAAA,CACA7C,YAAA,EACAc,cAAA,GAEAgC,MAAA,CACAlD,yBAAA,EACAU,oBAAA,EACAC,oBAAA,EACAC,oCAAA,EACAC,2BAAA,EACAE,eAAA,EACAC,QAAA,EACAC,gBAAA,EACAC,cAAA,EACAC,WAAA,EACAC,mBAAA,EACAI,kBAAA,EACAC,+BAAA,EACAC,YAAA,EACAE,cAAA,GAEAuB,QAAAtD,GAAA,GACAuD,MAnEA,WACA,aAEA,IAAAC,EAAAxD,GAAA,GACA0C,EAAA,GAEA,QAAAC,KAAAa,EACAA,EAAAZ,eAAAD,KACAD,EAAAC,IAAA,GAIA,OAAAD,EAuDAe,IA4OA,SAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAD,EAAA,YAAAA,EAAA,4CACAlB,EAAA,CACAoB,OAAA,EACAC,MAAA,IAGAlB,EAAAmB,OAAAC,QAAAN,KACAA,EAAA,CAAAA,IAGA,QAAAO,EAAA,EAAmBA,EAAAP,EAAAQ,SAAsBD,EAAA,CACzC,IAAAE,EAAAP,EAAA,kBAAAK,EAAA,KACAG,EAAAV,EAAAO,GAEA,oBAAAG,EAGA,OAFA3B,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,iCAAAC,EAAA,SACA3B,EAGA,IAAAG,EAAAmB,OAAAM,SAAAD,EAAA/D,MAGA,OAFAoC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,gDAAAC,EAAA/D,KAAA,SACAoC,EAGA,IAAApC,EAAA+D,EAAA/D,KAAA+D,EAAA/D,KAAAiE,cAUA,GARA,aAAAjE,IACAA,EAAA+D,EAAA/D,KAAA,QAGA,SAAAA,IACAA,EAAA+D,EAAA/D,KAAA,UAGA,SAAAA,GAAA,WAAAA,GAAA,aAAAA,EAGA,OAFAoC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,QAAA9D,EAAA,iFACAoC,EAGA,gBAAApC,GACA,GAAAuC,EAAAmB,OAAAQ,YAAAH,EAAAI,WAGA,OAFA/B,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,0EACA1B,OAGA,GAAAG,EAAAmB,OAAAQ,YAAAH,EAAAK,SAAA7B,EAAAmB,OAAAQ,YAAAH,EAAAM,OAGA,OAFAjC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA9D,EAAA,yEACAoC,EAIA,GAAA2B,EAAAI,UAAA,CACA,oBAAAJ,EAAAI,UAGA,OAFA/B,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,qDAAAC,EAAAI,UAAA,SACA/B,EAGA,QAAAkC,KAAAP,EAAAI,UACA,GAAAJ,EAAAI,UAAA7B,eAAAgC,IACA,mBAAAP,EAAAI,UAAAG,GAGA,OAFAlC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,+EAAAQ,EAAA,kCAAAP,EAAAI,UAAAG,GAAA,SACAlC,EAMA,GAAA2B,EAAAK,QACA,sBAAAL,EAAAK,OAGA,OAFAhC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,2CAAAC,EAAAK,OAAA,SACAhC,OAEO,GAAA2B,EAAAM,MAAA,CAKP,GAJA9B,EAAAmB,OAAAM,SAAAD,EAAAM,SACAN,EAAAM,MAAA,IAAAE,OAAAR,EAAAM,MAAA,QAGAN,EAAAM,iBAAAE,QAGA,OAFAnC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,2EAAAC,EAAAM,MAAA,SACAjC,EAGA,GAAAG,EAAAmB,OAAAQ,YAAAH,EAAAS,SAGA,OAFApC,EAAAoB,OAAA,EACApB,EAAAqB,MAAAK,EAAA,iEACA1B,GAKA,OAAAA,EAwIA,SAAAqC,EAAAC,EAAAC,GACA,aAGA,WADAA,EAAAC,WAAA,GACA,IAvdArC,EAAAmB,OAAA,GAMAnB,EAAAE,WAAA,GASAF,EAAAsC,UAAA,SAAAC,EAAAC,GACA,aAGA,OADArC,EAAAoC,GAAAC,EACAC,MAUAzC,EAAA0C,UAAA,SAAAH,GACA,aAEA,OAAApC,EAAAoC,IASAvC,EAAA2C,WAAA,WACA,aAEA,OAAAxC,GAQAH,EAAA4C,aAAA,WACA,aAEAzC,EAAAhD,GAAA,IAQA6C,EAAAI,UAAA,SAAAW,GACA,aAEA,IAAAV,EAAAN,eAAAgB,GACA,MAAA8B,MAAA9B,EAAA,yBAGAf,EAAA4C,eACA,IAAAE,EAAAzC,EAAAU,GAGA,QAAAgC,KAFA3C,EAAAW,EAEA+B,EACAA,EAAA/C,eAAAgD,KACA5C,EAAA4C,GAAAD,EAAAC,KAUA/C,EAAAgD,UAAA,WACA,aAEA,OAAA5C,GASAJ,EAAAiD,iBAAA,SAAAlC,GACA,aAEA,GAAAV,EAAAN,eAAAgB,GACA,OAAAV,EAAAU,IAWAf,EAAAkD,kBAAA,SAAA9F,GACA,aAEA,OAAAD,EAAAC,IAcA4C,EAAAmD,UAAA,SAAApC,EAAAqC,GACA,aAEA,GAAApD,EAAAmB,OAAAM,SAAAV,GAAA,CACA,YAAAqC,EAEO,CACP,GAAAnD,EAAAF,eAAAgB,GACA,OAAAd,EAAAc,GAEA,MAAA8B,MAAA,mBAAA9B,EAAA,oBALAd,EAAAc,GAAAqC,IAmBApD,EAAAc,UAAA,SAAAC,EAAAS,GACA,aAEA,IAAAxB,EAAAmB,OAAAM,SAAAV,GACA,MAAA8B,MAAA,qCAKA,GAFA9B,EAAAf,EAAAmB,OAAAkC,WAAAtC,GAEAf,EAAAmB,OAAAQ,YAAAH,GAAA,CACA,IAAAtB,EAAAH,eAAAgB,GACA,MAAA8B,MAAA,mBAAA9B,EAAA,uBAGA,OAAAb,EAAAa,GAGA,mBAAAS,IACAA,OAIAxB,EAAAmB,OAAAC,QAAAI,KACAA,EAAA,CAAAA,IAGA,IAAA8B,EAAAzC,EAAAW,EAAAT,GAEA,IAAAuC,EAAArC,MAGA,MAAA4B,MAAAS,EAAApC,OAFAhB,EAAAa,GAAAS,GAYAxB,EAAAuD,iBAAA,WACA,aAEA,OAAArD,GAQAF,EAAAwD,gBAAA,SAAAzC,GACA,oBAEAb,EAAAa,IAOAf,EAAAyD,gBAAA,WACA,aAEAvD,EAAA,IAyHAF,EAAA0D,kBAAA,SAAAlC,GACA,aAEA,IAAAkC,EAAA7C,EAAAW,EAAA,MAEA,QAAAkC,EAAAzC,QACA0C,QAAAC,KAAAF,EAAAxC,QACA,IAUAlB,EAAAD,eAAA,YACAC,EAAAmB,OAAA,IAUAnB,EAAAmB,OAAAM,SAAA,SAAAoC,GACA,aAEA,uBAAAA,gBAAAC,QAUA9D,EAAAmB,OAAA4C,WAAA,SAAAF,GACA,aAGA,OAAAA,GAAA,sBADA,GACAG,SAAAC,KAAAJ,IAUA7D,EAAAmB,OAAAC,QAAA,SAAAyC,GACA,aAEA,OAAAK,MAAA9C,QAAAyC,IAUA7D,EAAAmB,OAAAQ,YAAA,SAAAa,GACA,aAEA,gBAAAA,GAWAxC,EAAAmB,OAAAgD,QAAA,SAAAC,EAAAC,GACA,aAEA,GAAArE,EAAAmB,OAAAQ,YAAAyC,GACA,UAAAvB,MAAA,yBAGA,GAAA7C,EAAAmB,OAAAQ,YAAA0C,GACA,UAAAxB,MAAA,8BAGA,IAAA7C,EAAAmB,OAAA4C,WAAAM,GACA,UAAAxB,MAAA,6CAGA,sBAAAuB,EAAAD,QACAC,EAAAD,QAAAE,QACK,GAAArE,EAAAmB,OAAAC,QAAAgD,GACL,QAAA/C,EAAA,EAAqBA,EAAA+C,EAAA9C,OAAgBD,IACrCgD,EAAAD,EAAA/C,KAAA+C,OAEK,qBAAAA,EAOL,UAAAvB,MAAA,0DANA,QAAAyB,KAAAF,EACAA,EAAArE,eAAAuE,IACAD,EAAAD,EAAAE,KAAAF,KAeApE,EAAAmB,OAAAkC,WAAA,SAAAkB,GACA,aAEA,OAAAA,EAAAtC,QAAA,qBAAAA,QAAA,UAAAP,eAkBA1B,EAAAmB,OAAAe,2BAUAlC,EAAAmB,OAAAqD,iBAAA,SAAAC,EAAAC,EAAAC,GACA,aAGA,IAAAC,EAAA,KAAAF,EAAAzC,QAAA,2BAEA0C,IACAC,EAAA,OAAAA,GAGA,IAAA9C,EAAA,IAAAE,OAAA4C,EAAA,KAEA,OADAH,IAAAxC,QAAAH,EAAAI,IAUAlC,EAAAmB,OAAA0D,qBAAA,SAAAC,GACA,aAEA,OAAAA,EAAA7C,QAAA,UAA8B,KAAAA,QAAA,QAAsB,KAAAA,QAAA,QAAsB,KAAAA,QAAA,SAAuB,MAGjG,IAAA8C,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,aAEA,IAKAC,EACAb,EACAc,EACAC,EACAC,EATAC,EAAAL,GAAA,GACAM,EAAAD,EAAAE,QAAA,QACAC,EAAA,IAAA3D,OAAAiD,EAAA,IAAAC,EAAA,IAAAM,EAAAvD,QAAA,UACA2D,EAAA,IAAA5D,OAAAiD,EAAAO,EAAAvD,QAAA,UACA4D,EAAA,GAOA,GAGA,IAFAT,EAAA,EAEAC,EAAAM,EAAAG,KAAAd,IACA,GAAAY,EAAAG,KAAAV,EAAA,IACAD,MAEAE,GADAf,EAAAoB,EAAAK,WACAX,EAAA,GAAA/D,aAES,GAAA8D,MACTA,EAAA,CACAG,EAAAF,EAAAY,MAAAZ,EAAA,GAAA/D,OACA,IAAA8C,EAAA,CACAa,KAAA,CACAK,QACAC,IAAAhB,GAEA2B,MAAA,CACAZ,MAAAf,EACAgB,IAAAF,EAAAY,OAEAf,MAAA,CACAI,MAAAD,EAAAY,MACAV,OAEApD,WAAA,CACAmD,QACAC,QAKA,GAFAM,EAAAM,KAAA/B,IAEAqB,EACA,OAAAI,SAKKT,IAAAO,EAAAK,UAAAzB,IAEL,OAAAsB,GAiCA7F,EAAAmB,OAAAiF,qBAAA,SAAApB,EAAAC,EAAAC,EAAAC,GACA,aAKA,IAHA,IAAAkB,EAAAtB,EAAAC,EAAAC,EAAAC,EAAAC,GACAmB,EAAA,GAEAjF,EAAA,EAAmBA,EAAAgF,EAAA/E,SAAqBD,EACxCiF,EAAAH,KAAA,CAAAnB,EAAAuB,MAAAF,EAAAhF,GAAAc,WAAAmD,MAAAe,EAAAhF,GAAAc,WAAAoD,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA6E,MAAAZ,MAAAe,EAAAhF,GAAA6E,MAAAX,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA4D,KAAAK,MAAAe,EAAAhF,GAAA4D,KAAAM,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA6D,MAAAI,MAAAe,EAAAhF,GAAA6D,MAAAK,OAGA,OAAAe,GAaAtG,EAAAmB,OAAAqF,uBAAA,SAAAxB,EAAAyB,EAAAxB,EAAAC,EAAAC,GACA,aAEA,IAAAnF,EAAAmB,OAAA4C,WAAA0C,GAAA,CACA,IAAAC,EAAAD,EAEAA,EAAA,WACA,OAAAC,GAIA,IAAAL,EAAAtB,EAAAC,EAAAC,EAAAC,EAAAC,GACAwB,EAAA3B,EACA4B,EAAAP,EAAA/E,OAEA,GAAAsF,EAAA,GACA,IAAAC,EAAA,GAEA,IAAAR,EAAA,GAAAlE,WAAAmD,OACAuB,EAAAV,KAAAnB,EAAAuB,MAAA,EAAAF,EAAA,GAAAlE,WAAAmD,QAGA,QAAAjE,EAAA,EAAqBA,EAAAuF,IAASvF,EAC9BwF,EAAAV,KAAAM,EAAAzB,EAAAuB,MAAAF,EAAAhF,GAAAc,WAAAmD,MAAAe,EAAAhF,GAAAc,WAAAoD,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA6E,MAAAZ,MAAAe,EAAAhF,GAAA6E,MAAAX,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA4D,KAAAK,MAAAe,EAAAhF,GAAA4D,KAAAM,KAAAP,EAAAuB,MAAAF,EAAAhF,GAAA6D,MAAAI,MAAAe,EAAAhF,GAAA6D,MAAAK,OAEAlE,EAAAuF,EAAA,GACAC,EAAAV,KAAAnB,EAAAuB,MAAAF,EAAAhF,GAAAc,WAAAoD,IAAAc,EAAAhF,EAAA,GAAAc,WAAAmD,QAIAe,EAAAO,EAAA,GAAAzE,WAAAoD,IAAAP,EAAA1D,QACAuF,EAAAV,KAAAnB,EAAAuB,MAAAF,EAAAO,EAAA,GAAAzE,WAAAoD,MAGAoB,EAAAE,EAAAC,KAAA,IAGA,OAAAH,GAcA3G,EAAAmB,OAAA4F,aAAA,SAAA/B,EAAAlD,EAAAkF,GACA,aAEA,IAAAhH,EAAAmB,OAAAM,SAAAuD,GACA,uGAGA,GAAAlD,aAAAE,SAAA,EACA,qHAGA,IAAA0D,EAAAV,EAAAiC,UAAAD,GAAA,GAAAE,OAAApF,GACA,OAAA4D,GAAA,EAAAA,GAAAsB,GAAA,GAAAtB,GAWA1F,EAAAmB,OAAAgG,aAAA,SAAAnC,EAAAiB,GACA,aAEA,IAAAjG,EAAAmB,OAAAM,SAAAuD,GACA,uGAGA,OAAAA,EAAAiC,UAAA,EAAAhB,GAAAjB,EAAAiC,UAAAhB,KAaAjG,EAAAmB,OAAAiG,mBAAA,SAAAC,GACA,aAEA,IAAAC,EAAA,UAAAC,GACA,WAAAA,EAAAlF,WAAA,QACK,SAAAkF,GACL,YAAAA,EAAAlF,WAAA,GAAA2B,SAAA,SACK,SAAAuD,GACL,OAAAA,IAcA,OAZAF,IAAApF,QAAA,cAAAsF,GACA,SAAAA,EAEAA,EAAAD,EAAAE,KAAAC,MAAA,EAAAD,KAAAE,WAAAH,OACO,CACP,IAAAI,EAAAH,KAAAE,SAEAH,EAAAI,EAAA,GAAAL,EAAA,GAAAC,GAAAI,EAAA,IAAAL,EAAA,GAAAC,GAAAD,EAAA,GAAAC,GAGA,OAAAA,KAaAvH,EAAAmB,OAAAyG,OAAA,SAAA5C,EAAA6C,EAAAC,GACA,aAUA,OANAD,IAAA,EAIAC,EAAAhE,OAAAgE,GAAA,KAEA9C,EAAA1D,OAAAuG,EACA/D,OAAAkB,KAEA6C,GAAA7C,EAAA1D,QAEAwG,EAAAxG,SACAwG,KAAAC,OAAAF,EAAAC,EAAAxG,SAGAwC,OAAAkB,GAAA8C,EAAAvB,MAAA,EAAAsB,KASA,oBAAAlE,UACAA,QAAA,CACAC,KAAA,SAAAoE,GACA,aAEAC,MAAAD,IAEAE,IAAA,SAAAF,GACA,aAEAC,MAAAD,IAEA9G,MAAA,SAAA8G,GACA,aAEA,MAAAA,KAUAhI,EAAAmB,OAAAgH,QAAA,CACAC,qBAAA,aAMApI,EAAAmB,OAAAkH,OAAA,CACAC,KAAA,KACAC,KAAA,KACAC,IAAA,KACAC,KAAA,KACAC,kBAAA,KACAC,kBAAA,KACAC,kBAAA,KACAC,QAAA,KACAhF,EAAA,MACAiF,GAAA,KACAC,IAAA,KACAC,KAAA,KACAC,OAAA,KACAC,eAAA,KACAC,SAAA,KACAC,YAAA,IACAC,QAAA,KACAC,MAAA,KACAC,UAAA,KACAC,QAAA,KACAC,OAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,UAAA,KACAC,IAAA,KACAC,MAAA,KACAC,SAAA,KACAC,MAAA,KACAC,eAAA,KACAC,kBAAA,IACAC,gBAAA,IACAC,WAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,mBAAA,KACAC,iBAAA,KACAC,WAAA,KACAC,iBAAA,KACAC,kBAAA,KACAC,YAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,cAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,wBAAA,KACAC,IAAA,KACAC,kBAAA,KACAC,qBAAA,KACAC,WAAA,KACAC,cAAA,KACAC,IAAA,KACAC,YAAA,KACAC,QAAA,KACAC,EAAA,MACAC,KAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,KAAA,KACAC,MAAA,KACAC,UAAA,KACAC,cAAA,KACAC,eAAA,KACAC,cAAA,KACAC,QAAA,KACAC,WAAA,KACAC,sBAAA,KACAC,OAAA,KACAC,OAAA,KACAC,SAAA,KACAC,KAAA,KACAC,UAAA,KACAC,OAAA,KACAC,SAAA,KACAC,WAAA,KACAC,eAAA,KACAC,iBAAA,YACAC,IAAA,KACAC,KAAA,KACAC,QAAA,KACAC,QAAA,KACAC,eAAA,KACAC,KAAA,KACAC,IAAA,KACAC,IAAA,KACAC,KAAA,KACAC,MAAA,KACAC,OAAA,KACAC,SAAA,KACAC,KAAA,KACAC,aAAA,KACAC,MAAA,KACAC,WAAA,KACAC,KAAA,KACAC,aAAA,YACAC,OAAA,KACAC,UAAA,KACAC,KAAA,KACAC,SAAA,KACAC,aAAA,KACAC,WAAA,KACAC,YAAA,KACAC,YAAA,KACAC,mBAAA,KACAC,0BAAA,KACAC,oBAAA,KACAC,UAAA,KACAC,mBAAA,KACAC,oBAAA,KACAC,WAAA,KACAC,aAAA,YACAC,QAAA,KACAC,SAAA,KACAC,UAAA,KACAC,SAAA,KACAC,WAAA,KACAC,MAAA,KACAC,KAAA,KACAC,KAAA,KACAC,KAAA,KACAC,KAAA,KACAC,SAAA,KACAC,cAAA,KACAC,MAAA,KACAC,KAAA,KACAC,KAAA,KACAC,QAAA,KACAC,WAAA,KACAC,cAAA,KACAC,aAAA,YACAC,QAAA,KACAC,aAAA,KACAC,IAAA,KACAC,MAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,UAAA,KACAC,aAAA,KACAC,IAAA,KACAC,sBAAA,KACAC,KAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,IAAA,KACAC,yBAAA,KACAC,QAAA,KACAC,mBAAA,KACAC,oBAAA,KACAC,UAAA,KACAC,OAAA,KACAC,KAAA,KACAC,SAAA,KACAC,aAAA,KACAC,QAAA,KACAC,MAAA,KACAC,OAAA,KACAC,aAAA,KACAC,QAAA,KACAC,OAAA,KACAC,OAAA,KACAC,MAAA,KACAC,MAAA,KACAC,aAAA,KACAC,UAAA,KACAC,IAAA,KACAC,cAAA,KACAC,WAAA,KACAC,oBAAA,KACAC,eAAA,KACAC,OAAA,KACAC,IAAA,KACAC,KAAA,KACAC,GAAA,KACAC,OAAA,IACAC,UAAA,KACAC,MAAA,KACAC,2BAAA,KACAC,yBAAA,KACAC,eAAA,KACAC,OAAA,KACAC,SAAA,KACAC,eAAA,KACAC,SAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,SAAA,KACAC,cAAA,KACAC,eAAA,KACAC,OAAA,KACAC,OAAA,KACAC,YAAA,KACAC,aAAA,KACAC,YAAA,KACAC,UAAA,KACAC,GAAA,KACAC,MAAA,KACAC,KAAA,KACAC,QAAA,KACAC,mBAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,OAAA,KACAC,QAAA,KACAC,UAAA,KACAC,QAAA,KACAC,UAAA,KACAC,QAAA,KACAC,UAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,SAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,gBAAA,KACAC,MAAA,KACAC,qBAAA,KACAC,8BAAA,IACAC,gBAAA,KACAC,gBAAA,KACAC,WAAA,KACAC,MAAA,KACAC,SAAA,KACAC,OAAA,KACAC,OAAA,KACAC,WAAA,KACAC,MAAA,KACAC,SAAA,KACAC,eAAA,KACAC,cAAA,KACAC,WAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,aAAA,KACAC,wBAAA,KACAC,0BAAA,YACAC,cAAA,KACAC,kBAAA,KACAC,OAAA,KACAC,KAAA,KACAC,UAAA,KACAC,UAAA,KACAC,KAAA,KACAC,eAAA,KACAC,OAAA,KACAC,4BAAA,KACAC,0BAAA,mBACAC,8BAAA,mBACAC,mBAAA,0BACAC,qBAAA,KACAC,uBAAA,0BACAC,IAAA,KACAC,KAAA,KACAC,gBAAA,KACAC,KAAA,KACAC,OAAA,KACAC,YAAA,KACAC,cAAA,KACAC,QAAA,KACAC,UAAA,KACAC,UAAA,KACAC,gBAAA,KACAC,cAAA,KACAC,eAAA,KACAC,MAAA,KACAC,IAAA,KACAC,gBAAA,KACAC,aAAA,KACAC,SAAA,KACAC,MAAA,KACAC,WAAA,IACAC,kBAAA,KACAC,MAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,OAAA,KACAC,OAAA,KACAC,cAAA,KACAC,YAAA,YACAC,MAAA,KACAC,gBAAA,KACAC,KAAA,KACAC,KAAA,KACAC,KAAA,KACAC,eAAA,KACAC,KAAA,KACAC,iBAAA,KACAC,eAAA,KACAC,OAAA,KACAC,cAAA,KACAC,iBAAA,KACAC,eAAA,MACAC,gCAAA,KACAC,SAAA,KACAC,aAAA,KACAC,sBAAA,KACAC,MAAA,KACAC,WAAA,KACAC,cAAA,KACAC,IAAA,KACAC,KAAA,KACAC,OAAA,KACAC,MAAA,KACAC,QAAA,KACAC,KAAA,KACAC,SAAA,KACAC,KAAA,KACAC,OAAA,KACAC,YAAA,KACAC,MAAA,KACAC,gBAAA,KACAC,cAAA,KACAC,QAAA,KACAC,KAAA,KACAC,KAAA,KACAC,IAAA,KACAC,SAAA,KACAC,MAAA,KACAC,IAAA,KACAC,YAAA,KACAC,aAAA,KACAC,eAAA,KACAC,WAAA,KACAC,IAAA,KACAC,SAAA,KACAC,yBAAA,KACAC,sBAAA,KACAC,cAAA,KACAC,SAAA,KACAC,MAAA,KACA1Y,IAAA,KACA2Y,oBAAA,KACAC,KAAA,KACAC,gBAAA,KACAC,qBAAA,KACAC,eAAA,KACAC,YAAA,KACAC,eAAA,KACAC,IAAA,KACAC,kBAAA,YACAC,WAAA,KACAC,KAAA,KACAC,uBAAA,KACAC,sBAAA,KACAC,cAAA,KACAC,QAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,eAAA,YACAC,mBAAA,mBACAC,gBAAA,YACAC,oBAAA,mBACAC,qBAAA,mBACAC,mBAAA,mBACAC,uBAAA,0BACAC,oBAAA,mBACAC,wBAAA,0BACAC,yBAAA,0BACAC,yBAAA,0BACAC,sBAAA,mBACAC,0BAAA,0BACAC,2BAAA,0BACAC,iBAAA,YACAC,qBAAA,mBACAC,kBAAA,YACAC,sBAAA,mBACAC,uBAAA,mBACAC,uBAAA,mBACAC,2BAAA,0BACAC,wBAAA,mBACAC,4BAAA,0BACAC,6BAAA,0BACAC,aAAA,IACAC,IAAA,KACAC,QAAA,KACAC,KAAA,KACAC,iBAAA,aACAC,aAAA,KACAC,MAAA,IACAC,aAAA,KACAC,aAAA,KACAC,YAAA,KACAC,eAAA,KACAC,WAAA,KACAC,KAAA,KACAC,YAAA,KACAC,UAAA,KACAC,mBAAA,KACAC,6BAAA,KACAC,KAAA,KACAC,UAAA,KACAC,sBAAA,KACAC,YAAA,IACAC,UAAA,KACAC,WAAA,KACA9c,MAAA,KACA+c,WAAA,KACAC,aAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,QAAA,KACAC,IAAA,KACAC,MAAA,KACAC,SAAA,KACAC,WAAA,KACAC,eAAA,KACAC,SAAA,KACAC,aAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,eAAA,KACAC,KAAA,KACAC,UAAA,KACAC,aAAA,KACAC,MAAA,KACAC,KAAA,KACAC,SAAA,KACAC,cAAA,KACAC,aAAA,YACAC,eAAA,KACAC,cAAA,KACAC,SAAA,KACAC,UAAA,KACAC,oBAAA,KACAC,YAAA,KACAC,SAAA,KACAC,KAAA,KACAC,IAAA,KACAC,OAAA,KACA5jB,MAAA,KACA6jB,KAAA,KACAC,WAAA,KACAC,KAAA,KACAC,qBAAA,KACAC,SAAA,KACAC,KAAA,KACAC,KAAA,KACAC,YAAA,MACAC,cAAA,aACAC,QAAA,KACAC,OAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,YAAA,KACAC,iBAAA,IACAC,cAAA,IACAC,UAAA,KACAC,KAAA,KACAC,SAAA,KACAC,UAAA,KACAC,YAAA,YACAC,OAAA,KACAC,IAAA,KACAC,cAAA,KACAC,YAAA,YACAC,UAAA,KACAC,OAAA,KACAC,gBAAA,IACAC,kBAAA,KACAC,QAAA,KACAC,KAAA,IACAC,QAAA,KACAC,UAAA,KACAC,OAAA,KACAC,cAAA,KACAC,eAAA,KACAC,WAAA,KACAC,aAAA,KACAC,MAAA,KACAC,iBAAA,KACAC,WAAA,KACAC,eAAA,KACAC,UAAA,KACAC,WAAA,KACAC,OAAA,KACAC,iBAAA,KACAC,oBAAA,IACAC,kBAAA,KACAC,wBAAA,KACAC,iBAAA,IACAC,uBAAA,KACAC,gBAAA,IACAC,WAAA,KACAC,KAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,UAAA,KACAC,MAAA,KACAC,KAAA,KACAC,UAAA,KACAC,MAAA,KACAC,aAAA,KACAC,SAAA,KACAC,WAAA,KACAC,OAAA,KACAC,MAAA,KACAC,WAAA,KACAC,UAAA,KACAC,uBAAA,IACAC,MAAA,KACAC,kBAAA,KACAC,OAAA,KACAC,KAAA,KACAC,OAAA,KACAC,UAAA,KACAC,WAAA,KACAC,UAAA,IACAC,SAAA,KACAC,GAAA,KACAC,oBAAA,KACAC,IAAA,KACAC,WAAA,KACAC,kBAAA,KACAC,mBAAA,KACAC,mBAAA,KACAC,SAAA,KACAC,YAAA,KACAC,OAAA,KACAC,gBAAA,KACAC,eAAA,KACAC,MAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,cAAA,KACAC,MAAA,KACAC,IAAA,KACAC,QAAA,KACAC,SAAA,KACAC,MAAA,KACAjoB,IAAA,KACAkoB,SAAA,KACAC,WAAA,KACAC,aAAA,KACAC,OAAA,KACAC,KAAA,KACAC,QAAA,KACAC,YAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,qBAAA,KACAC,WAAA,KACAC,MAAA,KACAC,KAAA,KACAC,MAAA,KACAC,kBAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,kBAAA,KACAC,4BAAA,KACAC,YAAA,KACAC,SAAA,KACAC,OAAA,KACAC,OAAA,KACAC,aAAA,KACAC,iBAAA,KACAC,0BAAA,KACAC,MAAA,KACAC,IAAA,KACAC,QAAA,KACAC,aAAA,KACAC,MAAA,KACAC,WAAA,KACAC,KAAA,KACAC,KAAA,KACAC,KAAA,KACAC,SAAA,KACAC,OAAA,KACAC,KAAA,KACAC,kBAAA,KACAC,SAAA,KACAC,KAAA,IACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,eAAA,KACAC,WAAA,KACAloB,EAAA,KACAmoB,IAAA,KACAC,UAAA,KACAC,QAAA,MACAC,QAAA,KACAC,eAAA,KACAC,kBAAA,KACAC,qBAAA,KACAC,IAAA,KACAC,WAAA,YACAC,cAAA,YACAC,iBAAA,YACAC,SAAA,YACAC,YAAA,KACAC,gBAAA,YACAC,mBAAA,YACAC,WAAA,YACAC,gBAAA,YACAC,kBAAA,YACAC,cAAA,KACAC,UAAA,YACAC,aAAA,YACAC,aAAA,YACAC,kBAAA,YACAC,UAAA,YACAC,qBAAA,YACAC,uBAAA,YACAC,cAAA,YACAC,cAAA,YACAC,WAAA,YACAC,YAAA,YACAC,YAAA,YACAC,iBAAA,YACAC,oBAAA,KACAC,gBAAA,KACAC,UAAA,KACAC,UAAA,KACAC,kBAAA,KACAC,WAAA,KACAC,qBAAA,KACAC,KAAA,KACAC,cAAA,KACAC,YAAA,YACAC,aAAA,KACAC,eAAA,KACAC,aAAA,KACAC,KAAA,KACAC,MAAA,KACAC,KAAA,KACAC,cAAA,YACAC,QAAA,KACAC,KAAA,KACAC,MAAA,KACAC,MAAA,KACAC,WAAA,KACAC,WAAA,KACAC,WAAA,KACAC,UAAA,KACAC,QAAA,KACAC,SAAA,KACAC,iBAAA,KACAC,iBAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,OAAA,KACAC,YAAA,KACAC,SAAA,KACAC,KAAA,KACAC,aAAA,KACAC,OAAA,KACAC,WAAA,KACAC,cAAA,KACAC,WAAA,KACAC,SAAA,KACAC,WAAA,KACAC,SAAA,IACAC,oBAAA,KACAC,sBAAA,YACAC,kBAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,MAAA,KACAC,OAAA,KACAC,aAAA,KACAC,MAAA,KACAC,UAAA,KACAC,OAAA,KACAC,SAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,cAAA,KACAC,KAAA,KACAC,UAAA,KACAC,WAAA,KACAC,cAAA,KACAC,eAAA,KACAC,QAAA,KACAC,4BAAA,IACAC,UAAA,KACAC,aAAA,KACAC,IAAA,KACAC,SAAA,KACAC,mBAAA,KACAC,UAAA,KACAC,eAAA,KACAC,kBAAA,IACAC,GAAA,KACAC,YAAA,YACAC,cAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,YAAA,KACAC,SAAA,KACAC,cAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,eAAA,KACAC,WAAA,KACAC,oBAAA,KACAC,KAAA,KACAC,SAAA,KACAC,+BAAA,KACAC,MAAA,KACAC,aAAA,KACAC,EAAA,KACAC,GAAA,MACAC,MAAA,KACAC,QAAA,KACAC,KAAA,KACAC,OAAA,KACAC,SAAA,KACAC,GAAA,KACAC,QAAA,KACAC,OAAA,YACAC,SAAA,KACAC,QAAA,KACAC,UAAA,KACAC,YAAA,KACAC,GAAA,KACAC,GAAA,KACAC,oBAAA,KACAC,aAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,iBAAA,KACAC,WAAA,KACAC,WAAA,KACAC,cAAA,KACAC,UAAA,IACAC,YAAA,KACAC,eAAA,KACAC,YAAA,KACAC,IAAA,KACAC,GAAA,KACAC,QAAA,KACAC,eAAA,KACAC,eAAA,KACAC,MAAA,KACAC,WAAA,KACAC,UAAA,KACAC,SAAA,KACAC,WAAA,KACAC,UAAA,KACAC,WAAA,KACAC,kBAAA,IACAC,QAAA,MACAC,sBAAA,KACAC,aAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,aAAA,IACAC,aAAA,KACAC,MAAA,KACAC,QAAA,KACAC,KAAA,KACAC,IAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,gBAAA,KACAC,UAAA,KACAC,eAAA,KACAC,cAAA,KACAC,MAAA,KACAC,KAAA,IACAC,IAAA,KACAC,KAAA,KACAC,SAAA,KACAC,KAAA,KACAC,UAAA,KACAC,UAAA,KACAC,OAAA,KACAC,MAAA,KACAC,iBAAA,KACAC,mBAAA,KACAC,qBAAA,IACAC,WAAA,KACAC,WAAA,KACAC,YAAA,KACAC,SAAA,KACAC,WAAA,KACAC,WAAA,KACAC,YAAA,YACAC,OAAA,KACAC,QAAA,KACAC,YAAA,KACAC,YAAA,KACAC,QAAA,KACAC,cAAA,KACAC,OAAA,KACAC,MAAA,KACAC,YAAA,KACAC,MAAA,KACAC,KAAA,KACAC,YAAA,KACAC,YAAA,YACAC,KAAA,KACAC,aAAA,KACAC,eAAA,KACAC,sBAAA,IACAC,OAAA,KACAC,SAAA,KACAC,QAAA,KACAC,aAAA,KACAC,MAAA,KACAC,QAAA,KACAC,wBAAA,KACAC,SAAA,IACAC,OAAA,KACAC,QAAA,KACAC,UAAA,KACAC,WAAA,KACAC,MAAA,KACAC,aAAA,KACAC,YAAA,KACAC,YAAA,KACAC,cAAA,KACAC,QAAA,KACAC,aAAA,aACAC,oBAAA,KACAC,iCAAA,KACAC,aAAA,KACAC,mBAAA,KACAC,iBAAA,YACAC,IAAA,KACAC,MAAA,KACAC,IAAA,KACAC,cAAA,IACAC,QAAA,KACAC,WAAA,KACAC,WAAA,KACAC,QAAA,KACAC,SAAA,KACAC,gBAAA,KACAr1B,OAAA,KACAs1B,WAAA,KACAC,qBAAA,IACAC,SAAA,KACAC,iBAAA,KACAC,OAAA,IACAC,WAAA,KACAC,OAAA,KACAC,KAAA,KACAC,UAAA,KACAC,aAAA,KACAC,WAAA,KACAC,mBAAA,KACAC,KAAA,KACAC,MAAA,KACAC,OAAA,KACAC,KAAA,KACAC,UAAA,KACAC,eAAA,KACAC,QAAA,KACAC,KAAA,KACAC,QAAA,KACAC,eAAA,KACAC,cAAA,KACAC,WAAA,KACAC,aAAA,YACAC,eAAA,KACAC,YAAA,KACAC,wBAAA,KACAC,cAAA,YACAC,GAAA,MACAC,YAAA,KACAC,KAAA,KACAC,OAAA,KACAC,MAAA,KACAC,UAAA,KACAC,UAAA,KACAC,OAAA,KACAC,eAAA,KACAC,SAAA,KACAC,SAAA,KACAC,SAAA,KACAC,OAAA,KACAC,WAAA,KACAC,OAAA,KACAC,KAAA,KACAC,OAAA,KACAC,YAAA,KACAC,SAAA,KACAC,OAAA,KACAC,oBAAA,KACAC,SAAA,KACAC,MAAA,KACAC,WAAA,KACAC,MAAA,KACAC,MAAA,KACAC,OAAA,KACAC,cAAA,IACAC,KAAA,KACAC,MAAA,KACAC,SAAA,KACAC,cAAA,KACAC,OAAA,KACAC,OAAA,KACAC,gBAAA,KACAC,iBAAA,KACAC,IAAA,KACAC,MAAA,IACAC,MAAA,KACAC,qBAAA,KACAC,SAAA,KACAC,aAAA,KACAC,OAAA,KACAC,uBAAA,KACAC,sBAAA,KACAC,aAAA,KACAC,eAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,mBAAA,KACAC,wBAAA,KACAC,MAAA,KACAC,UAAA,KACAC,OAAA,KACAC,WAAA,KACAC,YAAA,KACAC,MAAA,KACAC,UAAA,KACAC,QAAA,KACAC,MAAA,KACAC,MAAA,KACAC,cAAA,KACAC,YAAA,KACAC,UAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,IAAA,KACAC,OAAA,KACAC,KAAA,KACAC,IAAA,KACAC,MAAA,KACAC,cAAA,KACAC,OAAA,KACAC,UAAA,KACAC,QAAA,KACAC,SAAA,KACAC,SAAA,IACAC,gBAAA,KACAC,cAAA,KACAC,QAAA,KACAC,cAAA,KACAC,eAAA,KACAC,UAAA,KACAC,OAAA,KACAC,WAAA,KACAC,gBAAA,KACAC,eAAA,KACAC,MAAA,KACAC,MAAA,KACAC,QAAA,KACAC,KAAA,KACAC,MAAA,KACAC,kBAAA,KACAC,cAAA,KACAC,MAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,KAAA,KACAC,YAAA,IACAC,UAAA,KACAC,UAAA,IACAC,eAAA,KACAC,WAAA,KACAC,iBAAA,KACAC,6BAAA,KACAC,6BAAA,KACAC,kBAAA,KACAC,kBAAA,KACAC,uBAAA,KACAC,sBAAA,KACAC,uBAAA,KACAC,cAAA,KACAC,UAAA,KACAC,WAAA,KACAC,MAAA,KACAC,QAAA,KACAC,uBAAA,KACAC,YAAA,KACAC,cAAA,YACAC,MAAA,KACAC,mBAAA,KACAC,MAAA,KACAC,YAAA,KACAC,YAAA,KACAC,aAAA,KACAC,aAAA,KACAC,eAAA,YACAC,QAAA,KACAC,UAAA,KACAC,QAAA,KACAC,KAAA,KACAC,KAAA,KACAC,cAAA,KACAC,OAAA,KACAC,KAAA,KACAC,IAAA,KACAC,mBAAA,KACAC,UAAA,KACAC,OAAA,KACAC,KAAA,KACAC,YAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,OAAA,KACAC,QAAA,KACAC,MAAA,KACAC,OAAA,KACAC,YAAA,IACAC,iBAAA,YACAC,WAAA,KACAC,GAAA,KACAC,OAAA,KACAC,YAAA,KACAC,OAAA,KACAC,OAAA,KACAC,IAAA,KACAC,OAAA,KACAC,QAAA,KACAC,UAAA,KACAC,QAAA,KACAC,cAAA,KACAC,MAAA,KACAC,OAAA,KACAC,KAAA,KACAC,wBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,QAAA,KACAC,WAAA,KACAC,OAAA,KACAC,eAAA,KACAC,cAAA,KACAC,MAAA,KACAC,QAAA,KACAC,MAAA,KACAC,cAAA,KACAC,OAAA,KACAC,OAAA,KACAC,GAAA,KACAC,0BAAA,KACAC,WAAA,KACAC,sBAAA,KACAC,wBAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,MACAC,MAAA,MACAC,MAAA,KACAC,MAAA,KACAC,MAAA,MACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,SAAA,KACAC,SAAA,KACAC,SAAA,KACAC,QAAA,KACAC,OAAA,KACAC,GAAA,KACAC,iBAAA,KACAC,EAAA,KACAC,uBAAA,KACAC,IAAA,KACAC,eAAA,KACAC,aAAA,KACAC,WAAA,KACAC,OAAA,KACAC,MAAA,KACAC,QAAA,KACAC,WAAA,KACAC,GAAA,KACAC,cAAA,KACAC,YAAA,KACAC,cAAA,YACAC,qBAAA,KACAC,oBAAA,KACAC,QAAA,KACAC,YAAA,KACAC,MAAA,KACAC,cAAA,KACAC,WAAA,KACAC,KAAA,KACAC,UAAA,KACAC,qBAAA,KACAC,GAAA,KACAC,MAAA,KACAC,QAAA,KACAC,mBAAA,MACAC,qBAAA,aACAC,MAAA,KACAC,OAAA,KACAC,gBAAA,KACAC,WAAA,KACAC,iBAAA,IACAC,aAAA,KACAC,WAAA,MACAC,aAAA,KACAC,mBAAA,KACAC,0BAAA,KACAC,oBAAA,KACAC,mBAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,WAAA,KACAC,UAAA,KACAC,WAAA,KACAC,KAAA,KACAC,KAAA,KACAC,MAAA,KACAC,aAAA,YACAC,gBAAA,YACAC,mBAAA,YACAC,WAAA,YACAC,kBAAA,YACAC,qBAAA,YACAC,aAAA,YACAC,kBAAA,YACAC,oBAAA,YACAC,YAAA,YACAC,eAAA,YACAC,eAAA,YACAC,oBAAA,YACAC,YAAA,YACAC,uBAAA,YACAC,yBAAA,YACAC,gBAAA,YACAC,gBAAA,YACAC,aAAA,YACAC,cAAA,YACAC,cAAA,YACAC,mBAAA,YACAC,kBAAA,YACAC,eAAA,KACAC,WAAA,KACAC,gBAAA,YACAC,OAAA,KACAC,UAAA,KACAC,QAAA,KACAC,OAAA,KACAC,aAAA,KACAhrC,EAAA,IACAirC,aAAA,KACAC,IAAA,KACAC,SAAA,KACAC,IAAA,KACAC,IAAA,KACAC,kBAAA,KACAC,IAAA,KAGAC,QAAA,oIACAnxC,SAAA,+LAaAA,EAAAoxC,UAAA,SAAAC,GACA,aAEA,IAMA1wC,EAAA,GAOA2wC,EAAA,GAOAC,EAAA,GAOA3vC,EAAA,GAKA4vC,EAAApxC,EAMAZ,EAAA,CACAiyC,OAAA,GACAC,IAAA,GACAC,OAAA,IA0CA,SAAAC,EAAApwC,EAAAT,GAGA,GAFAA,KAAA,KAEAf,EAAAmB,OAAAM,SAAAD,GAAA,CAIA,GAFAT,EADAS,EAAAxB,EAAAmB,OAAAkC,WAAA7B,GAGAxB,EAAAE,WAAAsB,GAGA,OAFAmC,QAAAC,KAAA,wBAAApC,EAAA,qIAmDA,SAAAA,EAAAT,GACA,mBAAAS,IACAA,IAAA,IAAAxB,EAAAoxC,YAGApxC,EAAAmB,OAAAC,QAAAI,KACAA,EAAA,CAAAA,IAGA,IAAAP,EAAAJ,EAAAW,EAAAT,GAEA,IAAAE,QACA,MAAA4B,MAAA5B,EAAAC,OAGA,QAAAG,EAAA,EAAqBA,EAAAG,EAAAF,SAAgBD,EACrC,OAAAG,EAAAH,GAAA5D,MACA,WACA6zC,EAAAnrC,KAAA3E,EAAAH,IACA,MAEA,aACAkwC,EAAAprC,KAAA3E,EAAAH,IACA,MAEA,QAEA,MAAAwB,MAAA,iDA7EAgvC,CAAA7xC,EAAAE,WAAAsB,MAES,GAAAxB,EAAAmB,OAAAQ,YAAAzB,EAAAsB,IAGT,MAAAqB,MAAA,cAAArB,EAAA,+EAFAA,EAAAtB,EAAAsB,GAMA,mBAAAA,IACAA,OAGAxB,EAAAmB,OAAAC,QAAAI,KACAA,EAAA,CAAAA,IAGA,IAAAswC,EAAAjxC,EAAAW,EAAAT,GAEA,IAAA+wC,EAAA7wC,MACA,MAAA4B,MAAAivC,EAAA5wC,OAGA,QAAAG,EAAA,EAAqBA,EAAAG,EAAAF,SAAgBD,EAAA,CACrC,OAAAG,EAAAH,GAAA5D,MACA,WACA6zC,EAAAnrC,KAAA3E,EAAAH,IACA,MAEA,aACAkwC,EAAAprC,KAAA3E,EAAAH,IAIA,GAAAG,EAAAH,GAAAtB,eAAA,aACA,QAAAgC,KAAAP,EAAAH,GAAAO,UACAJ,EAAAH,GAAAO,UAAA7B,eAAAgC,IACAgwC,EAAAhwC,EAAAP,EAAAH,GAAAO,UAAAG,KAmDA,SAAAgwC,EAAAhxC,EAAAsD,GACA,IAAArE,EAAAmB,OAAAM,SAAAV,GACA,MAAA8B,MAAA,oFAAA9B,EAAA,UAGA,sBAAAsD,EACA,MAAAxB,MAAA,0FAAAwB,EAAA,UAGAzC,EAAA7B,eAAAgB,KACAa,EAAAb,GAAA,IAGAa,EAAAb,GAAAoF,KAAA9B,IA9IA,WAGA,QAAA2tC,KAFAX,KAAA,GAEAlxC,EACAA,EAAAJ,eAAAiyC,KACArxC,EAAAqxC,GAAA7xC,EAAA6xC,IAKA,oBAAAX,EAOA,MAAAxuC,MAAA,sEAAAwuC,EAAA,wBANA,QAAAvxC,KAAAuxC,EACAA,EAAAtxC,eAAAD,KACAa,EAAAb,GAAAuxC,EAAAvxC,IAOAa,EAAAT,YACAF,EAAAmB,OAAAgD,QAAAxD,EAAAT,WAAA0xC,GA5BAK,GAwKAxvC,KAAAyvC,UAAA,SAAAC,EAAA1tC,EAAA9D,EAAAyxC,GACA,GAAAxwC,EAAA7B,eAAAoyC,GACA,QAAAE,EAAA,EAAwBA,EAAAzwC,EAAAuwC,GAAA7wC,SAAgC+wC,EAAA,CACxD,IAAAC,EAAA1wC,EAAAuwC,GAAAE,GAAAF,EAAA1tC,EAAAhC,KAAA9B,EAAAyxC,GAEAE,QAAA,IAAAA,IACA7tC,EAAA6tC,GAKA,OAAA7tC,GAUAhC,KAAAsvC,OAAA,SAAAhxC,EAAAsD,GAEA,OADA0tC,EAAAhxC,EAAAsD,GACA5B,MASAA,KAAA8vC,SAAA,SAAA9tC,GAEA,IAAAA,EACA,OAAAA,EAGA,IAAA2tC,EAAA,CACAI,YAAA,GACAC,cAAA,GACAC,WAAA,GACAC,MAAA,GACAC,QAAA,GACAC,YAAA,GACAC,WAAA,EACAC,eAAA,GACAzB,iBACAC,kBACAyB,UAAAvwC,KACAjE,aAAA,GACAgB,SAAA,CACAiyC,OAAA,GACAC,IAAA,GACAC,OAAA,KA6DA,OA5CAltC,GAHAA,GAFAA,GAFAA,GAJAA,IAAAxC,QAAA,YAIAA,QAAA,aAEAA,QAAA,eAEAA,QAAA,aAGAA,QAAA,oBAEAtB,EAAAhC,sBACA8F,EA1FA,SAAAA,GACA,IAAAwuC,EAAAxuC,EAAAyB,MAAA,WAAA5E,OACA4xC,EAAA,IAAAlxC,OAAA,UAAiCixC,EAAA,IAAc,MAC/C,OAAAxuC,EAAAxC,QAAAixC,EAAA,IAuFAC,CAAA1uC,IAIAA,EAAA,OAAAA,EAAA,OAUAA,GARAA,EAAAzE,EAAAmD,UAAA,QAAAnD,CAAAyE,EAAA9D,EAAAyxC,IAQAnwC,QAAA,iBAEAjC,EAAAmB,OAAAgD,QAAAmtC,EAAA,SAAA9vC,GACAiD,EAAAzE,EAAAmD,UAAA,eAAAnD,CAAAwB,EAAAiD,EAAA9D,EAAAyxC,KAGA3tC,EAAAzE,EAAAmD,UAAA,WAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,kBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,mBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,iBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,eAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,uBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,aAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,kBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAKA3tC,GAFAA,GAFAA,EAAAzE,EAAAmD,UAAA,uBAAAnD,CAAAyE,EAAA9D,EAAAyxC,IAEAnwC,QAAA,aAEAA,QAAA,WAEAwC,EAAAzE,EAAAmD,UAAA,uBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAEApyC,EAAAmB,OAAAgD,QAAAotC,EAAA,SAAA/vC,GACAiD,EAAAzE,EAAAmD,UAAA,eAAAnD,CAAAwB,EAAAiD,EAAA9D,EAAAyxC,KAGA5yC,EAAA4yC,EAAA5yC,SACAiF,GAUAhC,KAAA2wC,aAAA3wC,KAAA4wC,OAAA,SAAAC,EAAAC,GAUA,GAFAD,GALAA,GADAA,IAAArxC,QAAA,eACAA,QAAA,aAKAA,QAAA,wBAEAsxC,EAAA,CACA,IAAAC,gBAAAC,SAGA,UAAA5wC,MAAA,6HAFA0wC,EAAAC,OAAAC,SAMA,IAAAC,EAAAH,EAAAI,cAAA,OACAD,EAAAE,UAAAN,EACA,IAAAlB,EAAA,CACAyB,QAmCA,SAAAH,GAIA,IAHA,IAAAI,EAAAJ,EAAAK,iBAAA,OACAC,EAAA,GAEA3yC,EAAA,EAAuBA,EAAAyyC,EAAAxyC,SAAiBD,EACxC,OAAAyyC,EAAAzyC,GAAA4yC,mBAAA,SAAAH,EAAAzyC,GAAA6yC,WAAAC,QAAAzyC,cAAA,CACA,IAAA0yC,EAAAN,EAAAzyC,GAAA6yC,WAAAN,UAAAS,OACAC,EAAAR,EAAAzyC,GAAA6yC,WAAAK,aAAA,qBAEA,QAAAD,EAGA,IAFA,IAAAE,EAAAV,EAAAzyC,GAAA6yC,WAAAO,UAAAC,MAAA,KAEAC,EAAA,EAA6BA,EAAAH,EAAAlzC,SAAoBqzC,EAAA,CACjD,IAAAC,EAAAJ,EAAAG,GAAAzuC,MAAA,mBAEA,UAAA0uC,EAAA,CACAN,EAAAM,EAAA,GACA,OAMAR,EAAAp0C,EAAAmB,OAAA0D,qBAAAuvC,GACAJ,EAAA7tC,KAAAiuC,GACAN,EAAAzyC,GAAAwzC,UAAA,sBAAAP,EAAA,iBAAAjzC,EAAA2C,WAAA,oBAEAgwC,EAAA7tC,KAAA2tC,EAAAzyC,GAAAuyC,WACAE,EAAAzyC,GAAAuyC,UAAA,GACAE,EAAAzyC,GAAAyzC,aAAA,SAAAzzC,EAAA2C,YAIA,OAAAgwC,EApEAe,CAAArB,KAcA,SAAAsB,EAAAC,GACA,QAAAC,EAAA,EAAuBA,EAAAD,EAAAE,WAAA7zC,SAA4B4zC,EAAA,CACnD,IAAAE,EAAAH,EAAAE,WAAAD,GAEA,IAAAE,EAAAC,SACA,KAAAtvC,KAAAqvC,EAAAE,YAIAF,EAAAE,UAAAF,EAAAE,UAAAZ,MAAA,MAAA5tC,KAAA,KACAsuC,EAAAE,UAAAF,EAAAE,UAAArzC,QAAA,iBAJAgzC,EAAAM,YAAAH,KACAF,GAKW,IAAAE,EAAAC,UACXL,EAAAI,IAxBAJ,CAAAtB,GAOA,IAHA,IAAA8B,EAAA9B,EAAAyB,WACAM,EAAA,GAEAp0C,EAAA,EAAqBA,EAAAm0C,EAAAl0C,OAAkBD,IACvCo0C,GAAAz1C,EAAAmD,UAAA,oBAAAnD,CAAAw1C,EAAAn0C,GAAA+wC,GA4DA,OAAAqD,GASAhzC,KAAAH,UAAA,SAAAC,EAAAC,GACA7B,EAAA4B,GAAAC,GASAC,KAAAC,UAAA,SAAAH,GACA,OAAA5B,EAAA4B,IAQAE,KAAAE,WAAA,WACA,OAAAhC,GASA8B,KAAAizC,aAAA,SAAA50C,EAAAC,GAGA6wC,EAAA9wC,EAFAC,KAAA,OAUA0B,KAAAkzC,aAAA,SAAAC,GACAhE,EAAAgE,IAQAnzC,KAAArC,UAAA,SAAAW,GACA,IAAAV,EAAAN,eAAAgB,GACA,MAAA8B,MAAA9B,EAAA,yBAGA,IAAA+B,EAAAzC,EAAAU,GAGA,QAAAgC,KAFAyuC,EAAAzwC,EAEA+B,EACAA,EAAA/C,eAAAgD,KACApC,EAAAoC,GAAAD,EAAAC,KAUAN,KAAAO,UAAA,WACA,OAAAwuC,GAUA/uC,KAAAe,gBAAA,SAAA1C,GACAd,EAAAmB,OAAAC,QAAAN,KACAA,EAAA,CAAAA,IAGA,QAAA+C,EAAA,EAAqBA,EAAA/C,EAAAQ,SAAsBuC,EAAA,CAG3C,IAFA,IAAArC,EAAAV,EAAA+C,GAEAxC,EAAA,EAAuBA,EAAAiwC,EAAAhwC,SAA2BD,EAClDiwC,EAAAjwC,KAAAG,GACA8vC,EAAAjwC,GAAAw0C,OAAAx0C,EAAA,GAIA,OAAwBkwC,EAAAjwC,SAA6BD,EACrDkwC,EADA,KACA/vC,GACA+vC,EAFA,GAEAsE,OAAAx0C,EAAA,KAWAoB,KAAAc,iBAAA,WACA,OACA+wC,SAAAhD,EACAwE,OAAAvE,IAUA9uC,KAAAszC,YAAA,SAAArE,GACA,OAAAA,EACAlyC,EAAAkyC,IAEAlyC,EAAAiyC,QASAhvC,KAAAuzC,kBAAA,WACA,OAAAx2C,EAAAmyC,QASAlvC,KAAAwzC,iBAAA,SAAA1zC,EAAAC,GACAhD,EAAAiyC,OAAAlvC,GAAAC,GAQAC,KAAAyzC,mBAAA,SAAAvE,GACAnyC,EAAAmyC,UAQAlvC,KAAA0zC,gBAAA,SAAAzE,GACAlyC,EAAAkyC,QAQA1xC,EAAAmD,UAAA,mBAAAsB,EAAA9D,EAAAyxC,GACA,aAIA,IAAAgE,EAAA,SAAAj0C,EAAAk0C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAOA,GANA12C,EAAAmB,OAAAQ,YAAA+0C,KACAA,EAAA,IAGAJ,IAAA50C,cAEAS,EAAA+E,OAAA,mCACAqvC,EAAA,QACO,IAAAA,EAAA,CAQP,GAPAD,IAEAA,EAAAD,EAAA30C,cAAAO,QAAA,cAGAs0C,EAAA,IAAAD,EAEAt2C,EAAAmB,OAAAQ,YAAAywC,EAAAO,MAAA2D,IAOA,OAAAn0C,EANAo0C,EAAAnE,EAAAO,MAAA2D,GAEAt2C,EAAAmB,OAAAQ,YAAAywC,EAAAQ,QAAA0D,MACAI,EAAAtE,EAAAQ,QAAA0D,IASA,IAAAK,EAAA,aADAJ,IAAAt0C,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,2BACA,IAiBA,MAfA,KAAAw0C,GAAA,OAAAA,IAIAC,GAAA,YADAD,GAFAA,IAAAz0C,QAAA,gBAEAA,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,2BACA,KAKAvB,EAAAxB,uBAAA,KAAA4G,KAAAwwC,KAEAI,GAAA,wBAGAA,GAAA,IAAAN,EAAA,QAuCA,OAzBA5xC,GAJAA,GAFAA,GAHAA,GArDAA,EAAA2tC,EAAAY,UAAAd,UAAA,iBAAAztC,EAAA9D,EAAAyxC,IAqDAnwC,QAAA,0DAAAm0C,IAGAn0C,QAAA,6FAAAm0C,IAEAn0C,QAAA,qHAAAm0C,IAIAn0C,QAAA,2BAAAm0C,GAEAz1C,EAAA3B,aACAyF,IAAAxC,QAAA,+DAAA20C,EAAAC,EAAAC,EAAAC,EAAAC,GACA,UAAAF,EACA,OAAAD,EAAAE,EAIA,IAAA/2C,EAAAmB,OAAAM,SAAAd,EAAA1B,gBACA,UAAA4D,MAAA,0CAGA,IAAAo0C,EAAAt2C,EAAA1B,eAAAgD,QAAA,QAAsD+0C,GACtDE,EAAA,GAMA,OAJAv2C,EAAAxB,uBACA+3C,EAAA,wBAGAL,EAAA,YAAAI,EAAA,IAAAC,EAAA,IAAAH,EAAA,UAIAtyC,EAAA2tC,EAAAY,UAAAd,UAAA,gBAAAztC,EAAA9D,EAAAyxC,KAIA,IAAA+E,EAAA,8FACAC,EAAA,0GACAC,EAAA,sDACAC,EAAA,qGACAC,EAAA,gEACAC,EAAA,SAAA72C,GACA,aAEA,gBAAAi2C,EAAAa,EAAAhrB,EAAAirB,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EADArrB,IAAAxqB,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,0BAEA61C,EAAA,GACAb,EAAA,GACAc,EAAAP,GAAA,GACAQ,EAAAJ,GAAA,GAcA,MAZA,UAAA9xC,KAAA0mB,KACAA,IAAAxqB,QAAA,0BAGAtB,EAAAzC,oCAAA05C,IACAG,EAAAH,GAGAj3C,EAAAxB,uBACA+3C,EAAA,wBAGAc,EAAA,YAAAvrB,EAAA,IAAAyqB,EAAA,IAAAY,EAAA,OAAAC,EAAAE,IAGAC,EAAA,SAAAv3C,EAAAyxC,GACA,aAEA,gBAAAjwC,EAAA2J,EAAAzE,GACA,IAAA8wC,EAAA,UAWA,OAVArsC,KAAA,GACAzE,EAAArH,EAAAmD,UAAA,uBAAAnD,CAAAqH,EAAA1G,EAAAyxC,GAEAzxC,EAAAzB,cACAi5C,EAAAn4C,EAAAmB,OAAAiG,mBAAA+wC,EAAA9wC,GACAA,EAAArH,EAAAmB,OAAAiG,mBAAAC,IAEA8wC,GAAA9wC,EAGAyE,EAAA,YAAAqsC,EAAA,KAAA9wC,EAAA,SAIArH,EAAAmD,UAAA,qBAAAsB,EAAA9D,EAAAyxC,GACA,aAMA,OAFA3tC,GADAA,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAAo1C,EAAAG,EAAA72C,KACAsB,QAAAs1C,EAAAW,EAAAv3C,EAAAyxC,IACA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,+BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,OAAAzxC,EAAA1C,oBAIAwG,EAAA2tC,EAAAY,UAAAd,UAAA,6BAAAztC,EAAA9D,EAAAyxC,GAQA3tC,GALAA,EADA9D,EAAAzC,mCACAuG,EAAAxC,QAAAm1C,EAAAI,EAAA72C,IAEA8D,EAAAxC,QAAAk1C,EAAAK,EAAA72C,KAGAsB,QAAAq1C,EAAAY,EAAAv3C,EAAAyxC,IACA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,4BAAAztC,EAAA9D,EAAAyxC,IAZA3tC,IAoBAzE,EAAAmD,UAAA,sBAAAsB,EAAA9D,EAAAyxC,GACA,aAmBA,OAjBA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,oBAAAztC,EAAA9D,EAAAyxC,GAGA3tC,EAAAzE,EAAAmD,UAAA,cAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,UAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAEA3tC,EAAAzE,EAAAmD,UAAA,iBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,QAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,aAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,SAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAKA3tC,EAAAzE,EAAAmD,UAAA,iBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,aAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,uBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,qBAAAztC,EAAA9D,EAAAyxC,GAEA3tC,GAAA,OACA,IAAAyuC,EAAA,oCA8BA,OA5BAvyC,EAAAlB,2BACAyzC,EAAA,8BAGAzuC,IAAAxC,QAAAixC,EAAA,SAAAkF,GAqBA,OAdAA,GADAA,GAHAA,IAAAn2C,QAAA,wBAGAA,QAAA,WACAA,QAAA,iBAEAm2C,EAAAp4C,EAAAmD,UAAA,mBAAAnD,CAAAo4C,EAAAz3C,EAAAyxC,GAKAgG,GAFAA,GAFAA,EAAAp4C,EAAAmD,UAAA,aAAAnD,CAAAo4C,EAAAz3C,EAAAyxC,IAEAnwC,QAAA,mBAEAA,QAAA,sCAAAE,EAAAC,GACA,IAAAi2C,EAAAj2C,EAIA,OADAi2C,GADAA,IAAAp2C,QAAA,eACAA,QAAA,YAGAjC,EAAAmD,UAAA,YAAAnD,CAAA,iBAAAo4C,EAAA,kBAAAz3C,EAAAyxC,KAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,oBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,sBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,oBAAAztC,EAAA9D,EAAAyxC,GAyBA,OAFA3tC,GAnBAA,GAFAA,GAAA,MAEAxC,QADA,mEACA,SAAAE,EAAAC,EAAAs1C,GACA,IAAAY,EAAAl2C,EACAm2C,EAAAb,EACAnyC,EAAA,KAaA,OAZA+yC,EAAAt4C,EAAAmD,UAAA,UAAAnD,CAAAs4C,EAAA33C,EAAAyxC,GACAkG,EAAAt4C,EAAAmD,UAAA,aAAAnD,CAAAs4C,EAAA33C,EAAAyxC,GAIAkG,GAFAA,GADAA,EAAAt4C,EAAAmD,UAAA,QAAAnD,CAAAs4C,EAAA33C,EAAAyxC,IACAnwC,QAAA,aAEAA,QAAA,YAEAtB,EAAArD,0BACAiI,EAAA,IAGA+yC,EAAA,cAAAA,EAAA/yC,EAAA,gBACAvF,EAAAmD,UAAA,YAAAnD,CAAAs4C,EAAA33C,EAAAyxC,GAAAmG,KAGAt2C,QAAA,SACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,KA6BApyC,EAAAmD,UAAA,qBAAAsB,EAAA9D,EAAAyxC,GACA,aAoBA,YAhBA,KAFA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,MAGA3tC,EAAA,IAGAA,IAAAxC,QAAA,+CAAAE,EAAAC,EAAAs1C,EAAAC,GACA,IAAAhD,EAAAgD,EAQA,OALAhD,GAFAA,IAAA1yC,QAAA,kBAEAA,QAAA,eAGA0yC,EAAAvyC,EAAA,UADAuyC,EAAA30C,EAAAmD,UAAA,aAAAnD,CAAA20C,EAAAh0C,EAAAyxC,IACA,UACAuC,EAAA30C,EAAAmD,UAAA,gBAAAnD,CAAA20C,EAAAh0C,EAAAyxC,KAGA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,gCAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,IAAAzxC,EAAApB,qBACA,OAAAkF,EAGAA,EAAA2tC,EAAAY,UAAAd,UAAA,8BAAAztC,EAAA9D,EAAAyxC,GACA,IAAAoG,EAAA,OACAC,EAAA,oBACA/B,EAAA,GACAgC,EAAA,2BACAC,EAAA,GACAn5C,EAAA,GAWA,QAAAo5C,UATA,IAAAxG,EAAA5yC,SAAAiyC,OAAA+G,UACAC,EAAA,aAAArG,EAAA5yC,SAAAiyC,OAAA+G,QAAA,MAGA,UAFAA,EAAApG,EAAA5yC,SAAAiyC,OAAA+G,QAAAx0C,WAAAtC,gBAEA,UAAA82C,IACAE,EAAA,2BAIAtG,EAAA5yC,SAAAiyC,OACA,GAAAW,EAAA5yC,SAAAiyC,OAAA1xC,eAAA64C,GACA,OAAAA,EAAAl3C,eACA,cACA,MAEA,YACAg1C,EAAA,UAAAtE,EAAA5yC,SAAAiyC,OAAAiF,MAAA,aACA,MAEA,cAEAgC,EADA,SAAAF,GAAA,UAAAA,EACA,kBAAApG,EAAA5yC,SAAAiyC,OAAAiH,QAAA,OAEA,iCAAAtG,EAAA5yC,SAAAiyC,OAAAiH,QAAA,OAGA,MAEA,eACA,WACAC,EAAA,UAAAvG,EAAA5yC,SAAAiyC,OAAAmH,GAAA,IACAp5C,GAAA,eAAAo5C,EAAA,cAAAxG,EAAA5yC,SAAAiyC,OAAAmH,GAAA,OACA,MAEA,QACAp5C,GAAA,eAAAo5C,EAAA,cAAAxG,EAAA5yC,SAAAiyC,OAAAmH,GAAA,OAOA,OAFAn0C,EAAAg0C,EAAA,QAAAE,EAAA,cAAAjC,EAAAgC,EAAAl5C,EAAA,oBAAAiF,EAAA4vC,OAAA,qBACA5vC,EAAA2tC,EAAAY,UAAAd,UAAA,6BAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,iBAAAsB,EAAA9D,EAAAyxC,GACA,aAyBA,OAFA3tC,GAFAA,GAZAA,GAFAA,GAHAA,GAFAA,EAAA2tC,EAAAY,UAAAd,UAAA,eAAAztC,EAAA9D,EAAAyxC,IAEAnwC,QAAA,qBAGAA,QAAA,eAEAA,QAAA,sBAAAE,EAAAC,GAKA,IAJA,IAAAy2C,EAAAz2C,EACA02C,EAAA,EAAAD,EAAAv3C,OAAA,EAGAD,EAAA,EAAqBA,EAAAy3C,EAAez3C,IACpCw3C,GAAA,IAGA,OAAAA,KAGA52C,QAAA,eAEAA,QAAA,UACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,cAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,oBAAAsB,EAAA9D,EAAAyxC,GACA,aAKA,OAFA3tC,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAA,eACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,iBAAAztC,EAAA9D,EAAAyxC,KASApyC,EAAAmD,UAAA,iBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,IAAAzxC,EAAAtB,MACA,OAAAoF,EAaA,OARAA,GAFAA,EAAA2tC,EAAAY,UAAAd,UAAA,eAAAztC,EAAA9D,EAAAyxC,IAEAnwC,QADA,cACA,SAAA20C,EAAAmC,GACA,OAAA/4C,EAAAmB,OAAAkH,OAAAtI,eAAAg5C,GACA/4C,EAAAmB,OAAAkH,OAAA0wC,GAGAnC,IAEAnyC,EAAA2tC,EAAAY,UAAAd,UAAA,cAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,+BAAAsB,EAAA9D,EAAAyxC,GACA,aAaA,OAFA3tC,GAFAA,GAFAA,GAFAA,GAHAA,EAAA2tC,EAAAY,UAAAd,UAAA,6BAAAztC,EAAA9D,EAAAyxC,IAGAnwC,QAAA,qCAAyD,UAEzDA,QAAA,6BAEAA,QAAA,cAEAA,QAAA,aACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,4BAAAztC,EAAA9D,EAAAyxC,KAeApyC,EAAAmD,UAAA,kCAAAsB,EAAA9D,EAAAyxC,GACA,aAMA,OAFA3tC,GADAA,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,gCAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAA,UAAAjC,EAAAmB,OAAAe,2BACAD,QAAA,8BAAkCjC,EAAAmB,OAAAe,0BAClCuC,EAAA2tC,EAAAY,UAAAd,UAAA,+BAAAztC,EAAA9D,EAAAyxC,KASApyC,EAAAmD,UAAA,sBAAAsB,EAAA9D,EAAAyxC,GACA,aASA,OAJA3tC,GAHAA,EAAA2tC,EAAAY,UAAAd,UAAA,oBAAAztC,EAAA9D,EAAAyxC,IAGAnwC,QAAA,cACAA,QAAA,aAAwBA,QAAA,aACxBA,QAAA,qBAAoBjC,EAAAmB,OAAAe,0BACpBuC,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,KAQApyC,EAAAmD,UAAA,iDAAAsB,EAAA9D,EAAAyxC,GACA,aAaA,OAJA3tC,GAHAA,GAJAA,EAAA2tC,EAAAY,UAAAd,UAAA,+CAAAztC,EAAA9D,EAAAyxC,IAIAnwC,QAFA,uCAEA,SAAAE,GACA,OAAAA,EAAAF,QAAA,4BAAAA,QAAA,gBAAAjC,EAAAmB,OAAAe,6BAEAD,QAJA,gDAIA,SAAAE,GACA,OAAAA,EAAAF,QAAA,gBAAAjC,EAAAmB,OAAAe,4BAEAuC,EAAA2tC,EAAAY,UAAAd,UAAA,8CAAAztC,EAAA9D,EAAAyxC,KAcApyC,EAAAmD,UAAA,4BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,OAAAzxC,EAAAnC,cAIAiG,EAAA2tC,EAAAY,UAAAd,UAAA,0BAAAztC,EAAA9D,EAAAyxC,GAsBA3tC,GApBAA,GADAA,GAAA,MACAxC,QAAA,2EAA6F,SAAAE,EAAA62C,EAAA1E,EAAAgE,GAC7F,IAAA/yC,EAAA5E,EAAArD,wBAAA,QAaA,OAXAg7C,EAAAt4C,EAAAmD,UAAA,aAAAnD,CAAAs4C,EAAA33C,EAAAyxC,GAMAkG,EAAA,cAAAhE,EAAA,WAAAA,EAAA,aAAAA,EAAA,aAFAgE,GAFAA,GADAA,EAAAt4C,EAAAmD,UAAA,QAAAnD,CAAAs4C,EAAA33C,EAAAyxC,IACAnwC,QAAA,aAEAA,QAAA,aAEAsD,EAAA,gBACA+yC,EAAAt4C,EAAAmD,UAAA,YAAAnD,CAAAs4C,EAAA33C,EAAAyxC,GAIA,UAAAA,EAAA5zC,aAAA2H,KAAA,CACA1B,KAAAtC,EACAm2C,cACO,cAGPr2C,QAAA,SACAmwC,EAAAY,UAAAd,UAAA,yBAAAztC,EAAA9D,EAAAyxC,IA1BA3tC,IA4BAzE,EAAAmD,UAAA,qBAAAsB,EAAA9D,EAAAyxC,GACA,aAMA,OAHA3tC,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAA,mBACAwC,EAAA,UAAA2tC,EAAAI,YAAArsC,KAAA1B,GAAA,WACAA,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,wBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,sBAAAztC,EAAA9D,EAAAyxC,GAUA,OAFA3tC,EAAAzE,EAAAmB,OAAAqF,uBAAA/B,EANA,SAAAtC,EAAA+D,EAAAjB,EAAAC,GACA,IAAAozC,EAAArzC,EAAAjF,EAAAmD,UAAA,aAAAnD,CAAAkG,EAAAvF,EAAAyxC,GAAAltC,EACA,YAAAktC,EAAAM,WAAAvsC,KAAAmyC,GAAA,QAIA,kCACA7zC,EAAA2tC,EAAAY,UAAAd,UAAA,qBAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,uBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,gBAAAjwC,EAAAC,GACA,IAAA62C,EAAA72C,EAQA,OAHA62C,GAFAA,GADAA,IAAAh3C,QAAA,eACAA,QAAA,WAEAA,QAAA,YAEAg3C,EAAA,UAAA7G,EAAAI,YAAArsC,KAAA8yC,GAAA,cAIAj5C,EAAAmD,UAAA,0BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,wBAAAztC,EAAA9D,EAAAyxC,GAEA,IAAA8G,EAAA,oQACAC,EAAA,SAAAh3C,EAAA+D,EAAAjB,EAAAC,GACA,IAAAJ,EAAA3C,EAOA,OAJA,IAAA8C,EAAAiC,OAAA,kBACApC,EAAAG,EAAAmtC,EAAAY,UAAAT,SAAArsC,GAAAhB,GAGA,UAAAktC,EAAAI,YAAArsC,KAAArB,GAAA,YAGAnE,EAAAvB,2BAEAqF,IAAAxC,QAAA,4BAAA20C,EAAAwC,GACA,aAAoBA,EAAA,UAKpB,QAAA/3C,EAAA,EAAmBA,EAAA63C,EAAA53C,SAAsBD,EAMzC,IALA,IAAAg4C,EACAC,EAAA,IAAAt3C,OAAA,YAAoCk3C,EAAA73C,GAAA,mBACpCk4C,EAAA,IAAAL,EAAA73C,GAAA,YACAm4C,EAAA,KAAAN,EAAA73C,GAAA,KAEA,KAAAg4C,EAAAr5C,EAAAmB,OAAA4F,aAAAtC,EAAA60C,KAAA,CAGA,IAAAG,EAAAz5C,EAAAmB,OAAAgG,aAAA1C,EAAA40C,GAEAK,EAAA15C,EAAAmB,OAAAqF,uBAAAizC,EAAA,GAAAN,EAAAI,EAAAC,EAAA,MAEA,GAAAE,IAAAD,EAAA,GACA,MAGAh1C,EAAAg1C,EAAA,GAAAE,OAAAD,GAaA,OARAj1C,IAAAxC,QAAA,oDAAuEjC,EAAAmD,UAAA,cAAAnD,CAAAyE,EAAA9D,EAAAyxC,IAMvE3tC,GAJAA,EAAAzE,EAAAmB,OAAAqF,uBAAA/B,EAAA,SAAAK,GACA,gBAAAstC,EAAAI,YAAArsC,KAAArB,GAAA,YACK,iBAAU,gBAEf7C,QAAA,yDAA4EjC,EAAAmD,UAAA,cAAAnD,CAAAyE,EAAA9D,EAAAyxC,IAC5E3tC,EAAA2tC,EAAAY,UAAAd,UAAA,uBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,yBAAAsB,EAAA9D,EAAAyxC,GACA,aAIA,SAAAwH,EAAAC,GACA,YAAAzH,EAAAM,WAAAvsC,KAAA0zC,GAAA,OAsBA,OANAp1C,GAJAA,GAJAA,GAJAA,GAPAA,EAAA2tC,EAAAY,UAAAd,UAAA,uBAAAztC,EAAA9D,EAAAyxC,IAOAnwC,QAAA,wBAAA20C,GACA,OAAAgD,EAAAhD,MAGA30C,QAAA,qCAAA20C,GACA,OAAAgD,EAAAhD,MAGA30C,QAAA,6CAAA20C,GACA,OAAAgD,EAAAhD,MAGA30C,QAAA,sBAAA20C,GACA,OAAAgD,EAAAhD,KAIAnyC,EAAA2tC,EAAAY,UAAAd,UAAA,sBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,2BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,yBAAAztC,EAAA9D,EAAAyxC,GAEA,QAAA/wC,EAAA,EAAmBA,EAAA+wC,EAAAM,WAAApxC,SAA+BD,EAAA,CAKlD,IAJA,IAAAy4C,EAAA1H,EAAAM,WAAArxC,GAEA04C,EAAA,EAEA,WAAAh0C,KAAA+zC,IAAA,CACA,IAAAE,EAAAh4C,OAAAi4C,GAGA,GAFAH,IAAA73C,QAAA,KAAA+3C,EAAA,IAAA5H,EAAAM,WAAAsH,IAEA,KAAAD,EAAA,CACAp2C,QAAAzC,MAAA,0CACA,QAGA64C,EAGAt1C,IAAAxC,QAAA,KAAAZ,EAAA,IAAAy4C,GAIA,OADAr1C,EAAA2tC,EAAAY,UAAAd,UAAA,wBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,2BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,yBAAAztC,EAAA9D,EAAAyxC,GAcA,OAFA3tC,EAAAzE,EAAAmB,OAAAqF,uBAAA/B,EAVA,SAAAtC,EAAA+D,EAAAjB,EAAAC,GAEA,IAAAozC,EAAArzC,EAAAjF,EAAAmD,UAAA,aAAAnD,CAAAkG,EAAAvF,EAAAyxC,GAAAltC,EACA,gBAAAktC,EAAA5zC,aAAA2H,KAAA,CACA1B,KAAAtC,EACAm2C,cACO,YAIP,yCAAyE,2BAA0C,OACnH7zC,EAAA2tC,EAAAY,UAAAd,UAAA,wBAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,mBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,iBAAAztC,EAAA9D,EAAAyxC,GACA,IAAAr0C,EAAAm8C,MAAAC,SAAAx5C,EAAA5C,mBAAA,EAAAo8C,SAAAx5C,EAAA5C,kBAQAq8C,EAAAz5C,EAAAjC,kBAAA,gCAAmE,6BACnE27C,EAAA15C,EAAAjC,kBAAA,gCAAuE,6BAQvE+F,GAPAA,IAAAxC,QAAAm4C,EAAA,SAAAj4C,EAAAC,GACA,IAAAk4C,EAAAt6C,EAAAmD,UAAA,YAAAnD,CAAAoC,EAAAzB,EAAAyxC,GACAmI,EAAA55C,EAAAjD,WAAA,WAAA88C,EAAAp4C,GAAA,IAEAq4C,EAAA,KADA18C,EACAw8C,EAAA,IAAAD,EAAA,MADAv8C,EACA,IACA,OAAAiC,EAAAmD,UAAA,YAAAnD,CAAAy6C,EAAA95C,EAAAyxC,MAEAnwC,QAAAo4C,EAAA,SAAAK,EAAAt4C,GACA,IAAAk4C,EAAAt6C,EAAAmD,UAAA,YAAAnD,CAAAoC,EAAAzB,EAAAyxC,GACAmI,EAAA55C,EAAAjD,WAAA,WAAA88C,EAAAp4C,GAAA,IACAu4C,EAAA58C,EAAA,EACA08C,EAAA,KAAAE,EAAAJ,EAAA,IAAAD,EAAA,MAAAK,EAAA,IACA,OAAA36C,EAAAmD,UAAA,YAAAnD,CAAAy6C,EAAA95C,EAAAyxC,KASA,IAAAwI,EAAAj6C,EAAA5B,8BAAA,oCAAoE,oCAepE,SAAAy7C,EAAAn1C,GACA,IAAAqxC,EAAAmE,EAEA,GAAAl6C,EAAAm6C,mBAAA,CACA,IAAA50C,EAAAb,EAAAa,MAAA,mBAEAA,KAAA,KACAb,EAAAa,EAAA,IAyCA,OArCAwwC,EAAArxC,EAGAw1C,EADA76C,EAAAmB,OAAAM,SAAAd,EAAAhD,gBACAgD,EAAAhD,gBACO,IAAAgD,EAAAhD,eACP,WAEA,GAGAgD,EAAA/C,oBACA84C,EAAAmE,EAAAnE,GAIAA,EADA/1C,EAAA9C,qBACA64C,EAAAz0C,QAAA,UACAA,QAAA,SAAuB,IAAAA,QAAA,UAAAA,QAAA,UAEvBA,QAAA,yCAAkC,IAAAP,cAC3Bf,EAAA7C,YACP44C,EAAAz0C,QAAA,UACAA,QAAA,SAAuB,KAAAA,QAAA,WAAAA,QAAA,WACvBA,QAAA,aAAAP,cAEAg1C,EAAAz0C,QAAA,aAAAP,cAGAf,EAAA/C,oBACA84C,EAAAmE,EAAAnE,GAGAtE,EAAAW,eAAA2D,GACAA,IAAA,IAAAtE,EAAAW,eAAA2D,KAEAtE,EAAAW,eAAA2D,GAAA,EAGAA,EAIA,OAlEAjyC,IAAAxC,QAAA24C,EAAA,SAAAz4C,EAAAC,EAAAs1C,GACA,IAAAqD,EAAArD,EAEA/2C,EAAAm6C,qBACAC,EAAArD,EAAAz1C,QAAA,qBAA0C,KAG1C,IAAA+4C,EAAAh7C,EAAAmD,UAAA,YAAAnD,CAAA+6C,EAAAp6C,EAAAyxC,GACAmI,EAAA55C,EAAAjD,WAAA,WAAA88C,EAAA9C,GAAA,IACAiD,EAAA58C,EAAA,EAAAqE,EAAAd,OACA25C,EAAA,KAAAN,EAAAJ,EAAA,IAAAS,EAAA,MAAAL,EAAA,IACA,OAAA36C,EAAAmD,UAAA,YAAAnD,CAAAi7C,EAAAt6C,EAAAyxC,KAsDA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,gBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,0BAAAsB,EAAA9D,EAAAyxC,GACA,aAEA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,wBAAAztC,EAAA9D,EAAAyxC,GACA,IAAA7vC,EAAAvC,EAAAmD,UAAA,YAAAnD,CAAA,SAAAW,EAAAyxC,GAKA,OAFA3tC,GADAA,GADAA,IAAAxC,QAAA,4BAAyCM,IACzCN,QAAA,6BAA0CM,IAC1CN,QAAA,4BAAyCM,GACzCkC,EAAA2tC,EAAAY,UAAAd,UAAA,uBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,kBAAAsB,EAAA9D,EAAAyxC,GACA,aAcA,SAAA8I,EAAA/4C,EAAAg5C,EAAA7E,EAAAC,EAAA6E,EAAAC,EAAA7E,EAAAE,GACA,IAAA/D,EAAAP,EAAAO,MACAC,EAAAR,EAAAQ,QACA0I,EAAAlJ,EAAAS,YAQA,GAPAyD,IAAA50C,cAEAg1C,IACAA,EAAA,IAIAv0C,EAAA+E,OAAA,mCACAqvC,EAAA,QACO,QAAAA,GAAA,OAAAA,EAAA,CAQP,GAPA,KAAAD,GAAA,OAAAA,IAEAA,EAAA6E,EAAAz5C,cAAAO,QAAA,cAGAs0C,EAAA,IAAAD,EAEAt2C,EAAAmB,OAAAQ,YAAAgxC,EAAA2D,IAYA,OAAAn0C,EAXAo0C,EAAA5D,EAAA2D,GAEAt2C,EAAAmB,OAAAQ,YAAAixC,EAAA0D,MACAI,EAAA9D,EAAA0D,IAGAt2C,EAAAmB,OAAAQ,YAAA25C,EAAAhF,MACA8E,EAAAE,EAAAhF,GAAA8E,MACAC,EAAAC,EAAAhF,GAAA+E,QAOAF,IAAAl5C,QAAA,eACAA,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,0BAGA,IAAAy0C,EAAA,cADAJ,IAAAt0C,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,2BACA,UAAAi5C,EAAA,IAgBA,OAdAzE,GAAA12C,EAAAmB,OAAAM,SAAAi1C,KAGAC,GAAA,YAFAD,IAAAz0C,QAAA,eACAA,QAAAjC,EAAAmB,OAAAgH,QAAAC,qBAAApI,EAAAmB,OAAAe,2BACA,KAGAk5C,GAAAC,IAGA1E,GAAA,YAFAyE,EAAA,MAAAA,EAAA,OAAAA,GAEA,IACAzE,GAAA,aAFA0E,EAAA,MAAAA,EAAA,OAAAA,GAEA,KAGA1E,GAAA,MAgBA,OAFAlyC,GAFAA,GAFAA,GAFAA,GAHAA,GAzEAA,EAAA2tC,EAAAY,UAAAd,UAAA,gBAAAztC,EAAA9D,EAAAyxC,IAyEAnwC,QArEA,mDAqEAi5C,IAGAj5C,QAzEA,sKAIA,SAAAE,EAAAg5C,EAAA7E,EAAAC,EAAA6E,EAAAC,EAAA7E,EAAAE,GAEA,OAAAwE,EAAA/4C,EAAAg5C,EAAA7E,EADAC,IAAAt0C,QAAA,UACAm5C,EAAAC,EAAA7E,EAAAE,MAqEAz0C,QA5EA,qIA4EAi5C,IAEAj5C,QA/EA,yJA+EAi5C,IAEAj5C,QA7EA,4BA6EAi5C,GACAz2C,EAAA2tC,EAAAY,UAAAd,UAAA,eAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,0BAAAsB,EAAA9D,EAAAyxC,GACA,aAMA,SAAAmJ,EAAAz2C,EAAAG,EAAAC,GAMA,OAAAD,EAAAH,EAAAI,EAoDA,OA9DAT,EAAA2tC,EAAAY,UAAAd,UAAA,wBAAAztC,EAAA9D,EAAAyxC,GAqBA3tC,EAPA9D,EAAAxC,2BAIAsG,GAHAA,IAAAxC,QAAA,mCAAA20C,EAAA9xC,GACA,OAAAy2C,EAAAz2C,EAAA,oCAEA7C,QAAA,iCAAA20C,EAAA9xC,GACA,OAAAy2C,EAAAz2C,EAAA,2BAEA7C,QAAA,+BAAA20C,EAAA9xC,GACA,OAAAy2C,EAAAz2C,EAAA,mBAMAL,GAHAA,IAAAxC,QAAA,+BAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,iCAAAuxC,KAEA30C,QAAA,6BAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,wBAAAuxC,KAEA30C,QAAA,+BAAA20C,EAAAvxC,GAEA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,gBAAAuxC,IAYAnyC,EAPA9D,EAAAvC,yBAIAqG,GAHAA,IAAAxC,QAAA,uDAAA20C,EAAA4E,EAAA12C,GACA,OAAAy2C,EAAAz2C,EAAA02C,EAAA,oCAEAv5C,QAAA,mDAAA20C,EAAA4E,EAAA12C,GACA,OAAAy2C,EAAAz2C,EAAA02C,EAAA,2BAEAv5C,QAAA,+CAAA20C,EAAA4E,EAAA12C,GACA,OAAAy2C,EAAAz2C,EAAA02C,EAAA,mBAMA/2C,GAHAA,IAAAxC,QAAA,qCAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,iCAAAuxC,KAEA30C,QAAA,iCAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,wBAAAuxC,KAEA30C,QAAA,iCAAA20C,EAAAvxC,GAEA,YAAAU,KAAAV,GAAAk2C,EAAAl2C,EAAA,gBAAAuxC,IAIAnyC,EAAA2tC,EAAAY,UAAAd,UAAA,uBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,iBAAAsB,EAAA9D,EAAAyxC,GACA,aASA,SAAAqJ,EAAAC,EAAAC,GAqBAvJ,EAAAU,aAEA4I,IAAAz5C,QAAA,UAAuC,MAGvC,IAAAixC,EAAA,mHACA0I,EAAA,mBAAA71C,KAFA21C,GAAA,MA4EA,OAtEA/6C,EAAA9B,uCACAq0C,EAAA,gHA8DAwI,GA3DAA,IAAAz5C,QAAAixC,EAAA,SAAA/wC,EAAAC,EAAAs1C,EAAAC,EAAAkE,EAAAC,EAAAC,GACAA,KAAA,KAAAA,EAAA1H,OACA,IAAA2H,EAAAh8C,EAAAmD,UAAA,UAAAnD,CAAA67C,EAAAl7C,EAAAyxC,GACA6J,EAAA,GAqDA,OAnDAH,GAAAn7C,EAAAlC,YACAw9C,EAAA,yDACAD,IAAA/5C,QAAA,iCACA,IAAAi6C,EAAA,oGAOA,OALAH,IACAG,GAAA,YAGAA,GAAA,OAaAF,IAAA/5C,QAAA,wCAAAk6C,GACA,WAAAA,IAKA/5C,GAAA45C,EAAA90C,OAAA,WAAqC,GACrC80C,EAAAh8C,EAAAmD,UAAA,mBAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,GACA4J,EAAAh8C,EAAAmD,UAAA,aAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,KAIA4J,GADAA,EAAAh8C,EAAAmD,UAAA,QAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,IACAnwC,QAAA,UAIA+5C,GAFAA,EAAAh8C,EAAAmD,UAAA,iBAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,IAEAnwC,QAAA,iBAGA+5C,EADAJ,EACA57C,EAAAmD,UAAA,aAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,GAEApyC,EAAAmD,UAAA,YAAAnD,CAAAg8C,EAAAr7C,EAAAyxC,IAOA4J,EAAA,MAAAC,EAAA,KAFAD,IAAA/5C,QAAA,UAEA,aAIAA,QAAA,UACAmwC,EAAAU,aAEA6I,IACAD,IAAAz5C,QAAA,YAGAy5C,EAGA,SAAAU,EAAAC,EAAAC,GAEA,UAAAA,EAAA,CACA,IAAAC,EAAAF,EAAAn2C,MAAA,cAEA,GAAAq2C,GAAA,MAAAA,EAAA,GACA,iBAAAA,EAAA,OAIA,SAWA,SAAAC,EAAAH,EAAAC,EAAAX,GAGA,IAAAc,EAAA97C,EAAA9B,qCAAA,wCACA69C,EAAA/7C,EAAA9B,qCAAA,wCACA89C,EAAA,OAAAL,EAAAG,EAAAC,EACA/F,EAAA,GAEA,QAAA0F,EAAAn1C,OAAAy1C,IACA,SAAAC,EAAA93C,GACA,IAAAe,EAAAf,EAAAoC,OAAAy1C,GACAE,EAAAT,EAAAC,EAAAC,IAEA,IAAAz2C,GAEA8wC,GAAA,QAAA2F,EAAAO,EAAA,MAAApB,EAAA32C,EAAAyB,MAAA,EAAAV,KAAA81C,GAAA,KAAAW,EAAA,MAGAK,EAAA,QADAL,EAAA,OAAAA,EAAA,WACAG,EAAAC,EAEAE,EAAA93C,EAAAyB,MAAAV,KAEA8wC,GAAA,QAAA2F,EAAAO,EAAA,MAAApB,EAAA32C,IAAA62C,GAAA,KAAAW,EAAA,MAbA,CAeSD,OACF,CACP,IAAAQ,EAAAT,EAAAC,EAAAC,GACA3F,EAAA,QAAA2F,EAAAO,EAAA,MAAApB,EAAAY,IAAAV,GAAA,KAAAW,EAAA,MAGA,OAAA3F,EAyBA,OApBAlyC,EAAA2tC,EAAAY,UAAAd,UAAA,eAAAztC,EAAA9D,EAAAyxC,GAGA3tC,GAAA,KAeAA,GAZAA,EADA2tC,EAAAU,WACAruC,EAAAxC,QAAA,4FAA0E,SAAAE,EAAAk6C,EAAA3E,GAE1E,OAAA8E,EAAAH,EADA3E,EAAAxwC,OAAA,wBACA,KAGAzC,EAAAxC,QAAA,sGAAoF,SAAAE,EAAAC,EAAAi6C,EAAA1E,GAEpF,OAAA6E,EAAAH,EADA1E,EAAAzwC,OAAA,wBACA,MAKAjF,QAAA,SACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,cAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,oBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,IAAAzxC,EAAAnB,SACA,OAAAiF,EAKA,SAAAq4C,EAAA1I,GAEAhC,EAAA5yC,SAAAkyC,IAAA0C,GAMAA,GAHAA,IACAnyC,QAAA,cACAA,QAAA,gBACAA,QAAA,UAAuC,MACvCA,QAAA,qCAAA20C,EAAAr0C,EAAAC,GAEA,OADA4vC,EAAA5yC,SAAAiyC,OAAAlvC,GAAAC,EACA,KAkBA,OAFAiC,GARAA,GAJAA,GAjBAA,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,IAiBAnwC,QAAA,8CAAA86C,EAAApL,EAAAyC,GAEA,OADA0I,EAAA1I,GACA,QAEAnyC,QAAA,8CAAA86C,EAAApL,EAAAyC,GAMA,OALAzC,IACAS,EAAA5yC,SAAAmyC,UAGAmL,EAAA1I,GACA,QAEAnyC,QAAA,UACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,iBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,mBAAAsB,EAAA9D,EAAAyxC,GACA,aAUA,OAFA3tC,GAHAA,GAHAA,EAAA2tC,EAAAY,UAAAd,UAAA,iBAAAztC,EAAA9D,EAAAyxC,IAGAnwC,QAAA,mBAAsC,OAGtCA,QAAA,UACAwC,EAAA2tC,EAAAY,UAAAd,UAAA,gBAAAztC,EAAA9D,EAAAyxC,KAOApyC,EAAAmD,UAAA,sBAAAsB,EAAA9D,EAAAyxC,GACA,aAUA,IAJA,IAAA4K,GADAv4C,GADAA,GAFAA,EAAA2tC,EAAAY,UAAAd,UAAA,oBAAAztC,EAAA9D,EAAAyxC,IAEAnwC,QAAA,aACAA,QAAA,aACAyyC,MAAA,WACAuI,EAAA,GACA13C,EAAAy3C,EAAA17C,OAEAD,EAAA,EAAmBA,EAAAkE,EAASlE,IAAA,CAC5B,IAAA2D,EAAAg4C,EAAA37C,GAEA2D,EAAAkC,OAAA,qBACA+1C,EAAA92C,KAAAnB,GAEOA,EAAAkC,OAAA,WAEPlC,GADAA,EAAAhF,EAAAmD,UAAA,YAAAnD,CAAAgF,EAAArE,EAAAyxC,IACAnwC,QAAA,oBACA+C,GAAA,OACAi4C,EAAA92C,KAAAnB,IAQA,IAFAO,EAAA03C,EAAA37C,OAEAD,EAAA,EAAeA,EAAAkE,EAASlE,IAAA,CAMxB,IALA,IAAA43C,EAAA,GACAiE,EAAAD,EAAA57C,GACA87C,GAAA,EAGA,gBAAAp3C,KAAAm3C,IAAA,CACA,IAAAlE,EAAAh3C,OAAAi4C,GACAD,EAAAh4C,OAAAo7C,GAcAnE,GAXAA,EADA,MAAAD,EACA5G,EAAAI,YAAAwH,GAGAmD,EAEAn9C,EAAAmD,UAAA,aAAAnD,CAAAoyC,EAAA5zC,aAAAw7C,GAAAv1C,KAAA9D,EAAAyxC,GAEAA,EAAA5zC,aAAAw7C,GAAA1B,WAIAr2C,QAAA,cAEAi7C,IAAAj7C,QAAA,4BAAAg3C,GAEA,gCAAAlzC,KAAAm3C,KACAC,GAAA,GAIAF,EAAA57C,GAAA67C,EAOA,OADAz4C,GADAA,GAFAA,EAAAw4C,EAAAn2C,KAAA,OAEA7E,QAAA,aACAA,QAAA,YACAmwC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,KAMApyC,EAAAmD,UAAA,wBAAA3B,EAAAiD,EAAA9D,EAAAyxC,GACA,aAEA,GAAA5wC,EAAAK,OACA4C,EAAAjD,EAAAK,OAAA4C,EAAA2tC,EAAAY,UAAAryC,QACK,GAAAa,EAAAM,MAAA,CAEL,IAAAu7C,EAAA77C,EAAAM,MAEAu7C,aAAAr7C,SACAq7C,EAAA,IAAAr7C,OAAAq7C,EAAA,MAGA54C,IAAAxC,QAAAo7C,EAAA77C,EAAAS,SAGA,OAAAwC,IAOAzE,EAAAmD,UAAA,qBAAAsB,EAAA9D,EAAAyxC,GACA,aAqCA,OAnCA3tC,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,YAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,wCAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,yBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAGA3tC,EAAAzE,EAAAmD,UAAA,SAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,UAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAIA3tC,EAAAzE,EAAAmD,UAAA,YAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,sBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,QAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,YAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,iBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,gBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GACA3tC,EAAAzE,EAAAmD,UAAA,WAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAEA3tC,EAAAzE,EAAAmD,UAAA,gBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAEA3tC,EAAAzE,EAAAmD,UAAA,sBAAAnD,CAAAyE,EAAA9D,EAAAyxC,GAEAzxC,EAAA7B,iBAGA,SAAAiH,KAAAtB,KACAA,IAAAxC,QAAA,oBAIAwC,IAAAxC,QAAA,qBAGAwC,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,yBAAAsB,EAAA9D,EAAAyxC,GACA,aAkBA,OARAzxC,EAAAtC,gBAEAoG,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,uBAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAA,8BAAqD,SAAA20C,EAAA9xC,GACrD,OAXA,SAAAA,GAKA,OAJAnE,EAAA1C,qBACA6G,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAA8E,EAAAnE,EAAAyxC,IAGA,QAAAttC,EAAA,SAMAy2C,CAAAz2C,KAEAL,EAAA2tC,EAAAY,UAAAd,UAAA,sBAAAztC,EAAA9D,EAAAyxC,IAGA3tC,IAQAzE,EAAAmD,UAAA,gCAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,IAKAkL,EAAA,SAAAn7C,EAAAm0C,EAAAC,EAAA6E,EAAAC,EAAAkC,EAAA7G,GAUA,OATAJ,IAAA50C,cAEA60C,EAAArwC,MAAA,0BAEAksC,EAAAO,MAAA2D,GAAAC,EAAAt0C,QAAA,UAEAmwC,EAAAO,MAAA2D,GAAAt2C,EAAAmD,UAAA,sBAAAnD,CAAAu2C,EAAA51C,EAAAyxC,GAGAmL,EAGAA,EAAA7G,GAEAA,IACAtE,EAAAQ,QAAA0D,GAAAI,EAAAz0C,QAAA,kBAGAtB,EAAA3C,oBAAAo9C,GAAAC,IACAjJ,EAAAS,YAAAyD,GAAA,CACA8E,QACAC,WAMA,KAQA,OADA52C,GAFAA,GADAA,GAlCAA,GAAA,MAkCAxC,QApCA,6MAoCAq7C,IACAr7C,QAtCA,kKAsCAq7C,IAEAr7C,QAAA,WAGAjC,EAAAmD,UAAA,kBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,IAAAzxC,EAAArC,OACA,OAAAmG,EA+BA,SAAA+4C,EAAAC,EAAAZ,GAEA,YAAAA,EAAA,IADA78C,EAAAmD,UAAA,YAAAnD,CAAAy9C,EAAA98C,EAAAyxC,GACA,UA2BA,SAAAsL,EAAAC,GACA,IAAAt8C,EACAu8C,EAAAD,EAAAjJ,MAAA,MAEA,IAAArzC,EAAA,EAAiBA,EAAAu8C,EAAAt8C,SAAuBD,EAExC,YAAoB0E,KAAA63C,EAAAv8C,MACpBu8C,EAAAv8C,GAAAu8C,EAAAv8C,GAAAY,QAAA,YAAwD,KAGxD,YAAA8D,KAAA63C,EAAAv8C,MACAu8C,EAAAv8C,GAAAu8C,EAAAv8C,GAAAY,QAAA,iBAIA27C,EAAAv8C,GAAArB,EAAAmD,UAAA,YAAAnD,CAAA49C,EAAAv8C,GAAAV,EAAAyxC,GAGA,IAvEAyL,EAYA5C,EAAA4B,EACAzzB,EA0DA00B,EAAAF,EAAA,GAAAlJ,MAAA,KAAAqJ,IAAA,SAAAx5C,GACA,OAAAA,EAAA8vC,SAEA2J,EAAAJ,EAAA,GAAAlJ,MAAA,KAAAqJ,IAAA,SAAAx5C,GACA,OAAAA,EAAA8vC,SAEA4J,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAIA,IAHAR,EAAAS,QACAT,EAAAS,QAEAh9C,EAAA,EAAiBA,EAAAu8C,EAAAt8C,SAAuBD,EACxC,KAAAu8C,EAAAv8C,GAAAgzC,QAIA4J,EAAA93C,KAAAy3C,EAAAv8C,GAAAqzC,MAAA,KAAAqJ,IAAA,SAAAx5C,GACA,OAAAA,EAAA8vC,UAIA,GAAAyJ,EAAAx8C,OAAA08C,EAAA18C,OACA,OAAAq8C,EAGA,IAAAt8C,EAAA,EAAiBA,EAAA28C,EAAA18C,SAAsBD,EACvC88C,EAAAh4C,MAnGA03C,EAmGAG,EAAA38C,GAlGA,eAAA0E,KAAA83C,GACA,4BACO,qBAAA93C,KAAA83C,GACP,6BACO,sBAAA93C,KAAA83C,GACP,8BAEA,KA8FA,IAAAx8C,EAAA,EAAiBA,EAAAy8C,EAAAx8C,SAAuBD,EACxCrB,EAAAmB,OAAAQ,YAAAw8C,EAAA98C,MACA88C,EAAA98C,GAAA,IAGA68C,EAAA/3C,MA/FA80C,EA+FA6C,EAAAz8C,GA/FAw7C,EA+FAsB,EAAA98C,GA9FA+nB,WAAA,GACA6xB,IAAA5G,QAEA1zC,EAAApC,gBAAAoC,EAAA29C,iBACAl1B,EAAA,QAAA6xB,EAAAh5C,QAAA,UAAAP,cAAA,KAIA,MAAA0nB,EAAAyzB,EAAA,KADA5B,EAAAj7C,EAAAmD,UAAA,YAAAnD,CAAAi7C,EAAAt6C,EAAAyxC,IACA,YAyFA,IAAA/wC,EAAA,EAAiBA,EAAA48C,EAAA38C,SAAqBD,EAAA,CAGtC,IAFA,IAAAk9C,EAAA,GAEAC,EAAA,EAAwBA,EAAAN,EAAA58C,SAAqBk9C,EAC7Cx+C,EAAAmB,OAAAQ,YAAAs8C,EAAA58C,GAAAm9C,IAEAD,EAAAp4C,KAAAq3C,EAAAS,EAAA58C,GAAAm9C,GAAAL,EAAAK,KAGAJ,EAAAj4C,KAAAo4C,GAGA,OA7FA,SAAAL,EAAAE,GAIA,IAHA,IAAAK,EAAA,2BACAC,EAAAR,EAAA58C,OAEAD,EAAA,EAAqBA,EAAAq9C,IAAYr9C,EACjCo9C,GAAAP,EAAA78C,GAKA,IAFAo9C,GAAA,6BAEAp9C,EAAA,EAAiBA,EAAA+8C,EAAA98C,SAAkBD,EAAA,CACnCo9C,GAAA,SAEA,QAAAD,EAAA,EAAwBA,EAAAE,IAAaF,EACrCC,GAAAL,EAAA/8C,GAAAm9C,GAGAC,GAAA,UAIA,OADAA,GAAA,uBAyEAE,CAAAT,EAAAE,GAWA,OAFA35C,GAFAA,GAFAA,GAFAA,EAAA2tC,EAAAY,UAAAd,UAAA,gBAAAztC,EAAA9D,EAAAyxC,IAEAnwC,QAAA,UAAAjC,EAAAmB,OAAAe,2BAEAD,QArIA,uHAqIAy7C,IAEAz7C,QArIA,oHAqIAy7C,GACAj5C,EAAA2tC,EAAAY,UAAAd,UAAA,eAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,qBAAAsB,EAAA9D,EAAAyxC,GACA,aAEA,OAAAzxC,EAAArB,WAIAmF,EAAA2tC,EAAAY,UAAAd,UAAA,mBAAAztC,EAAA9D,EAAAyxC,GAmBA3tC,GAbAA,EAJA9D,EAAAxC,2BACAsG,IAAAxC,QAAA,mCAAA20C,EAAA9xC,GACA,YAAAA,EAAA,UAEA7C,QAAA,iCAAA20C,EAAA9xC,GACA,YAAAA,EAAA,UAGAL,IAAAxC,QAAA,+BAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAA,MAAAA,EAAA,OAAAuxC,KAEA30C,QAAA,6BAAA20C,EAAAvxC,GACA,YAAAU,KAAAV,GAAA,MAAAA,EAAA,OAAAuxC,KAKA30C,QAAA,OAAAjC,EAAAmB,OAAAe,0BACAuC,EAAA2tC,EAAAY,UAAAd,UAAA,kBAAAztC,EAAA9D,EAAAyxC,IAvBA3tC,IA8BAzE,EAAAmD,UAAA,gCAAAsB,EAAA9D,EAAAyxC,GACA,aAQA,OALA3tC,GADAA,EAAA2tC,EAAAY,UAAAd,UAAA,8BAAAztC,EAAA9D,EAAAyxC,IACAnwC,QAAA,qBAAAE,EAAAC,GACA,IAAAw8C,EAAAzE,SAAA/3C,GACA,OAAA0B,OAAA+6C,aAAAD,KAEAn6C,EAAA2tC,EAAAY,UAAAd,UAAA,6BAAAztC,EAAA9D,EAAAyxC,KAGApyC,EAAAmD,UAAA,mCAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAIA,IAHA,IAAAC,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EAAA,CACzC,IAAA49C,EAAAj/C,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAEA,KAAA6M,IAIAn6C,GAAAm6C,GAOA,OADAn6C,EAAA,MADAA,IAAAuvC,QACAK,MAAA,MAAA5tC,KAAA,UAGA9G,EAAAmD,UAAA,kCAAA8xC,EAAA7C,GACA,aAEA,IAAAuG,EAAA1D,EAAAV,aAAA,YACAyF,EAAA/E,EAAAV,aAAA,cACA,YAAAoE,EAAA,KAAAvG,EAAAyB,QAAAmG,GAAA,UAEAh6C,EAAAmD,UAAA,iCAAA8xC,GACA,aAEA,UAAAA,EAAArB,UAAA,MAEA5zC,EAAAmD,UAAA,iCAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAAA,CACAh6C,GAAA,IAIA,IAHA,IAAAi6C,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAGAttC,GAAA,IAGA,OAAAA,IAEA9E,EAAAmD,UAAA,+BAAA8xC,EAAA7C,EAAA8M,GACA,aAEA,IAAAC,EAAA,IAAAj7C,MAAAg7C,EAAA,GAAAp4C,KAAA,KACAhC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAAA,CACAh6C,EAAAq6C,EAAA,IAIA,IAHA,IAAAJ,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAIA,OAAAttC,IAEA9E,EAAAmD,UAAA,6BACA,aAEA,cAEAnD,EAAAmD,UAAA,8BAAA8xC,GACA,aAEA,IAAAnwC,EAAA,GAiBA,OAfAmwC,EAAAmK,aAAA,SACAt6C,GAAA,KAAAmwC,EAAAV,aAAA,YACAzvC,GAAA,IAAAmwC,EAAAV,aAAA,WAEAU,EAAAmK,aAAA,UAAAnK,EAAAmK,aAAA,YACAt6C,GAAA,KAAAmwC,EAAAV,aAAA,aAAAU,EAAAV,aAAA,WAGAU,EAAAmK,aAAA,WACAt6C,GAAA,KAAAmwC,EAAAV,aAAA,cAGAzvC,GAAA,KAGAA,IAEA9E,EAAAmD,UAAA,8BAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,iBAAA7J,EAAAmK,aAAA,SACA,IAAAL,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OACAwD,EAAA,IAEA,QAAAzD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAGAttC,GAAA,KACAA,GAAA,IAAAmwC,EAAAV,aAAA,YAEAU,EAAAmK,aAAA,WACAt6C,GAAA,KAAAmwC,EAAAV,aAAA,cAGAzvC,GAAA,IAGA,OAAAA,IAEA9E,EAAAmD,UAAA,6BAAA8xC,EAAA7C,EAAA30C,GACA,aAEA,IAAAqH,EAAA,GAEA,IAAAmwC,EAAA6J,gBACA,SAOA,IAJA,IAAAO,EAAApK,EAAAE,WACAmK,EAAAD,EAAA/9C,OACAi+C,EAAAtK,EAAAV,aAAA,YAEAlzC,EAAA,EAAmBA,EAAAi+C,IAAqBj+C,EACxC,YAAAg+C,EAAAh+C,GAAA8yC,SAAA,OAAAkL,EAAAh+C,GAAA8yC,QAAAzyC,cAAA,CAcAoD,IAPA,OAAArH,EACA8hD,EAAAv7C,WAAA,KAEA,MAIAhE,EAAAmD,UAAA,wBAAAnD,CAAAq/C,EAAAh+C,GAAA+wC,KACAmN,EAKA,OADAz6C,GAAA,sBACAuvC,SAEAr0C,EAAAmD,UAAA,iCAAA8xC,EAAA7C,GACA,aAMA,IAJA,IAAAoN,EAAA,GACAT,EAAA9J,EAAAE,WACAsK,EAAAV,EAAAz9C,OAEAD,EAAA,EAAmBA,EAAAo+C,IAAoBp+C,EACvCm+C,GAAAx/C,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAWA,MAPA,MAAArsC,KAAAy5C,GAIAA,IAAA9K,MAAA,MAAA5tC,KAAA,UAAA7E,QAAA,WAAyE,IAAAA,QAAA,iBAHzEu9C,GAAA,KAMAA,IAEAx/C,EAAAmD,UAAA,6BAAA8xC,EAAA7C,EAAAsN,GACA,aAEAA,MAAA,EACA,IAAA56C,EAAA,GAEA,OAAAmwC,EAAAI,SACA,OAAAr1C,EAAAmD,UAAA,mBAAAnD,CAAAi1C,EAAA7C,GAIA,OAAA6C,EAAAI,SACA,gBAAAJ,EAAA0K,KAAA,aAIA,OAAA1K,EAAAI,SACA,SAKA,OAFAJ,EAAAd,QAAAzyC,eAMA,SACAg+C,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,EAAA,WAGA,MAEA,QACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,yBAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAEA,iBACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,0BAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,kBAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,oBAAAnD,CAAAi1C,EAAA7C,EAAA,cAGA,MAEA,SACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,oBAAAnD,CAAAi1C,EAAA7C,EAAA,cAGA,MAEA,cACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,yBAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAEA,UACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,mBAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAEA,YACAsN,IACA56C,EAAA9E,EAAAmD,UAAA,qBAAAnD,CAAAi1C,EAAA7C,GAAA,QAGA,MAKA,WACAttC,EAAA9E,EAAAmD,UAAA,wBAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,SACA,QACAttC,EAAA9E,EAAAmD,UAAA,wBAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,aACA,QACAttC,EAAA9E,EAAAmD,UAAA,sBAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,UACAttC,EAAA9E,EAAAmD,UAAA,6BAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,QACAttC,EAAA9E,EAAAmD,UAAA,qBAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,UACAttC,EAAA9E,EAAAmD,UAAA,qBAAAnD,CAAAi1C,EAAA7C,GACA,MAEA,QACAttC,EAAAmwC,EAAAJ,UAAA,OAKA,OAAA/vC,IAEA9E,EAAAmD,UAAA,kCAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAIA,IAHA,IAAAC,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAMA,OADAttC,IAAAuvC,SAGAr0C,EAAAmD,UAAA,4BAAA8xC,EAAA7C,GACA,aAEA,IAAA4H,EAAA/E,EAAAV,aAAA,UACA,cAAAnC,EAAAyB,QAAAmG,GAAA,WAEAh6C,EAAAmD,UAAA,sCAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAAA,CACAh6C,GAAA,KAIA,IAHA,IAAAi6C,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAGAttC,GAAA,KAGA,OAAAA,IAEA9E,EAAAmD,UAAA,+BAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,GAAAmwC,EAAA6J,gBAAA,CACAh6C,GAAA,KAIA,IAHA,IAAAi6C,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAqBA,EAAA29C,IAAoB39C,EACzCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAGAttC,GAAA,KAGA,OAAAA,IAEA9E,EAAAmD,UAAA,8BAAA8xC,EAAA7C,GACA,aAEA,IAIA/wC,EACAm9C,EALA15C,EAAA,GACA86C,EAAA,QACAC,EAAA5K,EAAAlB,iBAAA,eACA+L,EAAA7K,EAAAlB,iBAAA,YAIA,IAAA1yC,EAAA,EAAeA,EAAAw+C,EAAAv+C,SAAqBD,EAAA,CACpC,IAAA0+C,EAAA//C,EAAAmD,UAAA,yBAAAnD,CAAA6/C,EAAAx+C,GAAA+wC,GACA4N,EAAA,MAEA,GAAAH,EAAAx+C,GAAA+9C,aAAA,SAGA,OAFAS,EAAAx+C,GAAAkzC,aAAA,SAAA7yC,cAAAO,QAAA,WAGA,uBACA+9C,EAAA,OACA,MAEA,wBACAA,EAAA,OACA,MAEA,yBACAA,EAAA,QAKAJ,EAAA,GAAAv+C,GAAA0+C,EAAA1L,OACAuL,EAAA,GAAAv+C,GAAA2+C,EAGA,IAAA3+C,EAAA,EAAeA,EAAAy+C,EAAAx+C,SAAiBD,EAAA,CAChC,IAAAsG,EAAAi4C,EAAAz5C,KAAA,MACA85C,EAAAH,EAAAz+C,GAAA6+C,qBAAA,MAEA,IAAA1B,EAAA,EAAkBA,EAAAqB,EAAAv+C,SAAsBk9C,EAAA,CACxC,IAAA2B,EAAA,SAEA,IAAAF,EAAAzB,KACA2B,EAAAngD,EAAAmD,UAAA,yBAAAnD,CAAAigD,EAAAzB,GAAApM,IAGAwN,EAAAj4C,GAAAxB,KAAAg6C,IAIA,IAAAC,EAAA,EAEA,IAAA/+C,EAAA,EAAeA,EAAAu+C,EAAAt+C,SAAuBD,EACtC,IAAAm9C,EAAA,EAAkBA,EAAAoB,EAAAv+C,GAAAC,SAA2Bk9C,EAAA,CAC7C,IAAA6B,EAAAT,EAAAv+C,GAAAm9C,GAAAl9C,OAEA++C,EAAAD,IACAA,EAAAC,GAKA,IAAAh/C,EAAA,EAAeA,EAAAu+C,EAAAt+C,SAAuBD,EAAA,CACtC,IAAAm9C,EAAA,EAAkBA,EAAAoB,EAAAv+C,GAAAC,SAA2Bk9C,EAC7C,IAAAn9C,EACA,MAAAu+C,EAAAv+C,GAAAm9C,GAAAj4C,OAAA,GACAq5C,EAAAv+C,GAAAm9C,GAAAx+C,EAAAmB,OAAAyG,OAAAg4C,EAAAv+C,GAAAm9C,GAAAj4C,OAAA,GAAA65C,EAAA,WAEAR,EAAAv+C,GAAAm9C,GAAAx+C,EAAAmB,OAAAyG,OAAAg4C,EAAAv+C,GAAAm9C,GAAA4B,EAAA,KAGAR,EAAAv+C,GAAAm9C,GAAAx+C,EAAAmB,OAAAyG,OAAAg4C,EAAAv+C,GAAAm9C,GAAA4B,GAIAt7C,GAAA,KAAA86C,EAAAv+C,GAAAyF,KAAA,cAGA,OAAAhC,EAAAuvC,SAEAr0C,EAAAmD,UAAA,kCAAA8xC,EAAA7C,GACA,aAEA,IAAAttC,EAAA,GAEA,IAAAmwC,EAAA6J,gBACA,SAMA,IAHA,IAAAC,EAAA9J,EAAAE,WACA6J,EAAAD,EAAAz9C,OAEAD,EAAA,EAAmBA,EAAA29C,IAAoB39C,EACvCyD,GAAA9E,EAAAmD,UAAA,oBAAAnD,CAAA++C,EAAA19C,GAAA+wC,GAAA,GAGA,OAAAttC,EAAAuvC,SAEAr0C,EAAAmD,UAAA,4BAAA8xC,GACA,aAEA,IAAAnwC,EAAAmwC,EAAAK,UA0BA,OAtBAxwC,GAFAA,IAAA7C,QAAA,YAEAA,QAAA,UAA6B,KAqB7B6C,GAFAA,GAFAA,GAFAA,GAFAA,GAFAA,GAFAA,GAFAA,GALAA,EAAA9E,EAAAmB,OAAA0D,qBAAAC,IAKA7C,QAAA,sBAEAA,QAAA,qBAEAA,QAAA,eAEAA,QAAA,yBAAsC,aAEtCA,QAAA,mBAA+B,UAE/BA,QAAA,oBAA+B,WAE/BA,QAAA,2BAEAA,QAAA,2BAA8B,kBAUzBq+C,KAJDrjD,EAAA,WACJ,aAEA,OAAA+C,GACKiE,KAAAs8C,EAAArjD,EAAAqjD,EAAAC,QAAAD,QAAAtjD,IAMJgH,KAAAxB,wCC1iKD,IAAAg+C,EAAgBvjD,EAAQ,IACxBwjD,EAAcxjD,EAAQ,IAEtBsjD,EAAAD,QAAA,SAAAI,GACA,IAAA37C,EAAAlB,OAAA48C,EAAAj+C,OACA85C,EAAA,GACArH,EAAAuL,EAAAE,GACA,GAAAzL,EAAA,GAAAA,GAAA0L,IAAA,MAAAC,WAAA,2BACA,KAAQ3L,EAAA,GAAMA,KAAA,KAAAlwC,MAAA,EAAAkwC,IAAAqH,GAAAv3C,GACd,OAAAu3C,wBCVA,IAAAuE,EAAc5jD,EAAQ,GAEtB4jD,IAAAC,EAAA,UAEAh5C,OAAU7K,EAAQ,yCCFlB,IAAA4jD,EAAc5jD,EAAQ,GACtB8jD,EAAW9jD,EAAQ,KACnB+jD,EAAgB/jD,EAAQ,KAGxBgkD,EAAA,mDAAAn7C,KAAAk7C,GAEAH,IAAAC,EAAAD,EAAAK,EAAAD,EAAA,UACAt5C,OAAA,SAAAw5C,GACA,OAAAJ,EAAAv+C,KAAA2+C,EAAAC,UAAA//C,OAAA,EAAA+/C,UAAA,QAAAf,GAAA,2BCVA,IAAAgB,EAAepkD,EAAQ,IACvB6K,EAAa7K,EAAQ,KACrBwjD,EAAcxjD,EAAQ,IAEtBsjD,EAAAD,QAAA,SAAAgB,EAAAH,EAAAI,EAAAv8C,GACA,IAAAw8C,EAAA39C,OAAA48C,EAAAa,IACAG,EAAAD,EAAAngD,OACAqgD,OAAArB,IAAAkB,EAAA,IAAA19C,OAAA09C,GACAI,EAAAN,EAAAF,GACA,GAAAQ,GAAAF,GAAA,IAAAC,EAAA,OAAAF,EACA,IAAAI,EAAAD,EAAAF,EACAI,EAAA/5C,EAAA9D,KAAA09C,EAAAn6C,KAAAu6C,KAAAF,EAAAF,EAAArgD,SAEA,OADAwgD,EAAAxgD,OAAAugD,IAAAC,IAAAv7C,MAAA,EAAAs7C,IACA58C,EAAA68C,EAAAL,IAAAK","file":"3-2cc0a3365c0bafc78dac.js","sourcesContent":["require(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nrequire(\"core-js/modules/es7.string.pad-end\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\n;\n/*! showdown v 1.9.0 - 10-11-2018 */\n\n(function () {\n  /**\n   * Created by Tivie on 13-07-2015.\n   */\n  function getDefaultOpts(simple) {\n    'use strict';\n\n    var defaultOptions = {\n      omitExtraWLInCodeBlocks: {\n        defaultValue: false,\n        describe: 'Omit the default extra whiteline added to code blocks',\n        type: 'boolean'\n      },\n      noHeaderId: {\n        defaultValue: false,\n        describe: 'Turn on/off generated header id',\n        type: 'boolean'\n      },\n      prefixHeaderId: {\n        defaultValue: false,\n        describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \\'section-\\' prefix',\n        type: 'string'\n      },\n      rawPrefixHeaderId: {\n        defaultValue: false,\n        describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the \" char is used in the prefix)',\n        type: 'boolean'\n      },\n      ghCompatibleHeaderId: {\n        defaultValue: false,\n        describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n        type: 'boolean'\n      },\n      rawHeaderId: {\n        defaultValue: false,\n        describe: 'Remove only spaces, \\' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',\n        type: 'boolean'\n      },\n      headerLevelStart: {\n        defaultValue: false,\n        describe: 'The header blocks level start',\n        type: 'integer'\n      },\n      parseImgDimensions: {\n        defaultValue: false,\n        describe: 'Turn on/off image dimension parsing',\n        type: 'boolean'\n      },\n      simplifiedAutoLink: {\n        defaultValue: false,\n        describe: 'Turn on/off GFM autolink style',\n        type: 'boolean'\n      },\n      excludeTrailingPunctuationFromURLs: {\n        defaultValue: false,\n        describe: 'Excludes trailing punctuation from links generated with autoLinking',\n        type: 'boolean'\n      },\n      literalMidWordUnderscores: {\n        defaultValue: false,\n        describe: 'Parse midword underscores as literal underscores',\n        type: 'boolean'\n      },\n      literalMidWordAsterisks: {\n        defaultValue: false,\n        describe: 'Parse midword asterisks as literal asterisks',\n        type: 'boolean'\n      },\n      strikethrough: {\n        defaultValue: false,\n        describe: 'Turn on/off strikethrough support',\n        type: 'boolean'\n      },\n      tables: {\n        defaultValue: false,\n        describe: 'Turn on/off tables support',\n        type: 'boolean'\n      },\n      tablesHeaderId: {\n        defaultValue: false,\n        describe: 'Add an id to table headers',\n        type: 'boolean'\n      },\n      ghCodeBlocks: {\n        defaultValue: true,\n        describe: 'Turn on/off GFM fenced code blocks support',\n        type: 'boolean'\n      },\n      tasklists: {\n        defaultValue: false,\n        describe: 'Turn on/off GFM tasklist support',\n        type: 'boolean'\n      },\n      smoothLivePreview: {\n        defaultValue: false,\n        describe: 'Prevents weird effects in live previews due to incomplete input',\n        type: 'boolean'\n      },\n      smartIndentationFix: {\n        defaultValue: false,\n        description: 'Tries to smartly fix indentation in es6 strings',\n        type: 'boolean'\n      },\n      disableForced4SpacesIndentedSublists: {\n        defaultValue: false,\n        description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n        type: 'boolean'\n      },\n      simpleLineBreaks: {\n        defaultValue: false,\n        description: 'Parses simple line breaks as <br> (GFM Style)',\n        type: 'boolean'\n      },\n      requireSpaceBeforeHeadingText: {\n        defaultValue: false,\n        description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n        type: 'boolean'\n      },\n      ghMentions: {\n        defaultValue: false,\n        description: 'Enables github @mentions',\n        type: 'boolean'\n      },\n      ghMentionsLink: {\n        defaultValue: 'https://github.com/{u}',\n        description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n        type: 'string'\n      },\n      encodeEmails: {\n        defaultValue: true,\n        description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n        type: 'boolean'\n      },\n      openLinksInNewWindow: {\n        defaultValue: false,\n        description: 'Open all links in new windows',\n        type: 'boolean'\n      },\n      backslashEscapesHTMLTags: {\n        defaultValue: false,\n        description: 'Support for HTML Tag escaping. ex: \\<div>foo\\</div>',\n        type: 'boolean'\n      },\n      emoji: {\n        defaultValue: false,\n        description: 'Enable emoji support. Ex: `this is a :smile: emoji`',\n        type: 'boolean'\n      },\n      underline: {\n        defaultValue: false,\n        description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',\n        type: 'boolean'\n      },\n      completeHTMLDocument: {\n        defaultValue: false,\n        description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',\n        type: 'boolean'\n      },\n      metadata: {\n        defaultValue: false,\n        description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',\n        type: 'boolean'\n      },\n      splitAdjacentBlockquotes: {\n        defaultValue: false,\n        description: 'Split adjacent blockquote blocks',\n        type: 'boolean'\n      }\n    };\n\n    if (simple === false) {\n      return JSON.parse(JSON.stringify(defaultOptions));\n    }\n\n    var ret = {};\n\n    for (var opt in defaultOptions) {\n      if (defaultOptions.hasOwnProperty(opt)) {\n        ret[opt] = defaultOptions[opt].defaultValue;\n      }\n    }\n\n    return ret;\n  }\n\n  function allOptionsOn() {\n    'use strict';\n\n    var options = getDefaultOpts(true),\n        ret = {};\n\n    for (var opt in options) {\n      if (options.hasOwnProperty(opt)) {\n        ret[opt] = true;\n      }\n    }\n\n    return ret;\n  }\n  /**\n   * Created by Tivie on 06-01-2015.\n   */\n  // Private properties\n\n\n  var showdown = {},\n      parsers = {},\n      extensions = {},\n      globalOptions = getDefaultOpts(true),\n      setFlavor = 'vanilla',\n      flavor = {\n    github: {\n      omitExtraWLInCodeBlocks: true,\n      simplifiedAutoLink: true,\n      excludeTrailingPunctuationFromURLs: true,\n      literalMidWordUnderscores: true,\n      strikethrough: true,\n      tables: true,\n      tablesHeaderId: true,\n      ghCodeBlocks: true,\n      tasklists: true,\n      disableForced4SpacesIndentedSublists: true,\n      simpleLineBreaks: true,\n      requireSpaceBeforeHeadingText: true,\n      ghCompatibleHeaderId: true,\n      ghMentions: true,\n      backslashEscapesHTMLTags: true,\n      emoji: true,\n      splitAdjacentBlockquotes: true\n    },\n    original: {\n      noHeaderId: true,\n      ghCodeBlocks: false\n    },\n    ghost: {\n      omitExtraWLInCodeBlocks: true,\n      parseImgDimensions: true,\n      simplifiedAutoLink: true,\n      excludeTrailingPunctuationFromURLs: true,\n      literalMidWordUnderscores: true,\n      strikethrough: true,\n      tables: true,\n      tablesHeaderId: true,\n      ghCodeBlocks: true,\n      tasklists: true,\n      smoothLivePreview: true,\n      simpleLineBreaks: true,\n      requireSpaceBeforeHeadingText: true,\n      ghMentions: false,\n      encodeEmails: true\n    },\n    vanilla: getDefaultOpts(true),\n    allOn: allOptionsOn()\n  };\n  /**\n   * helper namespace\n   * @type {{}}\n   */\n\n  showdown.helper = {};\n  /**\n   * TODO LEGACY SUPPORT CODE\n   * @type {{}}\n   */\n\n  showdown.extensions = {};\n  /**\n   * Set a global option\n   * @static\n   * @param {string} key\n   * @param {*} value\n   * @returns {showdown}\n   */\n\n  showdown.setOption = function (key, value) {\n    'use strict';\n\n    globalOptions[key] = value;\n    return this;\n  };\n  /**\n   * Get a global option\n   * @static\n   * @param {string} key\n   * @returns {*}\n   */\n\n\n  showdown.getOption = function (key) {\n    'use strict';\n\n    return globalOptions[key];\n  };\n  /**\n   * Get the global options\n   * @static\n   * @returns {{}}\n   */\n\n\n  showdown.getOptions = function () {\n    'use strict';\n\n    return globalOptions;\n  };\n  /**\n   * Reset global options to the default values\n   * @static\n   */\n\n\n  showdown.resetOptions = function () {\n    'use strict';\n\n    globalOptions = getDefaultOpts(true);\n  };\n  /**\n   * Set the flavor showdown should use as default\n   * @param {string} name\n   */\n\n\n  showdown.setFlavor = function (name) {\n    'use strict';\n\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n\n    showdown.resetOptions();\n    var preset = flavor[name];\n    setFlavor = name;\n\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        globalOptions[option] = preset[option];\n      }\n    }\n  };\n  /**\n   * Get the currently set flavor\n   * @returns {string}\n   */\n\n\n  showdown.getFlavor = function () {\n    'use strict';\n\n    return setFlavor;\n  };\n  /**\n   * Get the options of a specified flavor. Returns undefined if the flavor was not found\n   * @param {string} name Name of the flavor\n   * @returns {{}|undefined}\n   */\n\n\n  showdown.getFlavorOptions = function (name) {\n    'use strict';\n\n    if (flavor.hasOwnProperty(name)) {\n      return flavor[name];\n    }\n  };\n  /**\n   * Get the default options\n   * @static\n   * @param {boolean} [simple=true]\n   * @returns {{}}\n   */\n\n\n  showdown.getDefaultOptions = function (simple) {\n    'use strict';\n\n    return getDefaultOpts(simple);\n  };\n  /**\n   * Get or set a subParser\n   *\n   * subParser(name)       - Get a registered subParser\n   * subParser(name, func) - Register a subParser\n   * @static\n   * @param {string} name\n   * @param {function} [func]\n   * @returns {*}\n   */\n\n\n  showdown.subParser = function (name, func) {\n    'use strict';\n\n    if (showdown.helper.isString(name)) {\n      if (typeof func !== 'undefined') {\n        parsers[name] = func;\n      } else {\n        if (parsers.hasOwnProperty(name)) {\n          return parsers[name];\n        } else {\n          throw Error('SubParser named ' + name + ' not registered!');\n        }\n      }\n    }\n  };\n  /**\n   * Gets or registers an extension\n   * @static\n   * @param {string} name\n   * @param {object|function=} ext\n   * @returns {*}\n   */\n\n\n  showdown.extension = function (name, ext) {\n    'use strict';\n\n    if (!showdown.helper.isString(name)) {\n      throw Error('Extension \\'name\\' must be a string');\n    }\n\n    name = showdown.helper.stdExtName(name); // Getter\n\n    if (showdown.helper.isUndefined(ext)) {\n      if (!extensions.hasOwnProperty(name)) {\n        throw Error('Extension named ' + name + ' is not registered!');\n      }\n\n      return extensions[name]; // Setter\n    } else {\n      // Expand extension if it's wrapped in a function\n      if (typeof ext === 'function') {\n        ext = ext();\n      } // Ensure extension is an array\n\n\n      if (!showdown.helper.isArray(ext)) {\n        ext = [ext];\n      }\n\n      var validExtension = validate(ext, name);\n\n      if (validExtension.valid) {\n        extensions[name] = ext;\n      } else {\n        throw Error(validExtension.error);\n      }\n    }\n  };\n  /**\n   * Gets all extensions registered\n   * @returns {{}}\n   */\n\n\n  showdown.getAllExtensions = function () {\n    'use strict';\n\n    return extensions;\n  };\n  /**\n   * Remove an extension\n   * @param {string} name\n   */\n\n\n  showdown.removeExtension = function (name) {\n    'use strict';\n\n    delete extensions[name];\n  };\n  /**\n   * Removes all extensions\n   */\n\n\n  showdown.resetExtensions = function () {\n    'use strict';\n\n    extensions = {};\n  };\n  /**\n   * Validate extension\n   * @param {array} extension\n   * @param {string} name\n   * @returns {{valid: boolean, error: string}}\n   */\n\n\n  function validate(extension, name) {\n    'use strict';\n\n    var errMsg = name ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n        ret = {\n      valid: true,\n      error: ''\n    };\n\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n\n    for (var i = 0; i < extension.length; ++i) {\n      var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n          ext = extension[i];\n\n      if (typeof ext !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n        return ret;\n      }\n\n      if (!showdown.helper.isString(ext.type)) {\n        ret.valid = false;\n        ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n        return ret;\n      }\n\n      var type = ext.type = ext.type.toLowerCase(); // normalize extension type\n\n      if (type === 'language') {\n        type = ext.type = 'lang';\n      }\n\n      if (type === 'html') {\n        type = ext.type = 'output';\n      }\n\n      if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n        ret.valid = false;\n        ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n        return ret;\n      }\n\n      if (type === 'listener') {\n        if (showdown.helper.isUndefined(ext.listeners)) {\n          ret.valid = false;\n          ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n          return ret;\n        }\n      } else {\n        if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n          ret.valid = false;\n          ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n          return ret;\n        }\n      }\n\n      if (ext.listeners) {\n        if (typeof ext.listeners !== 'object') {\n          ret.valid = false;\n          ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n          return ret;\n        }\n\n        for (var ln in ext.listeners) {\n          if (ext.listeners.hasOwnProperty(ln)) {\n            if (typeof ext.listeners[ln] !== 'function') {\n              ret.valid = false;\n              ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln + ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n              return ret;\n            }\n          }\n        }\n      }\n\n      if (ext.filter) {\n        if (typeof ext.filter !== 'function') {\n          ret.valid = false;\n          ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n          return ret;\n        }\n      } else if (ext.regex) {\n        if (showdown.helper.isString(ext.regex)) {\n          ext.regex = new RegExp(ext.regex, 'g');\n        }\n\n        if (!(ext.regex instanceof RegExp)) {\n          ret.valid = false;\n          ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n          return ret;\n        }\n\n        if (showdown.helper.isUndefined(ext.replace)) {\n          ret.valid = false;\n          ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n          return ret;\n        }\n      }\n    }\n\n    return ret;\n  }\n  /**\n   * Validate extension\n   * @param {object} ext\n   * @returns {boolean}\n   */\n\n\n  showdown.validateExtension = function (ext) {\n    'use strict';\n\n    var validateExtension = validate(ext, null);\n\n    if (!validateExtension.valid) {\n      console.warn(validateExtension.error);\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * showdownjs helper functions\n   */\n\n\n  if (!showdown.hasOwnProperty('helper')) {\n    showdown.helper = {};\n  }\n  /**\n   * Check if var is string\n   * @static\n   * @param {string} a\n   * @returns {boolean}\n   */\n\n\n  showdown.helper.isString = function (a) {\n    'use strict';\n\n    return typeof a === 'string' || a instanceof String;\n  };\n  /**\n   * Check if var is a function\n   * @static\n   * @param {*} a\n   * @returns {boolean}\n   */\n\n\n  showdown.helper.isFunction = function (a) {\n    'use strict';\n\n    var getType = {};\n    return a && getType.toString.call(a) === '[object Function]';\n  };\n  /**\n   * isArray helper function\n   * @static\n   * @param {*} a\n   * @returns {boolean}\n   */\n\n\n  showdown.helper.isArray = function (a) {\n    'use strict';\n\n    return Array.isArray(a);\n  };\n  /**\n   * Check if value is undefined\n   * @static\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n   */\n\n\n  showdown.helper.isUndefined = function (value) {\n    'use strict';\n\n    return typeof value === 'undefined';\n  };\n  /**\n   * ForEach helper function\n   * Iterates over Arrays and Objects (own properties only)\n   * @static\n   * @param {*} obj\n   * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n   */\n\n\n  showdown.helper.forEach = function (obj, callback) {\n    'use strict'; // check if obj is defined\n\n    if (showdown.helper.isUndefined(obj)) {\n      throw new Error('obj param is required');\n    }\n\n    if (showdown.helper.isUndefined(callback)) {\n      throw new Error('callback param is required');\n    }\n\n    if (!showdown.helper.isFunction(callback)) {\n      throw new Error('callback param must be a function/closure');\n    }\n\n    if (typeof obj.forEach === 'function') {\n      obj.forEach(callback);\n    } else if (showdown.helper.isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        callback(obj[i], i, obj);\n      }\n    } else if (typeof obj === 'object') {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          callback(obj[prop], prop, obj);\n        }\n      }\n    } else {\n      throw new Error('obj does not seem to be an array or an iterable object');\n    }\n  };\n  /**\n   * Standardidize extension name\n   * @static\n   * @param {string} s extension name\n   * @returns {string}\n   */\n\n\n  showdown.helper.stdExtName = function (s) {\n    'use strict';\n\n    return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n  };\n\n  function escapeCharactersCallback(wholeMatch, m1) {\n    'use strict';\n\n    var charCodeToEscape = m1.charCodeAt(0);\n    return '¨E' + charCodeToEscape + 'E';\n  }\n  /**\n   * Callback used to escape characters when passing through String.replace\n   * @static\n   * @param {string} wholeMatch\n   * @param {string} m1\n   * @returns {string}\n   */\n\n\n  showdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n  /**\n   * Escape characters in a string\n   * @static\n   * @param {string} text\n   * @param {string} charsToEscape\n   * @param {boolean} afterBackslash\n   * @returns {XML|string|void|*}\n   */\n\n  showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n    'use strict'; // First we have to escape the escape characters so that\n    // we can build a character class out of them\n\n    var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n    if (afterBackslash) {\n      regexString = '\\\\\\\\' + regexString;\n    }\n\n    var regex = new RegExp(regexString, 'g');\n    text = text.replace(regex, escapeCharactersCallback);\n    return text;\n  };\n  /**\n   * Unescape HTML entities\n   * @param txt\n   * @returns {string}\n   */\n\n\n  showdown.helper.unescapeHTMLEntities = function (txt) {\n    'use strict';\n\n    return txt.replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');\n  };\n\n  var rgxFindMatchPos = function rgxFindMatchPos(str, left, right, flags) {\n    'use strict';\n\n    var f = flags || '',\n        g = f.indexOf('g') > -1,\n        x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n        l = new RegExp(left, f.replace(/g/g, '')),\n        pos = [],\n        t,\n        s,\n        m,\n        start,\n        end;\n\n    do {\n      t = 0;\n\n      while (m = x.exec(str)) {\n        if (l.test(m[0])) {\n          if (!t++) {\n            s = x.lastIndex;\n            start = s - m[0].length;\n          }\n        } else if (t) {\n          if (! --t) {\n            end = m.index + m[0].length;\n            var obj = {\n              left: {\n                start: start,\n                end: s\n              },\n              match: {\n                start: s,\n                end: m.index\n              },\n              right: {\n                start: m.index,\n                end: end\n              },\n              wholeMatch: {\n                start: start,\n                end: end\n              }\n            };\n            pos.push(obj);\n\n            if (!g) {\n              return pos;\n            }\n          }\n        }\n      }\n    } while (t && (x.lastIndex = s));\n\n    return pos;\n  };\n  /**\n   * matchRecursiveRegExp\n   *\n   * (c) 2007 Steven Levithan <stevenlevithan.com>\n   * MIT License\n   *\n   * Accepts a string to search, a left and right format delimiter\n   * as regex patterns, and optional regex flags. Returns an array\n   * of matches, allowing nested instances of left/right delimiters.\n   * Use the \"g\" flag to return all matches, otherwise only the\n   * first is returned. Be careful to ensure that the left and\n   * right format delimiters produce mutually exclusive matches.\n   * Backreferences are not supported within the right delimiter\n   * due to how it is internally combined with the left delimiter.\n   * When matching strings whose format delimiters are unbalanced\n   * to the left or right, the output is intentionally as a\n   * conventional regex library with recursion support would\n   * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n   * \"<\" and \">\" as the delimiters (both strings contain a single,\n   * balanced instance of \"<x>\").\n   *\n   * examples:\n   * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n   * returns: []\n   * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n   * returns: [\"t<<e>><s>\", \"\"]\n   * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n   * returns: [\"test\"]\n   */\n\n\n  showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n    'use strict';\n\n    var matchPos = rgxFindMatchPos(str, left, right, flags),\n        results = [];\n\n    for (var i = 0; i < matchPos.length; ++i) {\n      results.push([str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end), str.slice(matchPos[i].match.start, matchPos[i].match.end), str.slice(matchPos[i].left.start, matchPos[i].left.end), str.slice(matchPos[i].right.start, matchPos[i].right.end)]);\n    }\n\n    return results;\n  };\n  /**\n   *\n   * @param {string} str\n   * @param {string|function} replacement\n   * @param {string} left\n   * @param {string} right\n   * @param {string} flags\n   * @returns {string}\n   */\n\n\n  showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n    'use strict';\n\n    if (!showdown.helper.isFunction(replacement)) {\n      var repStr = replacement;\n\n      replacement = function replacement() {\n        return repStr;\n      };\n    }\n\n    var matchPos = rgxFindMatchPos(str, left, right, flags),\n        finalStr = str,\n        lng = matchPos.length;\n\n    if (lng > 0) {\n      var bits = [];\n\n      if (matchPos[0].wholeMatch.start !== 0) {\n        bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n      }\n\n      for (var i = 0; i < lng; ++i) {\n        bits.push(replacement(str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end), str.slice(matchPos[i].match.start, matchPos[i].match.end), str.slice(matchPos[i].left.start, matchPos[i].left.end), str.slice(matchPos[i].right.start, matchPos[i].right.end)));\n\n        if (i < lng - 1) {\n          bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n        }\n      }\n\n      if (matchPos[lng - 1].wholeMatch.end < str.length) {\n        bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n      }\n\n      finalStr = bits.join('');\n    }\n\n    return finalStr;\n  };\n  /**\n   * Returns the index within the passed String object of the first occurrence of the specified regex,\n   * starting the search at fromIndex. Returns -1 if the value is not found.\n   *\n   * @param {string} str string to search\n   * @param {RegExp} regex Regular expression to search\n   * @param {int} [fromIndex = 0] Index to start the search\n   * @returns {Number}\n   * @throws InvalidArgumentError\n   */\n\n\n  showdown.helper.regexIndexOf = function (str, regex, fromIndex) {\n    'use strict';\n\n    if (!showdown.helper.isString(str)) {\n      throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n    }\n\n    if (regex instanceof RegExp === false) {\n      throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\n    }\n\n    var indexOf = str.substring(fromIndex || 0).search(regex);\n    return indexOf >= 0 ? indexOf + (fromIndex || 0) : indexOf;\n  };\n  /**\n   * Splits the passed string object at the defined index, and returns an array composed of the two substrings\n   * @param {string} str string to split\n   * @param {int} index index to split string at\n   * @returns {[string,string]}\n   * @throws InvalidArgumentError\n   */\n\n\n  showdown.helper.splitAtIndex = function (str, index) {\n    'use strict';\n\n    if (!showdown.helper.isString(str)) {\n      throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n    }\n\n    return [str.substring(0, index), str.substring(index)];\n  };\n  /**\n   * Obfuscate an e-mail address through the use of Character Entities,\n   * transforming ASCII characters into their equivalent decimal or hex entities.\n   *\n   * Since it has a random component, subsequent calls to this function produce different results\n   *\n   * @param {string} mail\n   * @returns {string}\n   */\n\n\n  showdown.helper.encodeEmailAddress = function (mail) {\n    'use strict';\n\n    var encode = [function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    }, function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    }, function (ch) {\n      return ch;\n    }];\n    mail = mail.replace(/./g, function (ch) {\n      if (ch === '@') {\n        // this *must* be encoded. I insist.\n        ch = encode[Math.floor(Math.random() * 2)](ch);\n      } else {\n        var r = Math.random(); // roughly 10% raw, 45% hex, 45% dec\n\n        ch = r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch);\n      }\n\n      return ch;\n    });\n    return mail;\n  };\n  /**\n   *\n   * @param str\n   * @param targetLength\n   * @param padString\n   * @returns {string}\n   */\n\n\n  showdown.helper.padEnd = function padEnd(str, targetLength, padString) {\n    'use strict';\n    /*jshint bitwise: false*/\n    // eslint-disable-next-line space-infix-ops\n\n    targetLength = targetLength >> 0; //floor if number or convert non-number to 0;\n\n    /*jshint bitwise: true*/\n\n    padString = String(padString || ' ');\n\n    if (str.length > targetLength) {\n      return String(str);\n    } else {\n      targetLength = targetLength - str.length;\n\n      if (targetLength > padString.length) {\n        padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n      }\n\n      return String(str) + padString.slice(0, targetLength);\n    }\n  };\n  /**\n   * POLYFILLS\n   */\n  // use this instead of builtin is undefined for IE8 compatibility\n\n\n  if (typeof console === 'undefined') {\n    console = {\n      warn: function warn(msg) {\n        'use strict';\n\n        alert(msg);\n      },\n      log: function log(msg) {\n        'use strict';\n\n        alert(msg);\n      },\n      error: function error(msg) {\n        'use strict';\n\n        throw msg;\n      }\n    };\n  }\n  /**\n   * Common regexes.\n   * We declare some common regexes to improve performance\n   */\n\n\n  showdown.helper.regexes = {\n    asteriskDashAndColon: /([*_:~])/g\n  };\n  /**\n   * EMOJIS LIST\n   */\n\n  showdown.helper.emojis = {\n    '+1': \"\\uD83D\\uDC4D\",\n    '-1': \"\\uD83D\\uDC4E\",\n    '100': \"\\uD83D\\uDCAF\",\n    '1234': \"\\uD83D\\uDD22\",\n    '1st_place_medal': \"\\uD83E\\uDD47\",\n    '2nd_place_medal': \"\\uD83E\\uDD48\",\n    '3rd_place_medal': \"\\uD83E\\uDD49\",\n    '8ball': \"\\uD83C\\uDFB1\",\n    'a': \"\\uD83C\\uDD70\\uFE0F\",\n    'ab': \"\\uD83C\\uDD8E\",\n    'abc': \"\\uD83D\\uDD24\",\n    'abcd': \"\\uD83D\\uDD21\",\n    'accept': \"\\uD83C\\uDE51\",\n    'aerial_tramway': \"\\uD83D\\uDEA1\",\n    'airplane': \"\\u2708\\uFE0F\",\n    'alarm_clock': \"\\u23F0\",\n    'alembic': \"\\u2697\\uFE0F\",\n    'alien': \"\\uD83D\\uDC7D\",\n    'ambulance': \"\\uD83D\\uDE91\",\n    'amphora': \"\\uD83C\\uDFFA\",\n    'anchor': \"\\u2693\\uFE0F\",\n    'angel': \"\\uD83D\\uDC7C\",\n    'anger': \"\\uD83D\\uDCA2\",\n    'angry': \"\\uD83D\\uDE20\",\n    'anguished': \"\\uD83D\\uDE27\",\n    'ant': \"\\uD83D\\uDC1C\",\n    'apple': \"\\uD83C\\uDF4E\",\n    'aquarius': \"\\u2652\\uFE0F\",\n    'aries': \"\\u2648\\uFE0F\",\n    'arrow_backward': \"\\u25C0\\uFE0F\",\n    'arrow_double_down': \"\\u23EC\",\n    'arrow_double_up': \"\\u23EB\",\n    'arrow_down': \"\\u2B07\\uFE0F\",\n    'arrow_down_small': \"\\uD83D\\uDD3D\",\n    'arrow_forward': \"\\u25B6\\uFE0F\",\n    'arrow_heading_down': \"\\u2935\\uFE0F\",\n    'arrow_heading_up': \"\\u2934\\uFE0F\",\n    'arrow_left': \"\\u2B05\\uFE0F\",\n    'arrow_lower_left': \"\\u2199\\uFE0F\",\n    'arrow_lower_right': \"\\u2198\\uFE0F\",\n    'arrow_right': \"\\u27A1\\uFE0F\",\n    'arrow_right_hook': \"\\u21AA\\uFE0F\",\n    'arrow_up': \"\\u2B06\\uFE0F\",\n    'arrow_up_down': \"\\u2195\\uFE0F\",\n    'arrow_up_small': \"\\uD83D\\uDD3C\",\n    'arrow_upper_left': \"\\u2196\\uFE0F\",\n    'arrow_upper_right': \"\\u2197\\uFE0F\",\n    'arrows_clockwise': \"\\uD83D\\uDD03\",\n    'arrows_counterclockwise': \"\\uD83D\\uDD04\",\n    'art': \"\\uD83C\\uDFA8\",\n    'articulated_lorry': \"\\uD83D\\uDE9B\",\n    'artificial_satellite': \"\\uD83D\\uDEF0\",\n    'astonished': \"\\uD83D\\uDE32\",\n    'athletic_shoe': \"\\uD83D\\uDC5F\",\n    'atm': \"\\uD83C\\uDFE7\",\n    'atom_symbol': \"\\u269B\\uFE0F\",\n    'avocado': \"\\uD83E\\uDD51\",\n    'b': \"\\uD83C\\uDD71\\uFE0F\",\n    'baby': \"\\uD83D\\uDC76\",\n    'baby_bottle': \"\\uD83C\\uDF7C\",\n    'baby_chick': \"\\uD83D\\uDC24\",\n    'baby_symbol': \"\\uD83D\\uDEBC\",\n    'back': \"\\uD83D\\uDD19\",\n    'bacon': \"\\uD83E\\uDD53\",\n    'badminton': \"\\uD83C\\uDFF8\",\n    'baggage_claim': \"\\uD83D\\uDEC4\",\n    'baguette_bread': \"\\uD83E\\uDD56\",\n    'balance_scale': \"\\u2696\\uFE0F\",\n    'balloon': \"\\uD83C\\uDF88\",\n    'ballot_box': \"\\uD83D\\uDDF3\",\n    'ballot_box_with_check': \"\\u2611\\uFE0F\",\n    'bamboo': \"\\uD83C\\uDF8D\",\n    'banana': \"\\uD83C\\uDF4C\",\n    'bangbang': \"\\u203C\\uFE0F\",\n    'bank': \"\\uD83C\\uDFE6\",\n    'bar_chart': \"\\uD83D\\uDCCA\",\n    'barber': \"\\uD83D\\uDC88\",\n    'baseball': \"\\u26BE\\uFE0F\",\n    'basketball': \"\\uD83C\\uDFC0\",\n    'basketball_man': \"\\u26F9\\uFE0F\",\n    'basketball_woman': \"\\u26F9\\uFE0F&zwj;\\u2640\\uFE0F\",\n    'bat': \"\\uD83E\\uDD87\",\n    'bath': \"\\uD83D\\uDEC0\",\n    'bathtub': \"\\uD83D\\uDEC1\",\n    'battery': \"\\uD83D\\uDD0B\",\n    'beach_umbrella': \"\\uD83C\\uDFD6\",\n    'bear': \"\\uD83D\\uDC3B\",\n    'bed': \"\\uD83D\\uDECF\",\n    'bee': \"\\uD83D\\uDC1D\",\n    'beer': \"\\uD83C\\uDF7A\",\n    'beers': \"\\uD83C\\uDF7B\",\n    'beetle': \"\\uD83D\\uDC1E\",\n    'beginner': \"\\uD83D\\uDD30\",\n    'bell': \"\\uD83D\\uDD14\",\n    'bellhop_bell': \"\\uD83D\\uDECE\",\n    'bento': \"\\uD83C\\uDF71\",\n    'biking_man': \"\\uD83D\\uDEB4\",\n    'bike': \"\\uD83D\\uDEB2\",\n    'biking_woman': \"\\uD83D\\uDEB4&zwj;\\u2640\\uFE0F\",\n    'bikini': \"\\uD83D\\uDC59\",\n    'biohazard': \"\\u2623\\uFE0F\",\n    'bird': \"\\uD83D\\uDC26\",\n    'birthday': \"\\uD83C\\uDF82\",\n    'black_circle': \"\\u26AB\\uFE0F\",\n    'black_flag': \"\\uD83C\\uDFF4\",\n    'black_heart': \"\\uD83D\\uDDA4\",\n    'black_joker': \"\\uD83C\\uDCCF\",\n    'black_large_square': \"\\u2B1B\\uFE0F\",\n    'black_medium_small_square': \"\\u25FE\\uFE0F\",\n    'black_medium_square': \"\\u25FC\\uFE0F\",\n    'black_nib': \"\\u2712\\uFE0F\",\n    'black_small_square': \"\\u25AA\\uFE0F\",\n    'black_square_button': \"\\uD83D\\uDD32\",\n    'blonde_man': \"\\uD83D\\uDC71\",\n    'blonde_woman': \"\\uD83D\\uDC71&zwj;\\u2640\\uFE0F\",\n    'blossom': \"\\uD83C\\uDF3C\",\n    'blowfish': \"\\uD83D\\uDC21\",\n    'blue_book': \"\\uD83D\\uDCD8\",\n    'blue_car': \"\\uD83D\\uDE99\",\n    'blue_heart': \"\\uD83D\\uDC99\",\n    'blush': \"\\uD83D\\uDE0A\",\n    'boar': \"\\uD83D\\uDC17\",\n    'boat': \"\\u26F5\\uFE0F\",\n    'bomb': \"\\uD83D\\uDCA3\",\n    'book': \"\\uD83D\\uDCD6\",\n    'bookmark': \"\\uD83D\\uDD16\",\n    'bookmark_tabs': \"\\uD83D\\uDCD1\",\n    'books': \"\\uD83D\\uDCDA\",\n    'boom': \"\\uD83D\\uDCA5\",\n    'boot': \"\\uD83D\\uDC62\",\n    'bouquet': \"\\uD83D\\uDC90\",\n    'bowing_man': \"\\uD83D\\uDE47\",\n    'bow_and_arrow': \"\\uD83C\\uDFF9\",\n    'bowing_woman': \"\\uD83D\\uDE47&zwj;\\u2640\\uFE0F\",\n    'bowling': \"\\uD83C\\uDFB3\",\n    'boxing_glove': \"\\uD83E\\uDD4A\",\n    'boy': \"\\uD83D\\uDC66\",\n    'bread': \"\\uD83C\\uDF5E\",\n    'bride_with_veil': \"\\uD83D\\uDC70\",\n    'bridge_at_night': \"\\uD83C\\uDF09\",\n    'briefcase': \"\\uD83D\\uDCBC\",\n    'broken_heart': \"\\uD83D\\uDC94\",\n    'bug': \"\\uD83D\\uDC1B\",\n    'building_construction': \"\\uD83C\\uDFD7\",\n    'bulb': \"\\uD83D\\uDCA1\",\n    'bullettrain_front': \"\\uD83D\\uDE85\",\n    'bullettrain_side': \"\\uD83D\\uDE84\",\n    'burrito': \"\\uD83C\\uDF2F\",\n    'bus': \"\\uD83D\\uDE8C\",\n    'business_suit_levitating': \"\\uD83D\\uDD74\",\n    'busstop': \"\\uD83D\\uDE8F\",\n    'bust_in_silhouette': \"\\uD83D\\uDC64\",\n    'busts_in_silhouette': \"\\uD83D\\uDC65\",\n    'butterfly': \"\\uD83E\\uDD8B\",\n    'cactus': \"\\uD83C\\uDF35\",\n    'cake': \"\\uD83C\\uDF70\",\n    'calendar': \"\\uD83D\\uDCC6\",\n    'call_me_hand': \"\\uD83E\\uDD19\",\n    'calling': \"\\uD83D\\uDCF2\",\n    'camel': \"\\uD83D\\uDC2B\",\n    'camera': \"\\uD83D\\uDCF7\",\n    'camera_flash': \"\\uD83D\\uDCF8\",\n    'camping': \"\\uD83C\\uDFD5\",\n    'cancer': \"\\u264B\\uFE0F\",\n    'candle': \"\\uD83D\\uDD6F\",\n    'candy': \"\\uD83C\\uDF6C\",\n    'canoe': \"\\uD83D\\uDEF6\",\n    'capital_abcd': \"\\uD83D\\uDD20\",\n    'capricorn': \"\\u2651\\uFE0F\",\n    'car': \"\\uD83D\\uDE97\",\n    'card_file_box': \"\\uD83D\\uDDC3\",\n    'card_index': \"\\uD83D\\uDCC7\",\n    'card_index_dividers': \"\\uD83D\\uDDC2\",\n    'carousel_horse': \"\\uD83C\\uDFA0\",\n    'carrot': \"\\uD83E\\uDD55\",\n    'cat': \"\\uD83D\\uDC31\",\n    'cat2': \"\\uD83D\\uDC08\",\n    'cd': \"\\uD83D\\uDCBF\",\n    'chains': \"\\u26D3\",\n    'champagne': \"\\uD83C\\uDF7E\",\n    'chart': \"\\uD83D\\uDCB9\",\n    'chart_with_downwards_trend': \"\\uD83D\\uDCC9\",\n    'chart_with_upwards_trend': \"\\uD83D\\uDCC8\",\n    'checkered_flag': \"\\uD83C\\uDFC1\",\n    'cheese': \"\\uD83E\\uDDC0\",\n    'cherries': \"\\uD83C\\uDF52\",\n    'cherry_blossom': \"\\uD83C\\uDF38\",\n    'chestnut': \"\\uD83C\\uDF30\",\n    'chicken': \"\\uD83D\\uDC14\",\n    'children_crossing': \"\\uD83D\\uDEB8\",\n    'chipmunk': \"\\uD83D\\uDC3F\",\n    'chocolate_bar': \"\\uD83C\\uDF6B\",\n    'christmas_tree': \"\\uD83C\\uDF84\",\n    'church': \"\\u26EA\\uFE0F\",\n    'cinema': \"\\uD83C\\uDFA6\",\n    'circus_tent': \"\\uD83C\\uDFAA\",\n    'city_sunrise': \"\\uD83C\\uDF07\",\n    'city_sunset': \"\\uD83C\\uDF06\",\n    'cityscape': \"\\uD83C\\uDFD9\",\n    'cl': \"\\uD83C\\uDD91\",\n    'clamp': \"\\uD83D\\uDDDC\",\n    'clap': \"\\uD83D\\uDC4F\",\n    'clapper': \"\\uD83C\\uDFAC\",\n    'classical_building': \"\\uD83C\\uDFDB\",\n    'clinking_glasses': \"\\uD83E\\uDD42\",\n    'clipboard': \"\\uD83D\\uDCCB\",\n    'clock1': \"\\uD83D\\uDD50\",\n    'clock10': \"\\uD83D\\uDD59\",\n    'clock1030': \"\\uD83D\\uDD65\",\n    'clock11': \"\\uD83D\\uDD5A\",\n    'clock1130': \"\\uD83D\\uDD66\",\n    'clock12': \"\\uD83D\\uDD5B\",\n    'clock1230': \"\\uD83D\\uDD67\",\n    'clock130': \"\\uD83D\\uDD5C\",\n    'clock2': \"\\uD83D\\uDD51\",\n    'clock230': \"\\uD83D\\uDD5D\",\n    'clock3': \"\\uD83D\\uDD52\",\n    'clock330': \"\\uD83D\\uDD5E\",\n    'clock4': \"\\uD83D\\uDD53\",\n    'clock430': \"\\uD83D\\uDD5F\",\n    'clock5': \"\\uD83D\\uDD54\",\n    'clock530': \"\\uD83D\\uDD60\",\n    'clock6': \"\\uD83D\\uDD55\",\n    'clock630': \"\\uD83D\\uDD61\",\n    'clock7': \"\\uD83D\\uDD56\",\n    'clock730': \"\\uD83D\\uDD62\",\n    'clock8': \"\\uD83D\\uDD57\",\n    'clock830': \"\\uD83D\\uDD63\",\n    'clock9': \"\\uD83D\\uDD58\",\n    'clock930': \"\\uD83D\\uDD64\",\n    'closed_book': \"\\uD83D\\uDCD5\",\n    'closed_lock_with_key': \"\\uD83D\\uDD10\",\n    'closed_umbrella': \"\\uD83C\\uDF02\",\n    'cloud': \"\\u2601\\uFE0F\",\n    'cloud_with_lightning': \"\\uD83C\\uDF29\",\n    'cloud_with_lightning_and_rain': \"\\u26C8\",\n    'cloud_with_rain': \"\\uD83C\\uDF27\",\n    'cloud_with_snow': \"\\uD83C\\uDF28\",\n    'clown_face': \"\\uD83E\\uDD21\",\n    'clubs': \"\\u2663\\uFE0F\",\n    'cocktail': \"\\uD83C\\uDF78\",\n    'coffee': \"\\u2615\\uFE0F\",\n    'coffin': \"\\u26B0\\uFE0F\",\n    'cold_sweat': \"\\uD83D\\uDE30\",\n    'comet': \"\\u2604\\uFE0F\",\n    'computer': \"\\uD83D\\uDCBB\",\n    'computer_mouse': \"\\uD83D\\uDDB1\",\n    'confetti_ball': \"\\uD83C\\uDF8A\",\n    'confounded': \"\\uD83D\\uDE16\",\n    'confused': \"\\uD83D\\uDE15\",\n    'congratulations': \"\\u3297\\uFE0F\",\n    'construction': \"\\uD83D\\uDEA7\",\n    'construction_worker_man': \"\\uD83D\\uDC77\",\n    'construction_worker_woman': \"\\uD83D\\uDC77&zwj;\\u2640\\uFE0F\",\n    'control_knobs': \"\\uD83C\\uDF9B\",\n    'convenience_store': \"\\uD83C\\uDFEA\",\n    'cookie': \"\\uD83C\\uDF6A\",\n    'cool': \"\\uD83C\\uDD92\",\n    'policeman': \"\\uD83D\\uDC6E\",\n    'copyright': \"\\xA9\\uFE0F\",\n    'corn': \"\\uD83C\\uDF3D\",\n    'couch_and_lamp': \"\\uD83D\\uDECB\",\n    'couple': \"\\uD83D\\uDC6B\",\n    'couple_with_heart_woman_man': \"\\uD83D\\uDC91\",\n    'couple_with_heart_man_man': \"\\uD83D\\uDC68&zwj;\\u2764\\uFE0F&zwj;\\uD83D\\uDC68\",\n    'couple_with_heart_woman_woman': \"\\uD83D\\uDC69&zwj;\\u2764\\uFE0F&zwj;\\uD83D\\uDC69\",\n    'couplekiss_man_man': \"\\uD83D\\uDC68&zwj;\\u2764\\uFE0F&zwj;\\uD83D\\uDC8B&zwj;\\uD83D\\uDC68\",\n    'couplekiss_man_woman': \"\\uD83D\\uDC8F\",\n    'couplekiss_woman_woman': \"\\uD83D\\uDC69&zwj;\\u2764\\uFE0F&zwj;\\uD83D\\uDC8B&zwj;\\uD83D\\uDC69\",\n    'cow': \"\\uD83D\\uDC2E\",\n    'cow2': \"\\uD83D\\uDC04\",\n    'cowboy_hat_face': \"\\uD83E\\uDD20\",\n    'crab': \"\\uD83E\\uDD80\",\n    'crayon': \"\\uD83D\\uDD8D\",\n    'credit_card': \"\\uD83D\\uDCB3\",\n    'crescent_moon': \"\\uD83C\\uDF19\",\n    'cricket': \"\\uD83C\\uDFCF\",\n    'crocodile': \"\\uD83D\\uDC0A\",\n    'croissant': \"\\uD83E\\uDD50\",\n    'crossed_fingers': \"\\uD83E\\uDD1E\",\n    'crossed_flags': \"\\uD83C\\uDF8C\",\n    'crossed_swords': \"\\u2694\\uFE0F\",\n    'crown': \"\\uD83D\\uDC51\",\n    'cry': \"\\uD83D\\uDE22\",\n    'crying_cat_face': \"\\uD83D\\uDE3F\",\n    'crystal_ball': \"\\uD83D\\uDD2E\",\n    'cucumber': \"\\uD83E\\uDD52\",\n    'cupid': \"\\uD83D\\uDC98\",\n    'curly_loop': \"\\u27B0\",\n    'currency_exchange': \"\\uD83D\\uDCB1\",\n    'curry': \"\\uD83C\\uDF5B\",\n    'custard': \"\\uD83C\\uDF6E\",\n    'customs': \"\\uD83D\\uDEC3\",\n    'cyclone': \"\\uD83C\\uDF00\",\n    'dagger': \"\\uD83D\\uDDE1\",\n    'dancer': \"\\uD83D\\uDC83\",\n    'dancing_women': \"\\uD83D\\uDC6F\",\n    'dancing_men': \"\\uD83D\\uDC6F&zwj;\\u2642\\uFE0F\",\n    'dango': \"\\uD83C\\uDF61\",\n    'dark_sunglasses': \"\\uD83D\\uDD76\",\n    'dart': \"\\uD83C\\uDFAF\",\n    'dash': \"\\uD83D\\uDCA8\",\n    'date': \"\\uD83D\\uDCC5\",\n    'deciduous_tree': \"\\uD83C\\uDF33\",\n    'deer': \"\\uD83E\\uDD8C\",\n    'department_store': \"\\uD83C\\uDFEC\",\n    'derelict_house': \"\\uD83C\\uDFDA\",\n    'desert': \"\\uD83C\\uDFDC\",\n    'desert_island': \"\\uD83C\\uDFDD\",\n    'desktop_computer': \"\\uD83D\\uDDA5\",\n    'male_detective': \"\\uD83D\\uDD75\\uFE0F\",\n    'diamond_shape_with_a_dot_inside': \"\\uD83D\\uDCA0\",\n    'diamonds': \"\\u2666\\uFE0F\",\n    'disappointed': \"\\uD83D\\uDE1E\",\n    'disappointed_relieved': \"\\uD83D\\uDE25\",\n    'dizzy': \"\\uD83D\\uDCAB\",\n    'dizzy_face': \"\\uD83D\\uDE35\",\n    'do_not_litter': \"\\uD83D\\uDEAF\",\n    'dog': \"\\uD83D\\uDC36\",\n    'dog2': \"\\uD83D\\uDC15\",\n    'dollar': \"\\uD83D\\uDCB5\",\n    'dolls': \"\\uD83C\\uDF8E\",\n    'dolphin': \"\\uD83D\\uDC2C\",\n    'door': \"\\uD83D\\uDEAA\",\n    'doughnut': \"\\uD83C\\uDF69\",\n    'dove': \"\\uD83D\\uDD4A\",\n    'dragon': \"\\uD83D\\uDC09\",\n    'dragon_face': \"\\uD83D\\uDC32\",\n    'dress': \"\\uD83D\\uDC57\",\n    'dromedary_camel': \"\\uD83D\\uDC2A\",\n    'drooling_face': \"\\uD83E\\uDD24\",\n    'droplet': \"\\uD83D\\uDCA7\",\n    'drum': \"\\uD83E\\uDD41\",\n    'duck': \"\\uD83E\\uDD86\",\n    'dvd': \"\\uD83D\\uDCC0\",\n    'e-mail': \"\\uD83D\\uDCE7\",\n    'eagle': \"\\uD83E\\uDD85\",\n    'ear': \"\\uD83D\\uDC42\",\n    'ear_of_rice': \"\\uD83C\\uDF3E\",\n    'earth_africa': \"\\uD83C\\uDF0D\",\n    'earth_americas': \"\\uD83C\\uDF0E\",\n    'earth_asia': \"\\uD83C\\uDF0F\",\n    'egg': \"\\uD83E\\uDD5A\",\n    'eggplant': \"\\uD83C\\uDF46\",\n    'eight_pointed_black_star': \"\\u2734\\uFE0F\",\n    'eight_spoked_asterisk': \"\\u2733\\uFE0F\",\n    'electric_plug': \"\\uD83D\\uDD0C\",\n    'elephant': \"\\uD83D\\uDC18\",\n    'email': \"\\u2709\\uFE0F\",\n    'end': \"\\uD83D\\uDD1A\",\n    'envelope_with_arrow': \"\\uD83D\\uDCE9\",\n    'euro': \"\\uD83D\\uDCB6\",\n    'european_castle': \"\\uD83C\\uDFF0\",\n    'european_post_office': \"\\uD83C\\uDFE4\",\n    'evergreen_tree': \"\\uD83C\\uDF32\",\n    'exclamation': \"\\u2757\\uFE0F\",\n    'expressionless': \"\\uD83D\\uDE11\",\n    'eye': \"\\uD83D\\uDC41\",\n    'eye_speech_bubble': \"\\uD83D\\uDC41&zwj;\\uD83D\\uDDE8\",\n    'eyeglasses': \"\\uD83D\\uDC53\",\n    'eyes': \"\\uD83D\\uDC40\",\n    'face_with_head_bandage': \"\\uD83E\\uDD15\",\n    'face_with_thermometer': \"\\uD83E\\uDD12\",\n    'fist_oncoming': \"\\uD83D\\uDC4A\",\n    'factory': \"\\uD83C\\uDFED\",\n    'fallen_leaf': \"\\uD83C\\uDF42\",\n    'family_man_woman_boy': \"\\uD83D\\uDC6A\",\n    'family_man_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC66\",\n    'family_man_boy_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC66&zwj;\\uD83D\\uDC66\",\n    'family_man_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC67\",\n    'family_man_girl_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC66\",\n    'family_man_girl_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC67\",\n    'family_man_man_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC68&zwj;\\uD83D\\uDC66\",\n    'family_man_man_boy_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC68&zwj;\\uD83D\\uDC66&zwj;\\uD83D\\uDC66\",\n    'family_man_man_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC68&zwj;\\uD83D\\uDC67\",\n    'family_man_man_girl_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC68&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC66\",\n    'family_man_man_girl_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC68&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC67\",\n    'family_man_woman_boy_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC66&zwj;\\uD83D\\uDC66\",\n    'family_man_woman_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67\",\n    'family_man_woman_girl_boy': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC66\",\n    'family_man_woman_girl_girl': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC67\",\n    'family_woman_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC66\",\n    'family_woman_boy_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC66&zwj;\\uD83D\\uDC66\",\n    'family_woman_girl': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC67\",\n    'family_woman_girl_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC66\",\n    'family_woman_girl_girl': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC67\",\n    'family_woman_woman_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC66\",\n    'family_woman_woman_boy_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC66&zwj;\\uD83D\\uDC66\",\n    'family_woman_woman_girl': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67\",\n    'family_woman_woman_girl_boy': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC66\",\n    'family_woman_woman_girl_girl': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDC69&zwj;\\uD83D\\uDC67&zwj;\\uD83D\\uDC67\",\n    'fast_forward': \"\\u23E9\",\n    'fax': \"\\uD83D\\uDCE0\",\n    'fearful': \"\\uD83D\\uDE28\",\n    'feet': \"\\uD83D\\uDC3E\",\n    'female_detective': \"\\uD83D\\uDD75\\uFE0F&zwj;\\u2640\\uFE0F\",\n    'ferris_wheel': \"\\uD83C\\uDFA1\",\n    'ferry': \"\\u26F4\",\n    'field_hockey': \"\\uD83C\\uDFD1\",\n    'file_cabinet': \"\\uD83D\\uDDC4\",\n    'file_folder': \"\\uD83D\\uDCC1\",\n    'film_projector': \"\\uD83D\\uDCFD\",\n    'film_strip': \"\\uD83C\\uDF9E\",\n    'fire': \"\\uD83D\\uDD25\",\n    'fire_engine': \"\\uD83D\\uDE92\",\n    'fireworks': \"\\uD83C\\uDF86\",\n    'first_quarter_moon': \"\\uD83C\\uDF13\",\n    'first_quarter_moon_with_face': \"\\uD83C\\uDF1B\",\n    'fish': \"\\uD83D\\uDC1F\",\n    'fish_cake': \"\\uD83C\\uDF65\",\n    'fishing_pole_and_fish': \"\\uD83C\\uDFA3\",\n    'fist_raised': \"\\u270A\",\n    'fist_left': \"\\uD83E\\uDD1B\",\n    'fist_right': \"\\uD83E\\uDD1C\",\n    'flags': \"\\uD83C\\uDF8F\",\n    'flashlight': \"\\uD83D\\uDD26\",\n    'fleur_de_lis': \"\\u269C\\uFE0F\",\n    'flight_arrival': \"\\uD83D\\uDEEC\",\n    'flight_departure': \"\\uD83D\\uDEEB\",\n    'floppy_disk': \"\\uD83D\\uDCBE\",\n    'flower_playing_cards': \"\\uD83C\\uDFB4\",\n    'flushed': \"\\uD83D\\uDE33\",\n    'fog': \"\\uD83C\\uDF2B\",\n    'foggy': \"\\uD83C\\uDF01\",\n    'football': \"\\uD83C\\uDFC8\",\n    'footprints': \"\\uD83D\\uDC63\",\n    'fork_and_knife': \"\\uD83C\\uDF74\",\n    'fountain': \"\\u26F2\\uFE0F\",\n    'fountain_pen': \"\\uD83D\\uDD8B\",\n    'four_leaf_clover': \"\\uD83C\\uDF40\",\n    'fox_face': \"\\uD83E\\uDD8A\",\n    'framed_picture': \"\\uD83D\\uDDBC\",\n    'free': \"\\uD83C\\uDD93\",\n    'fried_egg': \"\\uD83C\\uDF73\",\n    'fried_shrimp': \"\\uD83C\\uDF64\",\n    'fries': \"\\uD83C\\uDF5F\",\n    'frog': \"\\uD83D\\uDC38\",\n    'frowning': \"\\uD83D\\uDE26\",\n    'frowning_face': \"\\u2639\\uFE0F\",\n    'frowning_man': \"\\uD83D\\uDE4D&zwj;\\u2642\\uFE0F\",\n    'frowning_woman': \"\\uD83D\\uDE4D\",\n    'middle_finger': \"\\uD83D\\uDD95\",\n    'fuelpump': \"\\u26FD\\uFE0F\",\n    'full_moon': \"\\uD83C\\uDF15\",\n    'full_moon_with_face': \"\\uD83C\\uDF1D\",\n    'funeral_urn': \"\\u26B1\\uFE0F\",\n    'game_die': \"\\uD83C\\uDFB2\",\n    'gear': \"\\u2699\\uFE0F\",\n    'gem': \"\\uD83D\\uDC8E\",\n    'gemini': \"\\u264A\\uFE0F\",\n    'ghost': \"\\uD83D\\uDC7B\",\n    'gift': \"\\uD83C\\uDF81\",\n    'gift_heart': \"\\uD83D\\uDC9D\",\n    'girl': \"\\uD83D\\uDC67\",\n    'globe_with_meridians': \"\\uD83C\\uDF10\",\n    'goal_net': \"\\uD83E\\uDD45\",\n    'goat': \"\\uD83D\\uDC10\",\n    'golf': \"\\u26F3\\uFE0F\",\n    'golfing_man': \"\\uD83C\\uDFCC\\uFE0F\",\n    'golfing_woman': \"\\uD83C\\uDFCC\\uFE0F&zwj;\\u2640\\uFE0F\",\n    'gorilla': \"\\uD83E\\uDD8D\",\n    'grapes': \"\\uD83C\\uDF47\",\n    'green_apple': \"\\uD83C\\uDF4F\",\n    'green_book': \"\\uD83D\\uDCD7\",\n    'green_heart': \"\\uD83D\\uDC9A\",\n    'green_salad': \"\\uD83E\\uDD57\",\n    'grey_exclamation': \"\\u2755\",\n    'grey_question': \"\\u2754\",\n    'grimacing': \"\\uD83D\\uDE2C\",\n    'grin': \"\\uD83D\\uDE01\",\n    'grinning': \"\\uD83D\\uDE00\",\n    'guardsman': \"\\uD83D\\uDC82\",\n    'guardswoman': \"\\uD83D\\uDC82&zwj;\\u2640\\uFE0F\",\n    'guitar': \"\\uD83C\\uDFB8\",\n    'gun': \"\\uD83D\\uDD2B\",\n    'haircut_woman': \"\\uD83D\\uDC87\",\n    'haircut_man': \"\\uD83D\\uDC87&zwj;\\u2642\\uFE0F\",\n    'hamburger': \"\\uD83C\\uDF54\",\n    'hammer': \"\\uD83D\\uDD28\",\n    'hammer_and_pick': \"\\u2692\",\n    'hammer_and_wrench': \"\\uD83D\\uDEE0\",\n    'hamster': \"\\uD83D\\uDC39\",\n    'hand': \"\\u270B\",\n    'handbag': \"\\uD83D\\uDC5C\",\n    'handshake': \"\\uD83E\\uDD1D\",\n    'hankey': \"\\uD83D\\uDCA9\",\n    'hatched_chick': \"\\uD83D\\uDC25\",\n    'hatching_chick': \"\\uD83D\\uDC23\",\n    'headphones': \"\\uD83C\\uDFA7\",\n    'hear_no_evil': \"\\uD83D\\uDE49\",\n    'heart': \"\\u2764\\uFE0F\",\n    'heart_decoration': \"\\uD83D\\uDC9F\",\n    'heart_eyes': \"\\uD83D\\uDE0D\",\n    'heart_eyes_cat': \"\\uD83D\\uDE3B\",\n    'heartbeat': \"\\uD83D\\uDC93\",\n    'heartpulse': \"\\uD83D\\uDC97\",\n    'hearts': \"\\u2665\\uFE0F\",\n    'heavy_check_mark': \"\\u2714\\uFE0F\",\n    'heavy_division_sign': \"\\u2797\",\n    'heavy_dollar_sign': \"\\uD83D\\uDCB2\",\n    'heavy_heart_exclamation': \"\\u2763\\uFE0F\",\n    'heavy_minus_sign': \"\\u2796\",\n    'heavy_multiplication_x': \"\\u2716\\uFE0F\",\n    'heavy_plus_sign': \"\\u2795\",\n    'helicopter': \"\\uD83D\\uDE81\",\n    'herb': \"\\uD83C\\uDF3F\",\n    'hibiscus': \"\\uD83C\\uDF3A\",\n    'high_brightness': \"\\uD83D\\uDD06\",\n    'high_heel': \"\\uD83D\\uDC60\",\n    'hocho': \"\\uD83D\\uDD2A\",\n    'hole': \"\\uD83D\\uDD73\",\n    'honey_pot': \"\\uD83C\\uDF6F\",\n    'horse': \"\\uD83D\\uDC34\",\n    'horse_racing': \"\\uD83C\\uDFC7\",\n    'hospital': \"\\uD83C\\uDFE5\",\n    'hot_pepper': \"\\uD83C\\uDF36\",\n    'hotdog': \"\\uD83C\\uDF2D\",\n    'hotel': \"\\uD83C\\uDFE8\",\n    'hotsprings': \"\\u2668\\uFE0F\",\n    'hourglass': \"\\u231B\\uFE0F\",\n    'hourglass_flowing_sand': \"\\u23F3\",\n    'house': \"\\uD83C\\uDFE0\",\n    'house_with_garden': \"\\uD83C\\uDFE1\",\n    'houses': \"\\uD83C\\uDFD8\",\n    'hugs': \"\\uD83E\\uDD17\",\n    'hushed': \"\\uD83D\\uDE2F\",\n    'ice_cream': \"\\uD83C\\uDF68\",\n    'ice_hockey': \"\\uD83C\\uDFD2\",\n    'ice_skate': \"\\u26F8\",\n    'icecream': \"\\uD83C\\uDF66\",\n    'id': \"\\uD83C\\uDD94\",\n    'ideograph_advantage': \"\\uD83C\\uDE50\",\n    'imp': \"\\uD83D\\uDC7F\",\n    'inbox_tray': \"\\uD83D\\uDCE5\",\n    'incoming_envelope': \"\\uD83D\\uDCE8\",\n    'tipping_hand_woman': \"\\uD83D\\uDC81\",\n    'information_source': \"\\u2139\\uFE0F\",\n    'innocent': \"\\uD83D\\uDE07\",\n    'interrobang': \"\\u2049\\uFE0F\",\n    'iphone': \"\\uD83D\\uDCF1\",\n    'izakaya_lantern': \"\\uD83C\\uDFEE\",\n    'jack_o_lantern': \"\\uD83C\\uDF83\",\n    'japan': \"\\uD83D\\uDDFE\",\n    'japanese_castle': \"\\uD83C\\uDFEF\",\n    'japanese_goblin': \"\\uD83D\\uDC7A\",\n    'japanese_ogre': \"\\uD83D\\uDC79\",\n    'jeans': \"\\uD83D\\uDC56\",\n    'joy': \"\\uD83D\\uDE02\",\n    'joy_cat': \"\\uD83D\\uDE39\",\n    'joystick': \"\\uD83D\\uDD79\",\n    'kaaba': \"\\uD83D\\uDD4B\",\n    'key': \"\\uD83D\\uDD11\",\n    'keyboard': \"\\u2328\\uFE0F\",\n    'keycap_ten': \"\\uD83D\\uDD1F\",\n    'kick_scooter': \"\\uD83D\\uDEF4\",\n    'kimono': \"\\uD83D\\uDC58\",\n    'kiss': \"\\uD83D\\uDC8B\",\n    'kissing': \"\\uD83D\\uDE17\",\n    'kissing_cat': \"\\uD83D\\uDE3D\",\n    'kissing_closed_eyes': \"\\uD83D\\uDE1A\",\n    'kissing_heart': \"\\uD83D\\uDE18\",\n    'kissing_smiling_eyes': \"\\uD83D\\uDE19\",\n    'kiwi_fruit': \"\\uD83E\\uDD5D\",\n    'koala': \"\\uD83D\\uDC28\",\n    'koko': \"\\uD83C\\uDE01\",\n    'label': \"\\uD83C\\uDFF7\",\n    'large_blue_circle': \"\\uD83D\\uDD35\",\n    'large_blue_diamond': \"\\uD83D\\uDD37\",\n    'large_orange_diamond': \"\\uD83D\\uDD36\",\n    'last_quarter_moon': \"\\uD83C\\uDF17\",\n    'last_quarter_moon_with_face': \"\\uD83C\\uDF1C\",\n    'latin_cross': \"\\u271D\\uFE0F\",\n    'laughing': \"\\uD83D\\uDE06\",\n    'leaves': \"\\uD83C\\uDF43\",\n    'ledger': \"\\uD83D\\uDCD2\",\n    'left_luggage': \"\\uD83D\\uDEC5\",\n    'left_right_arrow': \"\\u2194\\uFE0F\",\n    'leftwards_arrow_with_hook': \"\\u21A9\\uFE0F\",\n    'lemon': \"\\uD83C\\uDF4B\",\n    'leo': \"\\u264C\\uFE0F\",\n    'leopard': \"\\uD83D\\uDC06\",\n    'level_slider': \"\\uD83C\\uDF9A\",\n    'libra': \"\\u264E\\uFE0F\",\n    'light_rail': \"\\uD83D\\uDE88\",\n    'link': \"\\uD83D\\uDD17\",\n    'lion': \"\\uD83E\\uDD81\",\n    'lips': \"\\uD83D\\uDC44\",\n    'lipstick': \"\\uD83D\\uDC84\",\n    'lizard': \"\\uD83E\\uDD8E\",\n    'lock': \"\\uD83D\\uDD12\",\n    'lock_with_ink_pen': \"\\uD83D\\uDD0F\",\n    'lollipop': \"\\uD83C\\uDF6D\",\n    'loop': \"\\u27BF\",\n    'loud_sound': \"\\uD83D\\uDD0A\",\n    'loudspeaker': \"\\uD83D\\uDCE2\",\n    'love_hotel': \"\\uD83C\\uDFE9\",\n    'love_letter': \"\\uD83D\\uDC8C\",\n    'low_brightness': \"\\uD83D\\uDD05\",\n    'lying_face': \"\\uD83E\\uDD25\",\n    'm': \"\\u24C2\\uFE0F\",\n    'mag': \"\\uD83D\\uDD0D\",\n    'mag_right': \"\\uD83D\\uDD0E\",\n    'mahjong': \"\\uD83C\\uDC04\\uFE0F\",\n    'mailbox': \"\\uD83D\\uDCEB\",\n    'mailbox_closed': \"\\uD83D\\uDCEA\",\n    'mailbox_with_mail': \"\\uD83D\\uDCEC\",\n    'mailbox_with_no_mail': \"\\uD83D\\uDCED\",\n    'man': \"\\uD83D\\uDC68\",\n    'man_artist': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDFA8\",\n    'man_astronaut': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDE80\",\n    'man_cartwheeling': \"\\uD83E\\uDD38&zwj;\\u2642\\uFE0F\",\n    'man_cook': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDF73\",\n    'man_dancing': \"\\uD83D\\uDD7A\",\n    'man_facepalming': \"\\uD83E\\uDD26&zwj;\\u2642\\uFE0F\",\n    'man_factory_worker': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDFED\",\n    'man_farmer': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDF3E\",\n    'man_firefighter': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDE92\",\n    'man_health_worker': \"\\uD83D\\uDC68&zwj;\\u2695\\uFE0F\",\n    'man_in_tuxedo': \"\\uD83E\\uDD35\",\n    'man_judge': \"\\uD83D\\uDC68&zwj;\\u2696\\uFE0F\",\n    'man_juggling': \"\\uD83E\\uDD39&zwj;\\u2642\\uFE0F\",\n    'man_mechanic': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDD27\",\n    'man_office_worker': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDCBC\",\n    'man_pilot': \"\\uD83D\\uDC68&zwj;\\u2708\\uFE0F\",\n    'man_playing_handball': \"\\uD83E\\uDD3E&zwj;\\u2642\\uFE0F\",\n    'man_playing_water_polo': \"\\uD83E\\uDD3D&zwj;\\u2642\\uFE0F\",\n    'man_scientist': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDD2C\",\n    'man_shrugging': \"\\uD83E\\uDD37&zwj;\\u2642\\uFE0F\",\n    'man_singer': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDFA4\",\n    'man_student': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDF93\",\n    'man_teacher': \"\\uD83D\\uDC68&zwj;\\uD83C\\uDFEB\",\n    'man_technologist': \"\\uD83D\\uDC68&zwj;\\uD83D\\uDCBB\",\n    'man_with_gua_pi_mao': \"\\uD83D\\uDC72\",\n    'man_with_turban': \"\\uD83D\\uDC73\",\n    'tangerine': \"\\uD83C\\uDF4A\",\n    'mans_shoe': \"\\uD83D\\uDC5E\",\n    'mantelpiece_clock': \"\\uD83D\\uDD70\",\n    'maple_leaf': \"\\uD83C\\uDF41\",\n    'martial_arts_uniform': \"\\uD83E\\uDD4B\",\n    'mask': \"\\uD83D\\uDE37\",\n    'massage_woman': \"\\uD83D\\uDC86\",\n    'massage_man': \"\\uD83D\\uDC86&zwj;\\u2642\\uFE0F\",\n    'meat_on_bone': \"\\uD83C\\uDF56\",\n    'medal_military': \"\\uD83C\\uDF96\",\n    'medal_sports': \"\\uD83C\\uDFC5\",\n    'mega': \"\\uD83D\\uDCE3\",\n    'melon': \"\\uD83C\\uDF48\",\n    'memo': \"\\uD83D\\uDCDD\",\n    'men_wrestling': \"\\uD83E\\uDD3C&zwj;\\u2642\\uFE0F\",\n    'menorah': \"\\uD83D\\uDD4E\",\n    'mens': \"\\uD83D\\uDEB9\",\n    'metal': \"\\uD83E\\uDD18\",\n    'metro': \"\\uD83D\\uDE87\",\n    'microphone': \"\\uD83C\\uDFA4\",\n    'microscope': \"\\uD83D\\uDD2C\",\n    'milk_glass': \"\\uD83E\\uDD5B\",\n    'milky_way': \"\\uD83C\\uDF0C\",\n    'minibus': \"\\uD83D\\uDE90\",\n    'minidisc': \"\\uD83D\\uDCBD\",\n    'mobile_phone_off': \"\\uD83D\\uDCF4\",\n    'money_mouth_face': \"\\uD83E\\uDD11\",\n    'money_with_wings': \"\\uD83D\\uDCB8\",\n    'moneybag': \"\\uD83D\\uDCB0\",\n    'monkey': \"\\uD83D\\uDC12\",\n    'monkey_face': \"\\uD83D\\uDC35\",\n    'monorail': \"\\uD83D\\uDE9D\",\n    'moon': \"\\uD83C\\uDF14\",\n    'mortar_board': \"\\uD83C\\uDF93\",\n    'mosque': \"\\uD83D\\uDD4C\",\n    'motor_boat': \"\\uD83D\\uDEE5\",\n    'motor_scooter': \"\\uD83D\\uDEF5\",\n    'motorcycle': \"\\uD83C\\uDFCD\",\n    'motorway': \"\\uD83D\\uDEE3\",\n    'mount_fuji': \"\\uD83D\\uDDFB\",\n    'mountain': \"\\u26F0\",\n    'mountain_biking_man': \"\\uD83D\\uDEB5\",\n    'mountain_biking_woman': \"\\uD83D\\uDEB5&zwj;\\u2640\\uFE0F\",\n    'mountain_cableway': \"\\uD83D\\uDEA0\",\n    'mountain_railway': \"\\uD83D\\uDE9E\",\n    'mountain_snow': \"\\uD83C\\uDFD4\",\n    'mouse': \"\\uD83D\\uDC2D\",\n    'mouse2': \"\\uD83D\\uDC01\",\n    'movie_camera': \"\\uD83C\\uDFA5\",\n    'moyai': \"\\uD83D\\uDDFF\",\n    'mrs_claus': \"\\uD83E\\uDD36\",\n    'muscle': \"\\uD83D\\uDCAA\",\n    'mushroom': \"\\uD83C\\uDF44\",\n    'musical_keyboard': \"\\uD83C\\uDFB9\",\n    'musical_note': \"\\uD83C\\uDFB5\",\n    'musical_score': \"\\uD83C\\uDFBC\",\n    'mute': \"\\uD83D\\uDD07\",\n    'nail_care': \"\\uD83D\\uDC85\",\n    'name_badge': \"\\uD83D\\uDCDB\",\n    'national_park': \"\\uD83C\\uDFDE\",\n    'nauseated_face': \"\\uD83E\\uDD22\",\n    'necktie': \"\\uD83D\\uDC54\",\n    'negative_squared_cross_mark': \"\\u274E\",\n    'nerd_face': \"\\uD83E\\uDD13\",\n    'neutral_face': \"\\uD83D\\uDE10\",\n    'new': \"\\uD83C\\uDD95\",\n    'new_moon': \"\\uD83C\\uDF11\",\n    'new_moon_with_face': \"\\uD83C\\uDF1A\",\n    'newspaper': \"\\uD83D\\uDCF0\",\n    'newspaper_roll': \"\\uD83D\\uDDDE\",\n    'next_track_button': \"\\u23ED\",\n    'ng': \"\\uD83C\\uDD96\",\n    'no_good_man': \"\\uD83D\\uDE45&zwj;\\u2642\\uFE0F\",\n    'no_good_woman': \"\\uD83D\\uDE45\",\n    'night_with_stars': \"\\uD83C\\uDF03\",\n    'no_bell': \"\\uD83D\\uDD15\",\n    'no_bicycles': \"\\uD83D\\uDEB3\",\n    'no_entry': \"\\u26D4\\uFE0F\",\n    'no_entry_sign': \"\\uD83D\\uDEAB\",\n    'no_mobile_phones': \"\\uD83D\\uDCF5\",\n    'no_mouth': \"\\uD83D\\uDE36\",\n    'no_pedestrians': \"\\uD83D\\uDEB7\",\n    'no_smoking': \"\\uD83D\\uDEAD\",\n    'non-potable_water': \"\\uD83D\\uDEB1\",\n    'nose': \"\\uD83D\\uDC43\",\n    'notebook': \"\\uD83D\\uDCD3\",\n    'notebook_with_decorative_cover': \"\\uD83D\\uDCD4\",\n    'notes': \"\\uD83C\\uDFB6\",\n    'nut_and_bolt': \"\\uD83D\\uDD29\",\n    'o': \"\\u2B55\\uFE0F\",\n    'o2': \"\\uD83C\\uDD7E\\uFE0F\",\n    'ocean': \"\\uD83C\\uDF0A\",\n    'octopus': \"\\uD83D\\uDC19\",\n    'oden': \"\\uD83C\\uDF62\",\n    'office': \"\\uD83C\\uDFE2\",\n    'oil_drum': \"\\uD83D\\uDEE2\",\n    'ok': \"\\uD83C\\uDD97\",\n    'ok_hand': \"\\uD83D\\uDC4C\",\n    'ok_man': \"\\uD83D\\uDE46&zwj;\\u2642\\uFE0F\",\n    'ok_woman': \"\\uD83D\\uDE46\",\n    'old_key': \"\\uD83D\\uDDDD\",\n    'older_man': \"\\uD83D\\uDC74\",\n    'older_woman': \"\\uD83D\\uDC75\",\n    'om': \"\\uD83D\\uDD49\",\n    'on': \"\\uD83D\\uDD1B\",\n    'oncoming_automobile': \"\\uD83D\\uDE98\",\n    'oncoming_bus': \"\\uD83D\\uDE8D\",\n    'oncoming_police_car': \"\\uD83D\\uDE94\",\n    'oncoming_taxi': \"\\uD83D\\uDE96\",\n    'open_file_folder': \"\\uD83D\\uDCC2\",\n    'open_hands': \"\\uD83D\\uDC50\",\n    'open_mouth': \"\\uD83D\\uDE2E\",\n    'open_umbrella': \"\\u2602\\uFE0F\",\n    'ophiuchus': \"\\u26CE\",\n    'orange_book': \"\\uD83D\\uDCD9\",\n    'orthodox_cross': \"\\u2626\\uFE0F\",\n    'outbox_tray': \"\\uD83D\\uDCE4\",\n    'owl': \"\\uD83E\\uDD89\",\n    'ox': \"\\uD83D\\uDC02\",\n    'package': \"\\uD83D\\uDCE6\",\n    'page_facing_up': \"\\uD83D\\uDCC4\",\n    'page_with_curl': \"\\uD83D\\uDCC3\",\n    'pager': \"\\uD83D\\uDCDF\",\n    'paintbrush': \"\\uD83D\\uDD8C\",\n    'palm_tree': \"\\uD83C\\uDF34\",\n    'pancakes': \"\\uD83E\\uDD5E\",\n    'panda_face': \"\\uD83D\\uDC3C\",\n    'paperclip': \"\\uD83D\\uDCCE\",\n    'paperclips': \"\\uD83D\\uDD87\",\n    'parasol_on_ground': \"\\u26F1\",\n    'parking': \"\\uD83C\\uDD7F\\uFE0F\",\n    'part_alternation_mark': \"\\u303D\\uFE0F\",\n    'partly_sunny': \"\\u26C5\\uFE0F\",\n    'passenger_ship': \"\\uD83D\\uDEF3\",\n    'passport_control': \"\\uD83D\\uDEC2\",\n    'pause_button': \"\\u23F8\",\n    'peace_symbol': \"\\u262E\\uFE0F\",\n    'peach': \"\\uD83C\\uDF51\",\n    'peanuts': \"\\uD83E\\uDD5C\",\n    'pear': \"\\uD83C\\uDF50\",\n    'pen': \"\\uD83D\\uDD8A\",\n    'pencil2': \"\\u270F\\uFE0F\",\n    'penguin': \"\\uD83D\\uDC27\",\n    'pensive': \"\\uD83D\\uDE14\",\n    'performing_arts': \"\\uD83C\\uDFAD\",\n    'persevere': \"\\uD83D\\uDE23\",\n    'person_fencing': \"\\uD83E\\uDD3A\",\n    'pouting_woman': \"\\uD83D\\uDE4E\",\n    'phone': \"\\u260E\\uFE0F\",\n    'pick': \"\\u26CF\",\n    'pig': \"\\uD83D\\uDC37\",\n    'pig2': \"\\uD83D\\uDC16\",\n    'pig_nose': \"\\uD83D\\uDC3D\",\n    'pill': \"\\uD83D\\uDC8A\",\n    'pineapple': \"\\uD83C\\uDF4D\",\n    'ping_pong': \"\\uD83C\\uDFD3\",\n    'pisces': \"\\u2653\\uFE0F\",\n    'pizza': \"\\uD83C\\uDF55\",\n    'place_of_worship': \"\\uD83D\\uDED0\",\n    'plate_with_cutlery': \"\\uD83C\\uDF7D\",\n    'play_or_pause_button': \"\\u23EF\",\n    'point_down': \"\\uD83D\\uDC47\",\n    'point_left': \"\\uD83D\\uDC48\",\n    'point_right': \"\\uD83D\\uDC49\",\n    'point_up': \"\\u261D\\uFE0F\",\n    'point_up_2': \"\\uD83D\\uDC46\",\n    'police_car': \"\\uD83D\\uDE93\",\n    'policewoman': \"\\uD83D\\uDC6E&zwj;\\u2640\\uFE0F\",\n    'poodle': \"\\uD83D\\uDC29\",\n    'popcorn': \"\\uD83C\\uDF7F\",\n    'post_office': \"\\uD83C\\uDFE3\",\n    'postal_horn': \"\\uD83D\\uDCEF\",\n    'postbox': \"\\uD83D\\uDCEE\",\n    'potable_water': \"\\uD83D\\uDEB0\",\n    'potato': \"\\uD83E\\uDD54\",\n    'pouch': \"\\uD83D\\uDC5D\",\n    'poultry_leg': \"\\uD83C\\uDF57\",\n    'pound': \"\\uD83D\\uDCB7\",\n    'rage': \"\\uD83D\\uDE21\",\n    'pouting_cat': \"\\uD83D\\uDE3E\",\n    'pouting_man': \"\\uD83D\\uDE4E&zwj;\\u2642\\uFE0F\",\n    'pray': \"\\uD83D\\uDE4F\",\n    'prayer_beads': \"\\uD83D\\uDCFF\",\n    'pregnant_woman': \"\\uD83E\\uDD30\",\n    'previous_track_button': \"\\u23EE\",\n    'prince': \"\\uD83E\\uDD34\",\n    'princess': \"\\uD83D\\uDC78\",\n    'printer': \"\\uD83D\\uDDA8\",\n    'purple_heart': \"\\uD83D\\uDC9C\",\n    'purse': \"\\uD83D\\uDC5B\",\n    'pushpin': \"\\uD83D\\uDCCC\",\n    'put_litter_in_its_place': \"\\uD83D\\uDEAE\",\n    'question': \"\\u2753\",\n    'rabbit': \"\\uD83D\\uDC30\",\n    'rabbit2': \"\\uD83D\\uDC07\",\n    'racehorse': \"\\uD83D\\uDC0E\",\n    'racing_car': \"\\uD83C\\uDFCE\",\n    'radio': \"\\uD83D\\uDCFB\",\n    'radio_button': \"\\uD83D\\uDD18\",\n    'radioactive': \"\\u2622\\uFE0F\",\n    'railway_car': \"\\uD83D\\uDE83\",\n    'railway_track': \"\\uD83D\\uDEE4\",\n    'rainbow': \"\\uD83C\\uDF08\",\n    'rainbow_flag': \"\\uD83C\\uDFF3\\uFE0F&zwj;\\uD83C\\uDF08\",\n    'raised_back_of_hand': \"\\uD83E\\uDD1A\",\n    'raised_hand_with_fingers_splayed': \"\\uD83D\\uDD90\",\n    'raised_hands': \"\\uD83D\\uDE4C\",\n    'raising_hand_woman': \"\\uD83D\\uDE4B\",\n    'raising_hand_man': \"\\uD83D\\uDE4B&zwj;\\u2642\\uFE0F\",\n    'ram': \"\\uD83D\\uDC0F\",\n    'ramen': \"\\uD83C\\uDF5C\",\n    'rat': \"\\uD83D\\uDC00\",\n    'record_button': \"\\u23FA\",\n    'recycle': \"\\u267B\\uFE0F\",\n    'red_circle': \"\\uD83D\\uDD34\",\n    'registered': \"\\xAE\\uFE0F\",\n    'relaxed': \"\\u263A\\uFE0F\",\n    'relieved': \"\\uD83D\\uDE0C\",\n    'reminder_ribbon': \"\\uD83C\\uDF97\",\n    'repeat': \"\\uD83D\\uDD01\",\n    'repeat_one': \"\\uD83D\\uDD02\",\n    'rescue_worker_helmet': \"\\u26D1\",\n    'restroom': \"\\uD83D\\uDEBB\",\n    'revolving_hearts': \"\\uD83D\\uDC9E\",\n    'rewind': \"\\u23EA\",\n    'rhinoceros': \"\\uD83E\\uDD8F\",\n    'ribbon': \"\\uD83C\\uDF80\",\n    'rice': \"\\uD83C\\uDF5A\",\n    'rice_ball': \"\\uD83C\\uDF59\",\n    'rice_cracker': \"\\uD83C\\uDF58\",\n    'rice_scene': \"\\uD83C\\uDF91\",\n    'right_anger_bubble': \"\\uD83D\\uDDEF\",\n    'ring': \"\\uD83D\\uDC8D\",\n    'robot': \"\\uD83E\\uDD16\",\n    'rocket': \"\\uD83D\\uDE80\",\n    'rofl': \"\\uD83E\\uDD23\",\n    'roll_eyes': \"\\uD83D\\uDE44\",\n    'roller_coaster': \"\\uD83C\\uDFA2\",\n    'rooster': \"\\uD83D\\uDC13\",\n    'rose': \"\\uD83C\\uDF39\",\n    'rosette': \"\\uD83C\\uDFF5\",\n    'rotating_light': \"\\uD83D\\uDEA8\",\n    'round_pushpin': \"\\uD83D\\uDCCD\",\n    'rowing_man': \"\\uD83D\\uDEA3\",\n    'rowing_woman': \"\\uD83D\\uDEA3&zwj;\\u2640\\uFE0F\",\n    'rugby_football': \"\\uD83C\\uDFC9\",\n    'running_man': \"\\uD83C\\uDFC3\",\n    'running_shirt_with_sash': \"\\uD83C\\uDFBD\",\n    'running_woman': \"\\uD83C\\uDFC3&zwj;\\u2640\\uFE0F\",\n    'sa': \"\\uD83C\\uDE02\\uFE0F\",\n    'sagittarius': \"\\u2650\\uFE0F\",\n    'sake': \"\\uD83C\\uDF76\",\n    'sandal': \"\\uD83D\\uDC61\",\n    'santa': \"\\uD83C\\uDF85\",\n    'satellite': \"\\uD83D\\uDCE1\",\n    'saxophone': \"\\uD83C\\uDFB7\",\n    'school': \"\\uD83C\\uDFEB\",\n    'school_satchel': \"\\uD83C\\uDF92\",\n    'scissors': \"\\u2702\\uFE0F\",\n    'scorpion': \"\\uD83E\\uDD82\",\n    'scorpius': \"\\u264F\\uFE0F\",\n    'scream': \"\\uD83D\\uDE31\",\n    'scream_cat': \"\\uD83D\\uDE40\",\n    'scroll': \"\\uD83D\\uDCDC\",\n    'seat': \"\\uD83D\\uDCBA\",\n    'secret': \"\\u3299\\uFE0F\",\n    'see_no_evil': \"\\uD83D\\uDE48\",\n    'seedling': \"\\uD83C\\uDF31\",\n    'selfie': \"\\uD83E\\uDD33\",\n    'shallow_pan_of_food': \"\\uD83E\\uDD58\",\n    'shamrock': \"\\u2618\\uFE0F\",\n    'shark': \"\\uD83E\\uDD88\",\n    'shaved_ice': \"\\uD83C\\uDF67\",\n    'sheep': \"\\uD83D\\uDC11\",\n    'shell': \"\\uD83D\\uDC1A\",\n    'shield': \"\\uD83D\\uDEE1\",\n    'shinto_shrine': \"\\u26E9\",\n    'ship': \"\\uD83D\\uDEA2\",\n    'shirt': \"\\uD83D\\uDC55\",\n    'shopping': \"\\uD83D\\uDECD\",\n    'shopping_cart': \"\\uD83D\\uDED2\",\n    'shower': \"\\uD83D\\uDEBF\",\n    'shrimp': \"\\uD83E\\uDD90\",\n    'signal_strength': \"\\uD83D\\uDCF6\",\n    'six_pointed_star': \"\\uD83D\\uDD2F\",\n    'ski': \"\\uD83C\\uDFBF\",\n    'skier': \"\\u26F7\",\n    'skull': \"\\uD83D\\uDC80\",\n    'skull_and_crossbones': \"\\u2620\\uFE0F\",\n    'sleeping': \"\\uD83D\\uDE34\",\n    'sleeping_bed': \"\\uD83D\\uDECC\",\n    'sleepy': \"\\uD83D\\uDE2A\",\n    'slightly_frowning_face': \"\\uD83D\\uDE41\",\n    'slightly_smiling_face': \"\\uD83D\\uDE42\",\n    'slot_machine': \"\\uD83C\\uDFB0\",\n    'small_airplane': \"\\uD83D\\uDEE9\",\n    'small_blue_diamond': \"\\uD83D\\uDD39\",\n    'small_orange_diamond': \"\\uD83D\\uDD38\",\n    'small_red_triangle': \"\\uD83D\\uDD3A\",\n    'small_red_triangle_down': \"\\uD83D\\uDD3B\",\n    'smile': \"\\uD83D\\uDE04\",\n    'smile_cat': \"\\uD83D\\uDE38\",\n    'smiley': \"\\uD83D\\uDE03\",\n    'smiley_cat': \"\\uD83D\\uDE3A\",\n    'smiling_imp': \"\\uD83D\\uDE08\",\n    'smirk': \"\\uD83D\\uDE0F\",\n    'smirk_cat': \"\\uD83D\\uDE3C\",\n    'smoking': \"\\uD83D\\uDEAC\",\n    'snail': \"\\uD83D\\uDC0C\",\n    'snake': \"\\uD83D\\uDC0D\",\n    'sneezing_face': \"\\uD83E\\uDD27\",\n    'snowboarder': \"\\uD83C\\uDFC2\",\n    'snowflake': \"\\u2744\\uFE0F\",\n    'snowman': \"\\u26C4\\uFE0F\",\n    'snowman_with_snow': \"\\u2603\\uFE0F\",\n    'sob': \"\\uD83D\\uDE2D\",\n    'soccer': \"\\u26BD\\uFE0F\",\n    'soon': \"\\uD83D\\uDD1C\",\n    'sos': \"\\uD83C\\uDD98\",\n    'sound': \"\\uD83D\\uDD09\",\n    'space_invader': \"\\uD83D\\uDC7E\",\n    'spades': \"\\u2660\\uFE0F\",\n    'spaghetti': \"\\uD83C\\uDF5D\",\n    'sparkle': \"\\u2747\\uFE0F\",\n    'sparkler': \"\\uD83C\\uDF87\",\n    'sparkles': \"\\u2728\",\n    'sparkling_heart': \"\\uD83D\\uDC96\",\n    'speak_no_evil': \"\\uD83D\\uDE4A\",\n    'speaker': \"\\uD83D\\uDD08\",\n    'speaking_head': \"\\uD83D\\uDDE3\",\n    'speech_balloon': \"\\uD83D\\uDCAC\",\n    'speedboat': \"\\uD83D\\uDEA4\",\n    'spider': \"\\uD83D\\uDD77\",\n    'spider_web': \"\\uD83D\\uDD78\",\n    'spiral_calendar': \"\\uD83D\\uDDD3\",\n    'spiral_notepad': \"\\uD83D\\uDDD2\",\n    'spoon': \"\\uD83E\\uDD44\",\n    'squid': \"\\uD83E\\uDD91\",\n    'stadium': \"\\uD83C\\uDFDF\",\n    'star': \"\\u2B50\\uFE0F\",\n    'star2': \"\\uD83C\\uDF1F\",\n    'star_and_crescent': \"\\u262A\\uFE0F\",\n    'star_of_david': \"\\u2721\\uFE0F\",\n    'stars': \"\\uD83C\\uDF20\",\n    'station': \"\\uD83D\\uDE89\",\n    'statue_of_liberty': \"\\uD83D\\uDDFD\",\n    'steam_locomotive': \"\\uD83D\\uDE82\",\n    'stew': \"\\uD83C\\uDF72\",\n    'stop_button': \"\\u23F9\",\n    'stop_sign': \"\\uD83D\\uDED1\",\n    'stopwatch': \"\\u23F1\",\n    'straight_ruler': \"\\uD83D\\uDCCF\",\n    'strawberry': \"\\uD83C\\uDF53\",\n    'stuck_out_tongue': \"\\uD83D\\uDE1B\",\n    'stuck_out_tongue_closed_eyes': \"\\uD83D\\uDE1D\",\n    'stuck_out_tongue_winking_eye': \"\\uD83D\\uDE1C\",\n    'studio_microphone': \"\\uD83C\\uDF99\",\n    'stuffed_flatbread': \"\\uD83E\\uDD59\",\n    'sun_behind_large_cloud': \"\\uD83C\\uDF25\",\n    'sun_behind_rain_cloud': \"\\uD83C\\uDF26\",\n    'sun_behind_small_cloud': \"\\uD83C\\uDF24\",\n    'sun_with_face': \"\\uD83C\\uDF1E\",\n    'sunflower': \"\\uD83C\\uDF3B\",\n    'sunglasses': \"\\uD83D\\uDE0E\",\n    'sunny': \"\\u2600\\uFE0F\",\n    'sunrise': \"\\uD83C\\uDF05\",\n    'sunrise_over_mountains': \"\\uD83C\\uDF04\",\n    'surfing_man': \"\\uD83C\\uDFC4\",\n    'surfing_woman': \"\\uD83C\\uDFC4&zwj;\\u2640\\uFE0F\",\n    'sushi': \"\\uD83C\\uDF63\",\n    'suspension_railway': \"\\uD83D\\uDE9F\",\n    'sweat': \"\\uD83D\\uDE13\",\n    'sweat_drops': \"\\uD83D\\uDCA6\",\n    'sweat_smile': \"\\uD83D\\uDE05\",\n    'sweet_potato': \"\\uD83C\\uDF60\",\n    'swimming_man': \"\\uD83C\\uDFCA\",\n    'swimming_woman': \"\\uD83C\\uDFCA&zwj;\\u2640\\uFE0F\",\n    'symbols': \"\\uD83D\\uDD23\",\n    'synagogue': \"\\uD83D\\uDD4D\",\n    'syringe': \"\\uD83D\\uDC89\",\n    'taco': \"\\uD83C\\uDF2E\",\n    'tada': \"\\uD83C\\uDF89\",\n    'tanabata_tree': \"\\uD83C\\uDF8B\",\n    'taurus': \"\\u2649\\uFE0F\",\n    'taxi': \"\\uD83D\\uDE95\",\n    'tea': \"\\uD83C\\uDF75\",\n    'telephone_receiver': \"\\uD83D\\uDCDE\",\n    'telescope': \"\\uD83D\\uDD2D\",\n    'tennis': \"\\uD83C\\uDFBE\",\n    'tent': \"\\u26FA\\uFE0F\",\n    'thermometer': \"\\uD83C\\uDF21\",\n    'thinking': \"\\uD83E\\uDD14\",\n    'thought_balloon': \"\\uD83D\\uDCAD\",\n    'ticket': \"\\uD83C\\uDFAB\",\n    'tickets': \"\\uD83C\\uDF9F\",\n    'tiger': \"\\uD83D\\uDC2F\",\n    'tiger2': \"\\uD83D\\uDC05\",\n    'timer_clock': \"\\u23F2\",\n    'tipping_hand_man': \"\\uD83D\\uDC81&zwj;\\u2642\\uFE0F\",\n    'tired_face': \"\\uD83D\\uDE2B\",\n    'tm': \"\\u2122\\uFE0F\",\n    'toilet': \"\\uD83D\\uDEBD\",\n    'tokyo_tower': \"\\uD83D\\uDDFC\",\n    'tomato': \"\\uD83C\\uDF45\",\n    'tongue': \"\\uD83D\\uDC45\",\n    'top': \"\\uD83D\\uDD1D\",\n    'tophat': \"\\uD83C\\uDFA9\",\n    'tornado': \"\\uD83C\\uDF2A\",\n    'trackball': \"\\uD83D\\uDDB2\",\n    'tractor': \"\\uD83D\\uDE9C\",\n    'traffic_light': \"\\uD83D\\uDEA5\",\n    'train': \"\\uD83D\\uDE8B\",\n    'train2': \"\\uD83D\\uDE86\",\n    'tram': \"\\uD83D\\uDE8A\",\n    'triangular_flag_on_post': \"\\uD83D\\uDEA9\",\n    'triangular_ruler': \"\\uD83D\\uDCD0\",\n    'trident': \"\\uD83D\\uDD31\",\n    'triumph': \"\\uD83D\\uDE24\",\n    'trolleybus': \"\\uD83D\\uDE8E\",\n    'trophy': \"\\uD83C\\uDFC6\",\n    'tropical_drink': \"\\uD83C\\uDF79\",\n    'tropical_fish': \"\\uD83D\\uDC20\",\n    'truck': \"\\uD83D\\uDE9A\",\n    'trumpet': \"\\uD83C\\uDFBA\",\n    'tulip': \"\\uD83C\\uDF37\",\n    'tumbler_glass': \"\\uD83E\\uDD43\",\n    'turkey': \"\\uD83E\\uDD83\",\n    'turtle': \"\\uD83D\\uDC22\",\n    'tv': \"\\uD83D\\uDCFA\",\n    'twisted_rightwards_arrows': \"\\uD83D\\uDD00\",\n    'two_hearts': \"\\uD83D\\uDC95\",\n    'two_men_holding_hands': \"\\uD83D\\uDC6C\",\n    'two_women_holding_hands': \"\\uD83D\\uDC6D\",\n    'u5272': \"\\uD83C\\uDE39\",\n    'u5408': \"\\uD83C\\uDE34\",\n    'u55b6': \"\\uD83C\\uDE3A\",\n    'u6307': \"\\uD83C\\uDE2F\\uFE0F\",\n    'u6708': \"\\uD83C\\uDE37\\uFE0F\",\n    'u6709': \"\\uD83C\\uDE36\",\n    'u6e80': \"\\uD83C\\uDE35\",\n    'u7121': \"\\uD83C\\uDE1A\\uFE0F\",\n    'u7533': \"\\uD83C\\uDE38\",\n    'u7981': \"\\uD83C\\uDE32\",\n    'u7a7a': \"\\uD83C\\uDE33\",\n    'umbrella': \"\\u2614\\uFE0F\",\n    'unamused': \"\\uD83D\\uDE12\",\n    'underage': \"\\uD83D\\uDD1E\",\n    'unicorn': \"\\uD83E\\uDD84\",\n    'unlock': \"\\uD83D\\uDD13\",\n    'up': \"\\uD83C\\uDD99\",\n    'upside_down_face': \"\\uD83D\\uDE43\",\n    'v': \"\\u270C\\uFE0F\",\n    'vertical_traffic_light': \"\\uD83D\\uDEA6\",\n    'vhs': \"\\uD83D\\uDCFC\",\n    'vibration_mode': \"\\uD83D\\uDCF3\",\n    'video_camera': \"\\uD83D\\uDCF9\",\n    'video_game': \"\\uD83C\\uDFAE\",\n    'violin': \"\\uD83C\\uDFBB\",\n    'virgo': \"\\u264D\\uFE0F\",\n    'volcano': \"\\uD83C\\uDF0B\",\n    'volleyball': \"\\uD83C\\uDFD0\",\n    'vs': \"\\uD83C\\uDD9A\",\n    'vulcan_salute': \"\\uD83D\\uDD96\",\n    'walking_man': \"\\uD83D\\uDEB6\",\n    'walking_woman': \"\\uD83D\\uDEB6&zwj;\\u2640\\uFE0F\",\n    'waning_crescent_moon': \"\\uD83C\\uDF18\",\n    'waning_gibbous_moon': \"\\uD83C\\uDF16\",\n    'warning': \"\\u26A0\\uFE0F\",\n    'wastebasket': \"\\uD83D\\uDDD1\",\n    'watch': \"\\u231A\\uFE0F\",\n    'water_buffalo': \"\\uD83D\\uDC03\",\n    'watermelon': \"\\uD83C\\uDF49\",\n    'wave': \"\\uD83D\\uDC4B\",\n    'wavy_dash': \"\\u3030\\uFE0F\",\n    'waxing_crescent_moon': \"\\uD83C\\uDF12\",\n    'wc': \"\\uD83D\\uDEBE\",\n    'weary': \"\\uD83D\\uDE29\",\n    'wedding': \"\\uD83D\\uDC92\",\n    'weight_lifting_man': \"\\uD83C\\uDFCB\\uFE0F\",\n    'weight_lifting_woman': \"\\uD83C\\uDFCB\\uFE0F&zwj;\\u2640\\uFE0F\",\n    'whale': \"\\uD83D\\uDC33\",\n    'whale2': \"\\uD83D\\uDC0B\",\n    'wheel_of_dharma': \"\\u2638\\uFE0F\",\n    'wheelchair': \"\\u267F\\uFE0F\",\n    'white_check_mark': \"\\u2705\",\n    'white_circle': \"\\u26AA\\uFE0F\",\n    'white_flag': \"\\uD83C\\uDFF3\\uFE0F\",\n    'white_flower': \"\\uD83D\\uDCAE\",\n    'white_large_square': \"\\u2B1C\\uFE0F\",\n    'white_medium_small_square': \"\\u25FD\\uFE0F\",\n    'white_medium_square': \"\\u25FB\\uFE0F\",\n    'white_small_square': \"\\u25AB\\uFE0F\",\n    'white_square_button': \"\\uD83D\\uDD33\",\n    'wilted_flower': \"\\uD83E\\uDD40\",\n    'wind_chime': \"\\uD83C\\uDF90\",\n    'wind_face': \"\\uD83C\\uDF2C\",\n    'wine_glass': \"\\uD83C\\uDF77\",\n    'wink': \"\\uD83D\\uDE09\",\n    'wolf': \"\\uD83D\\uDC3A\",\n    'woman': \"\\uD83D\\uDC69\",\n    'woman_artist': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDFA8\",\n    'woman_astronaut': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDE80\",\n    'woman_cartwheeling': \"\\uD83E\\uDD38&zwj;\\u2640\\uFE0F\",\n    'woman_cook': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDF73\",\n    'woman_facepalming': \"\\uD83E\\uDD26&zwj;\\u2640\\uFE0F\",\n    'woman_factory_worker': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDFED\",\n    'woman_farmer': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDF3E\",\n    'woman_firefighter': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDE92\",\n    'woman_health_worker': \"\\uD83D\\uDC69&zwj;\\u2695\\uFE0F\",\n    'woman_judge': \"\\uD83D\\uDC69&zwj;\\u2696\\uFE0F\",\n    'woman_juggling': \"\\uD83E\\uDD39&zwj;\\u2640\\uFE0F\",\n    'woman_mechanic': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDD27\",\n    'woman_office_worker': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDCBC\",\n    'woman_pilot': \"\\uD83D\\uDC69&zwj;\\u2708\\uFE0F\",\n    'woman_playing_handball': \"\\uD83E\\uDD3E&zwj;\\u2640\\uFE0F\",\n    'woman_playing_water_polo': \"\\uD83E\\uDD3D&zwj;\\u2640\\uFE0F\",\n    'woman_scientist': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDD2C\",\n    'woman_shrugging': \"\\uD83E\\uDD37&zwj;\\u2640\\uFE0F\",\n    'woman_singer': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDFA4\",\n    'woman_student': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDF93\",\n    'woman_teacher': \"\\uD83D\\uDC69&zwj;\\uD83C\\uDFEB\",\n    'woman_technologist': \"\\uD83D\\uDC69&zwj;\\uD83D\\uDCBB\",\n    'woman_with_turban': \"\\uD83D\\uDC73&zwj;\\u2640\\uFE0F\",\n    'womans_clothes': \"\\uD83D\\uDC5A\",\n    'womans_hat': \"\\uD83D\\uDC52\",\n    'women_wrestling': \"\\uD83E\\uDD3C&zwj;\\u2640\\uFE0F\",\n    'womens': \"\\uD83D\\uDEBA\",\n    'world_map': \"\\uD83D\\uDDFA\",\n    'worried': \"\\uD83D\\uDE1F\",\n    'wrench': \"\\uD83D\\uDD27\",\n    'writing_hand': \"\\u270D\\uFE0F\",\n    'x': \"\\u274C\",\n    'yellow_heart': \"\\uD83D\\uDC9B\",\n    'yen': \"\\uD83D\\uDCB4\",\n    'yin_yang': \"\\u262F\\uFE0F\",\n    'yum': \"\\uD83D\\uDE0B\",\n    'zap': \"\\u26A1\\uFE0F\",\n    'zipper_mouth_face': \"\\uD83E\\uDD10\",\n    'zzz': \"\\uD83D\\uDCA4\",\n\n    /* special emojis :P */\n    'octocat': '<img alt=\":octocat:\" height=\"20\" width=\"20\" align=\"absmiddle\" src=\"https://assets-cdn.github.com/images/icons/emoji/octocat.png\">',\n    'showdown': '<span style=\"font-family: \\'Anonymous Pro\\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>'\n  };\n  /**\n   * Created by Estevao on 31-05-2015.\n   */\n\n  /**\n   * Showdown Converter class\n   * @class\n   * @param {object} [converterOptions]\n   * @returns {Converter}\n   */\n\n  showdown.Converter = function (converterOptions) {\n    'use strict';\n\n    var\n    /**\n     * Options used by this converter\n     * @private\n     * @type {{}}\n     */\n    options = {},\n\n    /**\n     * Language extensions used by this converter\n     * @private\n     * @type {Array}\n     */\n    langExtensions = [],\n\n    /**\n     * Output modifiers extensions used by this converter\n     * @private\n     * @type {Array}\n     */\n    outputModifiers = [],\n\n    /**\n     * Event listeners\n     * @private\n     * @type {{}}\n     */\n    listeners = {},\n\n    /**\n     * The flavor set in this converter\n     */\n    setConvFlavor = setFlavor,\n\n    /**\n     * Metadata of the document\n     * @type {{parsed: {}, raw: string, format: string}}\n     */\n    metadata = {\n      parsed: {},\n      raw: '',\n      format: ''\n    };\n\n    _constructor();\n    /**\n     * Converter constructor\n     * @private\n     */\n\n\n    function _constructor() {\n      converterOptions = converterOptions || {};\n\n      for (var gOpt in globalOptions) {\n        if (globalOptions.hasOwnProperty(gOpt)) {\n          options[gOpt] = globalOptions[gOpt];\n        }\n      } // Merge options\n\n\n      if (typeof converterOptions === 'object') {\n        for (var opt in converterOptions) {\n          if (converterOptions.hasOwnProperty(opt)) {\n            options[opt] = converterOptions[opt];\n          }\n        }\n      } else {\n        throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions + ' was passed instead.');\n      }\n\n      if (options.extensions) {\n        showdown.helper.forEach(options.extensions, _parseExtension);\n      }\n    }\n    /**\n     * Parse extension\n     * @param {*} ext\n     * @param {string} [name='']\n     * @private\n     */\n\n\n    function _parseExtension(ext, name) {\n      name = name || null; // If it's a string, the extension was previously loaded\n\n      if (showdown.helper.isString(ext)) {\n        ext = showdown.helper.stdExtName(ext);\n        name = ext; // LEGACY_SUPPORT CODE\n\n        if (showdown.extensions[ext]) {\n          console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' + 'Please inform the developer that the extension should be updated!');\n          legacyExtensionLoading(showdown.extensions[ext], ext);\n          return; // END LEGACY SUPPORT CODE\n        } else if (!showdown.helper.isUndefined(extensions[ext])) {\n          ext = extensions[ext];\n        } else {\n          throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n        }\n      }\n\n      if (typeof ext === 'function') {\n        ext = ext();\n      }\n\n      if (!showdown.helper.isArray(ext)) {\n        ext = [ext];\n      }\n\n      var validExt = validate(ext, name);\n\n      if (!validExt.valid) {\n        throw Error(validExt.error);\n      }\n\n      for (var i = 0; i < ext.length; ++i) {\n        switch (ext[i].type) {\n          case 'lang':\n            langExtensions.push(ext[i]);\n            break;\n\n          case 'output':\n            outputModifiers.push(ext[i]);\n            break;\n        }\n\n        if (ext[i].hasOwnProperty('listeners')) {\n          for (var ln in ext[i].listeners) {\n            if (ext[i].listeners.hasOwnProperty(ln)) {\n              listen(ln, ext[i].listeners[ln]);\n            }\n          }\n        }\n      }\n    }\n    /**\n     * LEGACY_SUPPORT\n     * @param {*} ext\n     * @param {string} name\n     */\n\n\n    function legacyExtensionLoading(ext, name) {\n      if (typeof ext === 'function') {\n        ext = ext(new showdown.Converter());\n      }\n\n      if (!showdown.helper.isArray(ext)) {\n        ext = [ext];\n      }\n\n      var valid = validate(ext, name);\n\n      if (!valid.valid) {\n        throw Error(valid.error);\n      }\n\n      for (var i = 0; i < ext.length; ++i) {\n        switch (ext[i].type) {\n          case 'lang':\n            langExtensions.push(ext[i]);\n            break;\n\n          case 'output':\n            outputModifiers.push(ext[i]);\n            break;\n\n          default:\n            // should never reach here\n            throw Error('Extension loader error: Type unrecognized!!!');\n        }\n      }\n    }\n    /**\n     * Listen to an event\n     * @param {string} name\n     * @param {function} callback\n     */\n\n\n    function listen(name, callback) {\n      if (!showdown.helper.isString(name)) {\n        throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n      }\n\n      if (typeof callback !== 'function') {\n        throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n      }\n\n      if (!listeners.hasOwnProperty(name)) {\n        listeners[name] = [];\n      }\n\n      listeners[name].push(callback);\n    }\n\n    function rTrimInputText(text) {\n      var rsp = text.match(/^\\s*/)[0].length,\n          rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n      return text.replace(rgx, '');\n    }\n    /**\n     * Dispatch an event\n     * @private\n     * @param {string} evtName Event name\n     * @param {string} text Text\n     * @param {{}} options Converter Options\n     * @param {{}} globals\n     * @returns {string}\n     */\n\n\n    this._dispatch = function dispatch(evtName, text, options, globals) {\n      if (listeners.hasOwnProperty(evtName)) {\n        for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n          var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n\n          if (nText && typeof nText !== 'undefined') {\n            text = nText;\n          }\n        }\n      }\n\n      return text;\n    };\n    /**\n     * Listen to an event\n     * @param {string} name\n     * @param {function} callback\n     * @returns {showdown.Converter}\n     */\n\n\n    this.listen = function (name, callback) {\n      listen(name, callback);\n      return this;\n    };\n    /**\n     * Converts a markdown string into HTML\n     * @param {string} text\n     * @returns {*}\n     */\n\n\n    this.makeHtml = function (text) {\n      //check if text is not falsy\n      if (!text) {\n        return text;\n      }\n\n      var globals = {\n        gHtmlBlocks: [],\n        gHtmlMdBlocks: [],\n        gHtmlSpans: [],\n        gUrls: {},\n        gTitles: {},\n        gDimensions: {},\n        gListLevel: 0,\n        hashLinkCounts: {},\n        langExtensions: langExtensions,\n        outputModifiers: outputModifiers,\n        converter: this,\n        ghCodeBlocks: [],\n        metadata: {\n          parsed: {},\n          raw: '',\n          format: ''\n        }\n      }; // This lets us use ¨ trema as an escape char to avoid md5 hashes\n      // The choice of character is arbitrary; anything that isn't\n      // magic in Markdown will work.\n\n      text = text.replace(/¨/g, '¨T'); // Replace $ with ¨D\n      // RegExp interprets $ as a special character\n      // when it's in a replacement string\n\n      text = text.replace(/\\$/g, '¨D'); // Standardize line endings\n\n      text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n\n      text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n      // Stardardize line spaces\n\n      text = text.replace(/\\u00A0/g, '&nbsp;');\n\n      if (options.smartIndentationFix) {\n        text = rTrimInputText(text);\n      } // Make sure text begins and ends with a couple of newlines:\n\n\n      text = '\\n\\n' + text + '\\n\\n'; // detab\n\n      text = showdown.subParser('detab')(text, options, globals);\n      /**\n       * Strip any lines consisting only of spaces and tabs.\n       * This makes subsequent regexs easier to write, because we can\n       * match consecutive blank lines with /\\n+/ instead of something\n       * contorted like /[ \\t]*\\n+/\n       */\n\n      text = text.replace(/^[ \\t]+$/mg, ''); //run languageExtensions\n\n      showdown.helper.forEach(langExtensions, function (ext) {\n        text = showdown.subParser('runExtension')(ext, text, options, globals);\n      }); // run the sub parsers\n\n      text = showdown.subParser('metadata')(text, options, globals);\n      text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n      text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n      text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n      text = showdown.subParser('hashCodeTags')(text, options, globals);\n      text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n      text = showdown.subParser('blockGamut')(text, options, globals);\n      text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n      text = showdown.subParser('unescapeSpecialChars')(text, options, globals); // attacklab: Restore dollar signs\n\n      text = text.replace(/¨D/g, '$$'); // attacklab: Restore tremas\n\n      text = text.replace(/¨T/g, '¨'); // render a complete html document instead of a partial if the option is enabled\n\n      text = showdown.subParser('completeHTMLDocument')(text, options, globals); // Run output modifiers\n\n      showdown.helper.forEach(outputModifiers, function (ext) {\n        text = showdown.subParser('runExtension')(ext, text, options, globals);\n      }); // update metadata\n\n      metadata = globals.metadata;\n      return text;\n    };\n    /**\n     * Converts an HTML string into a markdown string\n     * @param src\n     * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.\n     * @returns {string}\n     */\n\n\n    this.makeMarkdown = this.makeMd = function (src, HTMLParser) {\n      // replace \\r\\n with \\n\n      src = src.replace(/\\r\\n/g, '\\n');\n      src = src.replace(/\\r/g, '\\n'); // old macs\n      // due to an edge case, we need to find this: > <\n      // to prevent removing of non silent white spaces\n      // ex: <em>this is</em> <strong>sparta</strong>\n\n      src = src.replace(/>[ \\t]+</, '>¨NBSP;<');\n\n      if (!HTMLParser) {\n        if (window && window.document) {\n          HTMLParser = window.document;\n        } else {\n          throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');\n        }\n      }\n\n      var doc = HTMLParser.createElement('div');\n      doc.innerHTML = src;\n      var globals = {\n        preList: substitutePreCodeTags(doc)\n      }; // remove all newlines and collapse spaces\n\n      clean(doc); // some stuff, like accidental reference links must now be escaped\n      // TODO\n      // doc.innerHTML = doc.innerHTML.replace(/\\[[\\S\\t ]]/);\n\n      var nodes = doc.childNodes,\n          mdDoc = '';\n\n      for (var i = 0; i < nodes.length; i++) {\n        mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);\n      }\n\n      function clean(node) {\n        for (var n = 0; n < node.childNodes.length; ++n) {\n          var child = node.childNodes[n];\n\n          if (child.nodeType === 3) {\n            if (!/\\S/.test(child.nodeValue)) {\n              node.removeChild(child);\n              --n;\n            } else {\n              child.nodeValue = child.nodeValue.split('\\n').join(' ');\n              child.nodeValue = child.nodeValue.replace(/(\\s)+/g, '$1');\n            }\n          } else if (child.nodeType === 1) {\n            clean(child);\n          }\n        }\n      } // find all pre tags and replace contents with placeholder\n      // we need this so that we can remove all indentation from html\n      // to ease up parsing\n\n\n      function substitutePreCodeTags(doc) {\n        var pres = doc.querySelectorAll('pre'),\n            presPH = [];\n\n        for (var i = 0; i < pres.length; ++i) {\n          if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {\n            var content = pres[i].firstChild.innerHTML.trim(),\n                language = pres[i].firstChild.getAttribute('data-language') || ''; // if data-language attribute is not defined, then we look for class language-*\n\n            if (language === '') {\n              var classes = pres[i].firstChild.className.split(' ');\n\n              for (var c = 0; c < classes.length; ++c) {\n                var matches = classes[c].match(/^language-(.+)$/);\n\n                if (matches !== null) {\n                  language = matches[1];\n                  break;\n                }\n              }\n            } // unescape html entities in content\n\n\n            content = showdown.helper.unescapeHTMLEntities(content);\n            presPH.push(content);\n            pres[i].outerHTML = '<precode language=\"' + language + '\" precodenum=\"' + i.toString() + '\"></precode>';\n          } else {\n            presPH.push(pres[i].innerHTML);\n            pres[i].innerHTML = '';\n            pres[i].setAttribute('prenum', i.toString());\n          }\n        }\n\n        return presPH;\n      }\n\n      return mdDoc;\n    };\n    /**\n     * Set an option of this Converter instance\n     * @param {string} key\n     * @param {*} value\n     */\n\n\n    this.setOption = function (key, value) {\n      options[key] = value;\n    };\n    /**\n     * Get the option of this Converter instance\n     * @param {string} key\n     * @returns {*}\n     */\n\n\n    this.getOption = function (key) {\n      return options[key];\n    };\n    /**\n     * Get the options of this Converter instance\n     * @returns {{}}\n     */\n\n\n    this.getOptions = function () {\n      return options;\n    };\n    /**\n     * Add extension to THIS converter\n     * @param {{}} extension\n     * @param {string} [name=null]\n     */\n\n\n    this.addExtension = function (extension, name) {\n      name = name || null;\n\n      _parseExtension(extension, name);\n    };\n    /**\n     * Use a global registered extension with THIS converter\n     * @param {string} extensionName Name of the previously registered extension\n     */\n\n\n    this.useExtension = function (extensionName) {\n      _parseExtension(extensionName);\n    };\n    /**\n     * Set the flavor THIS converter should use\n     * @param {string} name\n     */\n\n\n    this.setFlavor = function (name) {\n      if (!flavor.hasOwnProperty(name)) {\n        throw Error(name + ' flavor was not found');\n      }\n\n      var preset = flavor[name];\n      setConvFlavor = name;\n\n      for (var option in preset) {\n        if (preset.hasOwnProperty(option)) {\n          options[option] = preset[option];\n        }\n      }\n    };\n    /**\n     * Get the currently set flavor of this converter\n     * @returns {string}\n     */\n\n\n    this.getFlavor = function () {\n      return setConvFlavor;\n    };\n    /**\n     * Remove an extension from THIS converter.\n     * Note: This is a costly operation. It's better to initialize a new converter\n     * and specify the extensions you wish to use\n     * @param {Array} extension\n     */\n\n\n    this.removeExtension = function (extension) {\n      if (!showdown.helper.isArray(extension)) {\n        extension = [extension];\n      }\n\n      for (var a = 0; a < extension.length; ++a) {\n        var ext = extension[a];\n\n        for (var i = 0; i < langExtensions.length; ++i) {\n          if (langExtensions[i] === ext) {\n            langExtensions[i].splice(i, 1);\n          }\n        }\n\n        for (var ii = 0; ii < outputModifiers.length; ++i) {\n          if (outputModifiers[ii] === ext) {\n            outputModifiers[ii].splice(i, 1);\n          }\n        }\n      }\n    };\n    /**\n     * Get all extension of THIS converter\n     * @returns {{language: Array, output: Array}}\n     */\n\n\n    this.getAllExtensions = function () {\n      return {\n        language: langExtensions,\n        output: outputModifiers\n      };\n    };\n    /**\n     * Get the metadata of the previously parsed document\n     * @param raw\n     * @returns {string|{}}\n     */\n\n\n    this.getMetadata = function (raw) {\n      if (raw) {\n        return metadata.raw;\n      } else {\n        return metadata.parsed;\n      }\n    };\n    /**\n     * Get the metadata format of the previously parsed document\n     * @returns {string}\n     */\n\n\n    this.getMetadataFormat = function () {\n      return metadata.format;\n    };\n    /**\n     * Private: set a single key, value metadata pair\n     * @param {string} key\n     * @param {string} value\n     */\n\n\n    this._setMetadataPair = function (key, value) {\n      metadata.parsed[key] = value;\n    };\n    /**\n     * Private: set metadata format\n     * @param {string} format\n     */\n\n\n    this._setMetadataFormat = function (format) {\n      metadata.format = format;\n    };\n    /**\n     * Private: set metadata raw text\n     * @param {string} raw\n     */\n\n\n    this._setMetadataRaw = function (raw) {\n      metadata.raw = raw;\n    };\n  };\n  /**\n   * Turn Markdown link shortcuts into XHTML <a> tags.\n   */\n\n\n  showdown.subParser('anchors', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n    var writeAnchorTag = function writeAnchorTag(wholeMatch, linkText, linkId, url, m5, m6, title) {\n      if (showdown.helper.isUndefined(title)) {\n        title = '';\n      }\n\n      linkId = linkId.toLowerCase(); // Special case for explicit empty url\n\n      if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n        url = '';\n      } else if (!url) {\n        if (!linkId) {\n          // lower-case and turn embedded newlines into spaces\n          linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n        }\n\n        url = '#' + linkId;\n\n        if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n          url = globals.gUrls[linkId];\n\n          if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n            title = globals.gTitles[linkId];\n          }\n        } else {\n          return wholeMatch;\n        }\n      } //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n\n\n      url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      var result = '<a href=\"' + url + '\"';\n\n      if (title !== '' && title !== null) {\n        title = title.replace(/\"/g, '&quot;'); //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n\n        title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n        result += ' title=\"' + title + '\"';\n      } // optionLinksInNewWindow only applies\n      // to external links. Hash links (#) open in same page\n\n\n      if (options.openLinksInNewWindow && !/^#/.test(url)) {\n        // escaped _\n        result += ' target=\"¨E95Eblank\"';\n      }\n\n      result += '>' + linkText + '</a>';\n      return result;\n    }; // First, handle reference-style links: [link text] [id]\n\n\n    text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag); // Next, inline-style links: [link text](url \"optional title\")\n    // cases with crazy urls like ./image/cat1).png\n\n    text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g, writeAnchorTag); // normal cases\n\n    text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g, writeAnchorTag); // handle reference-style shortcuts: [link text]\n    // These must come last in case you've also got [link test][1]\n    // or [link test](/foo)\n\n    text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag); // Lastly handle GithubMentions if option is enabled\n\n    if (options.ghMentions) {\n      text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d]+(?:[a-z\\d.-]+?[a-z\\d]+)*))/gmi, function (wm, st, escape, mentions, username) {\n        if (escape === '\\\\') {\n          return st + mentions;\n        } //check if options.ghMentionsLink is a string\n\n\n        if (!showdown.helper.isString(options.ghMentionsLink)) {\n          throw new Error('ghMentionsLink option must be a string');\n        }\n\n        var lnk = options.ghMentionsLink.replace(/\\{u}/g, username),\n            target = '';\n\n        if (options.openLinksInNewWindow) {\n          target = ' target=\"¨E95Eblank\"';\n        }\n\n        return st + '<a href=\"' + lnk + '\"' + target + '>' + mentions + '</a>';\n      });\n    }\n\n    text = globals.converter._dispatch('anchors.after', text, options, globals);\n    return text;\n  }); // url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\n\n  var simpleURLRegex = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+?\\.[^'\">\\s]+?)()(\\1)?(?=\\s|$)(?![\"<>])/gi,\n      simpleURLRegex2 = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]])?(\\1)?(?=\\s|$)(?![\"<>])/gi,\n      delimUrlRegex = /()<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>()/gi,\n      simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n      delimMailRegex = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n      replaceLink = function replaceLink(options) {\n    'use strict';\n\n    return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {\n      link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      var lnkTxt = link,\n          append = '',\n          target = '',\n          lmc = leadingMagicChars || '',\n          tmc = trailingMagicChars || '';\n\n      if (/^www\\./i.test(link)) {\n        link = link.replace(/^www\\./i, 'http://www.');\n      }\n\n      if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n        append = trailingPunctuation;\n      }\n\n      if (options.openLinksInNewWindow) {\n        target = ' target=\"¨E95Eblank\"';\n      }\n\n      return lmc + '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append + tmc;\n    };\n  },\n      replaceMail = function replaceMail(options, globals) {\n    'use strict';\n\n    return function (wholeMatch, b, mail) {\n      var href = 'mailto:';\n      b = b || '';\n      mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n\n      if (options.encodeEmails) {\n        href = showdown.helper.encodeEmailAddress(href + mail);\n        mail = showdown.helper.encodeEmailAddress(mail);\n      } else {\n        href = href + mail;\n      }\n\n      return b + '<a href=\"' + href + '\">' + mail + '</a>';\n    };\n  };\n\n  showdown.subParser('autoLinks', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n    text = text.replace(delimUrlRegex, replaceLink(options));\n    text = text.replace(delimMailRegex, replaceMail(options, globals));\n    text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\n    'use strict';\n\n    if (!options.simplifiedAutoLink) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\n\n    if (options.excludeTrailingPunctuationFromURLs) {\n      text = text.replace(simpleURLRegex2, replaceLink(options));\n    } else {\n      text = text.replace(simpleURLRegex, replaceLink(options));\n    }\n\n    text = text.replace(simpleMailRegex, replaceMail(options, globals));\n    text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\n    return text;\n  });\n  /**\n   * These are all the transformations that form block-level\n   * tags like paragraphs, headers, and list items.\n   */\n\n  showdown.subParser('blockGamut', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('blockGamut.before', text, options, globals); // we parse blockquotes first so that we can have headings and hrs\n    // inside blockquotes\n\n    text = showdown.subParser('blockQuotes')(text, options, globals);\n    text = showdown.subParser('headers')(text, options, globals); // Do Horizontal Rules:\n\n    text = showdown.subParser('horizontalRule')(text, options, globals);\n    text = showdown.subParser('lists')(text, options, globals);\n    text = showdown.subParser('codeBlocks')(text, options, globals);\n    text = showdown.subParser('tables')(text, options, globals); // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n    // was to escape raw HTML in the original Markdown source. This time,\n    // we're escaping the markup we've just created, so that we don't wrap\n    // <p> tags around block-level tags.\n\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('paragraphs')(text, options, globals);\n    text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('blockQuotes', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('blockQuotes.before', text, options, globals); // add a couple extra lines after the text and endtext mark\n\n    text = text + '\\n\\n';\n    var rgx = /(^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+/gm;\n\n    if (options.splitAdjacentBlockquotes) {\n      rgx = /^ {0,3}>[\\s\\S]*?(?:\\n\\n)/gm;\n    }\n\n    text = text.replace(rgx, function (bq) {\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n      bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, ''); // trim one level of quoting\n      // attacklab: clean up hack\n\n      bq = bq.replace(/¨0/g, '');\n      bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n\n      bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n      bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n      bq = bq.replace(/(^|\\n)/g, '$1  '); // These leading spaces screw with <pre> content, so we need to fix that:\n\n      bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n        var pre = m1; // attacklab: hack around Konqueror 3.5.4 bug:\n\n        pre = pre.replace(/^  /mg, '¨0');\n        pre = pre.replace(/¨0/g, '');\n        return pre;\n      });\n      return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n    });\n    text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Process Markdown `<pre><code>` blocks.\n   */\n\n  showdown.subParser('codeBlocks', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('codeBlocks.before', text, options, globals); // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\n    text += '¨0';\n    var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n    text = text.replace(pattern, function (wholeMatch, m1, m2) {\n      var codeblock = m1,\n          nextChar = m2,\n          end = '\\n';\n      codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n      codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n      codeblock = showdown.subParser('detab')(codeblock, options, globals);\n      codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n\n      codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n      if (options.omitExtraWLInCodeBlocks) {\n        end = '';\n      }\n\n      codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n      return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n    }); // strip sentinel\n\n    text = text.replace(/¨0/, '');\n    text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n    return text;\n  });\n  /**\n   *\n   *   *  Backtick quotes are used for <code></code> spans.\n   *\n   *   *  You can use multiple backticks as the delimiters if you want to\n   *     include literal backticks in the code span. So, this input:\n   *\n   *         Just type ``foo `bar` baz`` at the prompt.\n   *\n   *       Will translate to:\n   *\n   *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n   *\n   *    There's no arbitrary limit to the number of backticks you\n   *    can use as delimters. If you need three consecutive backticks\n   *    in your code, use four for delimiters, etc.\n   *\n   *  *  You can use spaces to get literal backticks at the edges:\n   *\n   *         ... type `` `bar` `` ...\n   *\n   *       Turns to:\n   *\n   *         ... type <code>`bar`</code> ...\n   */\n\n  showdown.subParser('codeSpans', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n    if (typeof text === 'undefined') {\n      text = '';\n    }\n\n    text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm, function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, ''); // leading whitespace\n\n      c = c.replace(/[ \\t]*$/g, ''); // trailing whitespace\n\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      c = m1 + '<code>' + c + '</code>';\n      c = showdown.subParser('hashHTMLSpans')(c, options, globals);\n      return c;\n    });\n    text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Create a full HTML document from the processed markdown\n   */\n\n  showdown.subParser('completeHTMLDocument', function (text, options, globals) {\n    'use strict';\n\n    if (!options.completeHTMLDocument) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);\n    var doctype = 'html',\n        doctypeParsed = '<!DOCTYPE HTML>\\n',\n        title = '',\n        charset = '<meta charset=\"utf-8\">\\n',\n        lang = '',\n        metadata = '';\n\n    if (typeof globals.metadata.parsed.doctype !== 'undefined') {\n      doctypeParsed = '<!DOCTYPE ' + globals.metadata.parsed.doctype + '>\\n';\n      doctype = globals.metadata.parsed.doctype.toString().toLowerCase();\n\n      if (doctype === 'html' || doctype === 'html5') {\n        charset = '<meta charset=\"utf-8\">';\n      }\n    }\n\n    for (var meta in globals.metadata.parsed) {\n      if (globals.metadata.parsed.hasOwnProperty(meta)) {\n        switch (meta.toLowerCase()) {\n          case 'doctype':\n            break;\n\n          case 'title':\n            title = '<title>' + globals.metadata.parsed.title + '</title>\\n';\n            break;\n\n          case 'charset':\n            if (doctype === 'html' || doctype === 'html5') {\n              charset = '<meta charset=\"' + globals.metadata.parsed.charset + '\">\\n';\n            } else {\n              charset = '<meta name=\"charset\" content=\"' + globals.metadata.parsed.charset + '\">\\n';\n            }\n\n            break;\n\n          case 'language':\n          case 'lang':\n            lang = ' lang=\"' + globals.metadata.parsed[meta] + '\"';\n            metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n            break;\n\n          default:\n            metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n        }\n      }\n    }\n\n    text = doctypeParsed + '<html' + lang + '>\\n<head>\\n' + title + charset + metadata + '</head>\\n<body>\\n' + text.trim() + '\\n</body>\\n</html>';\n    text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Convert all tabs to spaces\n   */\n\n  showdown.subParser('detab', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('detab.before', text, options, globals); // expand first n-1 tabs\n\n    text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n    // replace the nth with two sentinels\n\n    text = text.replace(/\\t/g, '¨A¨B'); // use the sentinel to anchor our regex so it doesn't explode\n\n    text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n      var leadingText = m1,\n          numSpaces = 4 - leadingText.length % 4; // g_tab_width\n      // there *must* be a better way to do this:\n\n      for (var i = 0; i < numSpaces; i++) {\n        leadingText += ' ';\n      }\n\n      return leadingText;\n    }); // clean up sentinels\n\n    text = text.replace(/¨A/g, '    '); // g_tab_width\n\n    text = text.replace(/¨B/g, '');\n    text = globals.converter._dispatch('detab.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('ellipsis', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('ellipsis.before', text, options, globals);\n    text = text.replace(/\\.\\.\\./g, '…');\n    text = globals.converter._dispatch('ellipsis.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Turn emoji codes into emojis\n   *\n   * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis\n   */\n\n  showdown.subParser('emoji', function (text, options, globals) {\n    'use strict';\n\n    if (!options.emoji) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('emoji.before', text, options, globals);\n    var emojiRgx = /:([\\S]+?):/g;\n    text = text.replace(emojiRgx, function (wm, emojiCode) {\n      if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {\n        return showdown.helper.emojis[emojiCode];\n      }\n\n      return wm;\n    });\n    text = globals.converter._dispatch('emoji.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Smart processing for ampersands and angle brackets that need to be encoded.\n   */\n\n  showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals); // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n    // http://bumppo.net/projects/amputator/\n\n    text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;'); // Encode naked <'s\n\n    text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;'); // Encode <\n\n    text = text.replace(/</g, '&lt;'); // Encode >\n\n    text = text.replace(/>/g, '&gt;');\n    text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Returns the string, with after processing the following backslash escape sequences.\n   *\n   * attacklab: The polite way to do this is with the new escapeCharacters() function:\n   *\n   *    text = escapeCharacters(text,\"\\\\\",true);\n   *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n   *\n   * ...but we're sidestepping its use of the (slow) RegExp constructor\n   * as an optimization for Firefox.  This function gets called a LOT.\n   */\n\n  showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n    text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n    text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\n    text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Encode/escape certain characters inside Markdown code runs.\n   * The point is that in code, these characters are literals,\n   * and lose their special Markdown meanings.\n   */\n\n  showdown.subParser('encodeCode', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('encodeCode.before', text, options, globals); // Encode all ampersands; HTML entities are not\n    // entities within a Markdown code span.\n\n    text = text.replace(/&/g, '&amp;') // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;').replace(/>/g, '&gt;') // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n    text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n   * don't conflict with their use in Markdown for code, italics and strong.\n   */\n\n  showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals); // Build a regex to find HTML tags.\n\n    var tags = /<\\/?[a-z\\d_:-]+(?:[\\s]+[\\s\\S]+?)?>/gi,\n        comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;\n    text = text.replace(tags, function (wholeMatch) {\n      return wholeMatch.replace(/(.)<\\/?code>(?=.)/g, '$1`').replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n    });\n    text = text.replace(comments, function (wholeMatch) {\n      return wholeMatch.replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n    });\n    text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Handle github codeblocks prior to running HashHTML so that\n   * HTML contained within the codeblock gets escaped properly\n   * Example:\n   * ```ruby\n   *     def hello_world(x)\n   *       puts \"Hello, #{x}\"\n   *     end\n   * ```\n   */\n\n  showdown.subParser('githubCodeBlocks', function (text, options, globals) {\n    'use strict'; // early exit if option is not enabled\n\n    if (!options.ghCodeBlocks) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n    text += '¨0';\n    text = text.replace(/(?:^|\\n)(?: {0,3})(```+|~~~+)(?: *)([^\\s`~]*)\\n([\\s\\S]*?)\\n(?: {0,3})\\1/g, function (wholeMatch, delim, language, codeblock) {\n      var end = options.omitExtraWLInCodeBlocks ? '' : '\\n'; // First parse the github code block\n\n      codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n      codeblock = showdown.subParser('detab')(codeblock, options, globals);\n      codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n\n      codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n      codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n      codeblock = showdown.subParser('hashBlock')(codeblock, options, globals); // Since GHCodeblocks can be false positives, we need to\n      // store the primitive text and the parsed text in a global var,\n      // and then return a token\n\n      return '\\n\\n¨G' + (globals.ghCodeBlocks.push({\n        text: wholeMatch,\n        codeblock: codeblock\n      }) - 1) + 'G\\n\\n';\n    }); // attacklab: strip sentinel\n\n    text = text.replace(/¨0/, '');\n    return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n  });\n  showdown.subParser('hashBlock', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n    text = text.replace(/(^\\n+|\\n+$)/g, '');\n    text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n    text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Hash and escape <code> elements that should not be parsed as markdown\n   */\n\n  showdown.subParser('hashCodeTags', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n    var repFunc = function repFunc(wholeMatch, match, left, right) {\n      var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n      return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n    }; // Hash naked <code>\n\n\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n    text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('hashElement', function (text, options, globals) {\n    'use strict';\n\n    return function (wholeMatch, m1) {\n      var blockText = m1; // Undo double lines\n\n      blockText = blockText.replace(/\\n\\n/g, '\\n');\n      blockText = blockText.replace(/^\\n/, ''); // strip trailing blank lines\n\n      blockText = blockText.replace(/\\n+$/g, ''); // Replace the element text with a marker (\"¨KxK\" where x is its key)\n\n      blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n      return blockText;\n    };\n  });\n  showdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n    var blockTags = ['pre', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'table', 'dl', 'ol', 'ul', 'script', 'noscript', 'form', 'fieldset', 'iframe', 'math', 'style', 'section', 'header', 'footer', 'nav', 'article', 'aside', 'address', 'audio', 'canvas', 'figure', 'hgroup', 'output', 'video', 'p'],\n        repFunc = function repFunc(wholeMatch, match, left, right) {\n      var txt = wholeMatch; // check if this html element is marked as markdown\n      // if so, it's contents should be parsed as markdown\n\n      if (left.search(/\\bmarkdown\\b/) !== -1) {\n        txt = left + globals.converter.makeHtml(match) + right;\n      }\n\n      return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n    };\n\n    if (options.backslashEscapesHTMLTags) {\n      // encode backslash escaped HTML tags\n      text = text.replace(/\\\\<(\\/?[^>]+?)>/g, function (wm, inside) {\n        return '&lt;' + inside + '&gt;';\n      });\n    } // hash HTML Blocks\n\n\n    for (var i = 0; i < blockTags.length; ++i) {\n      var opTagPos,\n          rgx1 = new RegExp('^ {0,3}(<' + blockTags[i] + '\\\\b[^>]*>)', 'im'),\n          patLeft = '<' + blockTags[i] + '\\\\b[^>]*>',\n          patRight = '</' + blockTags[i] + '>'; // 1. Look for the first position of the first opening HTML tag in the text\n\n      while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\n        // if the HTML tag is \\ escaped, we need to escape it and break\n        //2. Split the text in that position\n        var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\n            //3. Match recursively\n        newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im'); // prevent an infinite loop\n\n        if (newSubText1 === subTexts[1]) {\n          break;\n        }\n\n        text = subTexts[0].concat(newSubText1);\n      }\n    } // HR SPECIAL CASE\n\n\n    text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g, showdown.subParser('hashElement')(text, options, globals)); // Special case for standalone HTML comments\n\n    text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n      return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n    }, '^ {0,3}<!--', '-->', 'gm'); // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n\n    text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g, showdown.subParser('hashElement')(text, options, globals));\n    text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Hash span elements that should not be parsed as markdown\n   */\n\n  showdown.subParser('hashHTMLSpans', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n    function hashHTMLSpan(html) {\n      return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n    } // Hash Self Closing tags\n\n\n    text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n      return hashHTMLSpan(wm);\n    }); // Hash tags without properties\n\n    text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n      return hashHTMLSpan(wm);\n    }); // Hash tags with properties\n\n    text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n      return hashHTMLSpan(wm);\n    }); // Hash self closing tags without />\n\n    text = text.replace(/<[^>]+?>/gi, function (wm) {\n      return hashHTMLSpan(wm);\n    });\n    /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n    text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Unhash HTML spans\n   */\n\n  showdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n    for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n      var repText = globals.gHtmlSpans[i],\n          // limiter to prevent infinite loop (assume 10 as limit for recurse)\n      limit = 0;\n\n      while (/¨C(\\d+)C/.test(repText)) {\n        var num = RegExp.$1;\n        repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n\n        if (limit === 10) {\n          console.error('maximum nesting of 10 spans reached!!!');\n          break;\n        }\n\n        ++limit;\n      }\n\n      text = text.replace('¨C' + i + 'C', repText);\n    }\n\n    text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Hash and escape <pre><code> elements that should not be parsed as markdown\n   */\n\n  showdown.subParser('hashPreCodeTags', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n    var repFunc = function repFunc(wholeMatch, match, left, right) {\n      // encode html entities\n      var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n      return '\\n\\n¨G' + (globals.ghCodeBlocks.push({\n        text: wholeMatch,\n        codeblock: codeblock\n      }) - 1) + 'G\\n\\n';\n    }; // Hash <pre><code>\n\n\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n    text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('headers', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('headers.before', text, options, globals);\n    var headerLevelStart = isNaN(parseInt(options.headerLevelStart)) ? 1 : parseInt(options.headerLevelStart),\n        // Set text-style headers:\n    //\tHeader 1\n    //\t========\n    //\n    //\tHeader 2\n    //\t--------\n    //\n    setextRegexH1 = options.smoothLivePreview ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n        setextRegexH2 = options.smoothLivePreview ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n    text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n      var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n          hID = options.noHeaderId ? '' : ' id=\"' + headerId(m1) + '\"',\n          hLevel = headerLevelStart,\n          hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n      return showdown.subParser('hashBlock')(hashBlock, options, globals);\n    });\n    text = text.replace(setextRegexH2, function (matchFound, m1) {\n      var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n          hID = options.noHeaderId ? '' : ' id=\"' + headerId(m1) + '\"',\n          hLevel = headerLevelStart + 1,\n          hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n      return showdown.subParser('hashBlock')(hashBlock, options, globals);\n    }); // atx-style headers:\n    //  # Header 1\n    //  ## Header 2\n    //  ## Header 2 with closing hashes ##\n    //  ...\n    //  ###### Header 6\n    //\n\n    var atxStyle = options.requireSpaceBeforeHeadingText ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n    text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n      var hText = m2;\n\n      if (options.customizedHeaderId) {\n        hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\n      }\n\n      var span = showdown.subParser('spanGamut')(hText, options, globals),\n          hID = options.noHeaderId ? '' : ' id=\"' + headerId(m2) + '\"',\n          hLevel = headerLevelStart - 1 + m1.length,\n          header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n      return showdown.subParser('hashBlock')(header, options, globals);\n    });\n\n    function headerId(m) {\n      var title, prefix; // It is separate from other options to allow combining prefix and customized\n\n      if (options.customizedHeaderId) {\n        var match = m.match(/\\{([^{]+?)}\\s*$/);\n\n        if (match && match[1]) {\n          m = match[1];\n        }\n      }\n\n      title = m; // Prefix id to prevent causing inadvertent pre-existing style matches.\n\n      if (showdown.helper.isString(options.prefixHeaderId)) {\n        prefix = options.prefixHeaderId;\n      } else if (options.prefixHeaderId === true) {\n        prefix = 'section-';\n      } else {\n        prefix = '';\n      }\n\n      if (!options.rawPrefixHeaderId) {\n        title = prefix + title;\n      }\n\n      if (options.ghCompatibleHeaderId) {\n        title = title.replace(/ /g, '-') // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '').replace(/¨T/g, '').replace(/¨D/g, '') // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '').toLowerCase();\n      } else if (options.rawHeaderId) {\n        title = title.replace(/ /g, '-') // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '&').replace(/¨T/g, '¨').replace(/¨D/g, '$') // replace \" and '\n        .replace(/[\"']/g, '-').toLowerCase();\n      } else {\n        title = title.replace(/[^\\w]/g, '').toLowerCase();\n      }\n\n      if (options.rawPrefixHeaderId) {\n        title = prefix + title;\n      }\n\n      if (globals.hashLinkCounts[title]) {\n        title = title + '-' + globals.hashLinkCounts[title]++;\n      } else {\n        globals.hashLinkCounts[title] = 1;\n      }\n\n      return title;\n    }\n\n    text = globals.converter._dispatch('headers.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Turn Markdown link shortcuts into XHTML <a> tags.\n   */\n\n  showdown.subParser('horizontalRule', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n    var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n    text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n    text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n    text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n    text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Turn Markdown image shortcuts into <img> tags.\n   */\n\n  showdown.subParser('images', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('images.before', text, options, globals);\n    var inlineRegExp = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n        crazyRegExp = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\n        base64RegExp = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n        referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[([\\s\\S]*?)]()()()()()/g,\n        refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\n\n    function writeImageTagBase64(wholeMatch, altText, linkId, url, width, height, m5, title) {\n      url = url.replace(/\\s/g, '');\n      return writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title);\n    }\n\n    function writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title) {\n      var gUrls = globals.gUrls,\n          gTitles = globals.gTitles,\n          gDims = globals.gDimensions;\n      linkId = linkId.toLowerCase();\n\n      if (!title) {\n        title = '';\n      } // Special case for explicit empty url\n\n\n      if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n        url = '';\n      } else if (url === '' || url === null) {\n        if (linkId === '' || linkId === null) {\n          // lower-case and turn embedded newlines into spaces\n          linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n        }\n\n        url = '#' + linkId;\n\n        if (!showdown.helper.isUndefined(gUrls[linkId])) {\n          url = gUrls[linkId];\n\n          if (!showdown.helper.isUndefined(gTitles[linkId])) {\n            title = gTitles[linkId];\n          }\n\n          if (!showdown.helper.isUndefined(gDims[linkId])) {\n            width = gDims[linkId].width;\n            height = gDims[linkId].height;\n          }\n        } else {\n          return wholeMatch;\n        }\n      }\n\n      altText = altText.replace(/\"/g, '&quot;') //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback); //url = showdown.helper.escapeCharacters(url, '*_', false);\n\n      url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n      if (title && showdown.helper.isString(title)) {\n        title = title.replace(/\"/g, '&quot;') //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n        result += ' title=\"' + title + '\"';\n      }\n\n      if (width && height) {\n        width = width === '*' ? 'auto' : width;\n        height = height === '*' ? 'auto' : height;\n        result += ' width=\"' + width + '\"';\n        result += ' height=\"' + height + '\"';\n      }\n\n      result += ' />';\n      return result;\n    } // First, handle reference-style labeled images: ![alt text][id]\n\n\n    text = text.replace(referenceRegExp, writeImageTag); // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n    // base64 encoded images\n\n    text = text.replace(base64RegExp, writeImageTagBase64); // cases with crazy urls like ./image/cat1).png\n\n    text = text.replace(crazyRegExp, writeImageTag); // normal cases\n\n    text = text.replace(inlineRegExp, writeImageTag); // handle reference-style shortcuts: ![img text]\n\n    text = text.replace(refShortcutRegExp, writeImageTag);\n    text = globals.converter._dispatch('images.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('italicsAndBold', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('italicsAndBold.before', text, options, globals); // it's faster to have 3 separate regexes for each case than have just one\n    // because of backtracing, in some cases, it could lead to an exponential effect\n    // called \"catastrophic backtrace\". Ominous!\n\n    function parseInside(txt, left, right) {\n      /*\n      if (options.simplifiedAutoLink) {\n        txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n      }\n      */\n      return left + txt + right;\n    } // Parse underscores\n\n\n    if (options.literalMidWordUnderscores) {\n      text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n        return parseInside(txt, '<strong><em>', '</em></strong>');\n      });\n      text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n        return parseInside(txt, '<strong>', '</strong>');\n      });\n      text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\n        return parseInside(txt, '<em>', '</em>');\n      });\n    } else {\n      text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n        return /\\S$/.test(m) ? parseInside(m, '<strong><em>', '</em></strong>') : wm;\n      });\n      text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n        return /\\S$/.test(m) ? parseInside(m, '<strong>', '</strong>') : wm;\n      });\n      text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n        // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n        return /\\S$/.test(m) ? parseInside(m, '<em>', '</em>') : wm;\n      });\n    } // Now parse asterisks\n\n\n    if (options.literalMidWordAsterisks) {\n      text = text.replace(/([^*]|^)\\B\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n        return parseInside(txt, lead + '<strong><em>', '</em></strong>');\n      });\n      text = text.replace(/([^*]|^)\\B\\*\\*(\\S[\\s\\S]*?)\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n        return parseInside(txt, lead + '<strong>', '</strong>');\n      });\n      text = text.replace(/([^*]|^)\\B\\*(\\S[\\s\\S]*?)\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n        return parseInside(txt, lead + '<em>', '</em>');\n      });\n    } else {\n      text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n        return /\\S$/.test(m) ? parseInside(m, '<strong><em>', '</em></strong>') : wm;\n      });\n      text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n        return /\\S$/.test(m) ? parseInside(m, '<strong>', '</strong>') : wm;\n      });\n      text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n        // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n        return /\\S$/.test(m) ? parseInside(m, '<em>', '</em>') : wm;\n      });\n    }\n\n    text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Form HTML ordered (numbered) and unordered (bulleted) lists.\n   */\n\n  showdown.subParser('lists', function (text, options, globals) {\n    'use strict';\n    /**\n     * Process the contents of a single ordered or unordered list, splitting it\n     * into individual list items.\n     * @param {string} listStr\n     * @param {boolean} trimTrailing\n     * @returns {string}\n     */\n\n    function processListItems(listStr, trimTrailing) {\n      // The $g_list_level global keeps track of when we're inside a list.\n      // Each time we enter a list, we increment it; when we leave a list,\n      // we decrement. If it's zero, we're not in a list anymore.\n      //\n      // We do this because when we're not inside a list, we want to treat\n      // something like this:\n      //\n      //    I recommend upgrading to version\n      //    8. Oops, now this line is treated\n      //    as a sub-list.\n      //\n      // As a single paragraph, despite the fact that the second line starts\n      // with a digit-period-space sequence.\n      //\n      // Whereas when we're inside a list (or sub-list), that line will be\n      // treated as the start of a sub-list. What a kludge, huh? This is\n      // an aspect of Markdown's syntax that's hard to parse perfectly\n      // without resorting to mind-reading. Perhaps the solution is to\n      // change the syntax rules such that sub-lists must start with a\n      // starting cardinal number; e.g. \"1.\" or \"a.\".\n      globals.gListLevel++; // trim trailing blank lines:\n\n      listStr = listStr.replace(/\\n{2,}$/, '\\n'); // attacklab: add sentinel to emulate \\z\n\n      listStr += '¨0';\n      var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n          isParagraphed = /\\n[ \\t]*\\n(?!¨0)/.test(listStr); // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n      // which is a syntax breaking change\n      // activating this option reverts to old behavior\n\n      if (options.disableForced4SpacesIndentedSublists) {\n        rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n      }\n\n      listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n        checked = checked && checked.trim() !== '';\n        var item = showdown.subParser('outdent')(m4, options, globals),\n            bulletStyle = ''; // Support for github tasklists\n\n        if (taskbtn && options.tasklists) {\n          bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n          item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n            var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n\n            if (checked) {\n              otp += ' checked';\n            }\n\n            otp += '>';\n            return otp;\n          });\n        } // ISSUE #312\n        // This input: - - - a\n        // causes trouble to the parser, since it interprets it as:\n        // <ul><li><li><li>a</li></li></li></ul>\n        // instead of:\n        // <ul><li>- - a</li></ul>\n        // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n        // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n\n\n        item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n          return '¨A' + wm2;\n        }); // m1 - Leading line or\n        // Has a double return (multi paragraph) or\n        // Has sublist\n\n        if (m1 || item.search(/\\n{2,}/) > -1) {\n          item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n          item = showdown.subParser('blockGamut')(item, options, globals);\n        } else {\n          // Recursion for sub-lists:\n          item = showdown.subParser('lists')(item, options, globals);\n          item = item.replace(/\\n$/, ''); // chomp(item)\n\n          item = showdown.subParser('hashHTMLBlocks')(item, options, globals); // Colapse double linebreaks\n\n          item = item.replace(/\\n\\n+/g, '\\n\\n');\n\n          if (isParagraphed) {\n            item = showdown.subParser('paragraphs')(item, options, globals);\n          } else {\n            item = showdown.subParser('spanGamut')(item, options, globals);\n          }\n        } // now we need to remove the marker (¨A)\n\n\n        item = item.replace('¨A', ''); // we can finally wrap the line in list item tags\n\n        item = '<li' + bulletStyle + '>' + item + '</li>\\n';\n        return item;\n      }); // attacklab: strip sentinel\n\n      listStr = listStr.replace(/¨0/g, '');\n      globals.gListLevel--;\n\n      if (trimTrailing) {\n        listStr = listStr.replace(/\\s+$/, '');\n      }\n\n      return listStr;\n    }\n\n    function styleStartNumber(list, listType) {\n      // check if ol and starts by a number different than 1\n      if (listType === 'ol') {\n        var res = list.match(/^ *(\\d+)\\./);\n\n        if (res && res[1] !== '1') {\n          return ' start=\"' + res[1] + '\"';\n        }\n      }\n\n      return '';\n    }\n    /**\n     * Check and parse consecutive lists (better fix for issue #142)\n     * @param {string} list\n     * @param {string} listType\n     * @param {boolean} trimTrailing\n     * @returns {string}\n     */\n\n\n    function parseConsecutiveLists(list, listType, trimTrailing) {\n      // check if we caught 2 or more consecutive lists by mistake\n      // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n      var olRgx = options.disableForced4SpacesIndentedSublists ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n          ulRgx = options.disableForced4SpacesIndentedSublists ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n          counterRxg = listType === 'ul' ? olRgx : ulRgx,\n          result = '';\n\n      if (list.search(counterRxg) !== -1) {\n        (function parseCL(txt) {\n          var pos = txt.search(counterRxg),\n              style = styleStartNumber(list, listType);\n\n          if (pos !== -1) {\n            // slice\n            result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n'; // invert counterType and listType\n\n            listType = listType === 'ul' ? 'ol' : 'ul';\n            counterRxg = listType === 'ul' ? olRgx : ulRgx; //recurse\n\n            parseCL(txt.slice(pos));\n          } else {\n            result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n          }\n        })(list);\n      } else {\n        var style = styleStartNumber(list, listType);\n        result = '\\n\\n<' + listType + style + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n      }\n\n      return result;\n    }\n    /** Start of list parsing **/\n\n\n    text = globals.converter._dispatch('lists.before', text, options, globals); // add sentinel to hack around khtml/safari bug:\n    // http://bugs.webkit.org/show_bug.cgi?id=11231\n\n    text += '¨0';\n\n    if (globals.gListLevel) {\n      text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm, function (wholeMatch, list, m2) {\n        var listType = m2.search(/[*+-]/g) > -1 ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      });\n    } else {\n      text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm, function (wholeMatch, m1, list, m3) {\n        var listType = m3.search(/[*+-]/g) > -1 ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      });\n    } // strip sentinel\n\n\n    text = text.replace(/¨0/, '');\n    text = globals.converter._dispatch('lists.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Parse metadata at the top of the document\n   */\n\n  showdown.subParser('metadata', function (text, options, globals) {\n    'use strict';\n\n    if (!options.metadata) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('metadata.before', text, options, globals);\n\n    function parseMetadataContents(content) {\n      // raw is raw so it's not changed in any way\n      globals.metadata.raw = content; // escape chars forbidden in html attributes\n      // double quotes\n\n      content = content // ampersand first\n      .replace(/&/g, '&amp;') // double quotes\n      .replace(/\"/g, '&quot;');\n      content = content.replace(/\\n {4}/g, ' ');\n      content.replace(/^([\\S ]+): +([\\s\\S]+?)$/gm, function (wm, key, value) {\n        globals.metadata.parsed[key] = value;\n        return '';\n      });\n    }\n\n    text = text.replace(/^\\s*«««+(\\S*?)\\n([\\s\\S]+?)\\n»»»+\\n/, function (wholematch, format, content) {\n      parseMetadataContents(content);\n      return '¨M';\n    });\n    text = text.replace(/^\\s*---+(\\S*?)\\n([\\s\\S]+?)\\n---+\\n/, function (wholematch, format, content) {\n      if (format) {\n        globals.metadata.format = format;\n      }\n\n      parseMetadataContents(content);\n      return '¨M';\n    });\n    text = text.replace(/¨M/g, '');\n    text = globals.converter._dispatch('metadata.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Remove one level of line-leading tabs or spaces\n   */\n\n  showdown.subParser('outdent', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('outdent.before', text, options, globals); // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n    text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n    // attacklab: clean up hack\n\n    text = text.replace(/¨0/g, '');\n    text = globals.converter._dispatch('outdent.after', text, options, globals);\n    return text;\n  });\n  /**\n   *\n   */\n\n  showdown.subParser('paragraphs', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('paragraphs.before', text, options, globals); // Strip leading and trailing lines:\n\n    text = text.replace(/^\\n+/g, '');\n    text = text.replace(/\\n+$/g, '');\n    var grafs = text.split(/\\n{2,}/g),\n        grafsOut = [],\n        end = grafs.length; // Wrap <p> tags\n\n    for (var i = 0; i < end; i++) {\n      var str = grafs[i]; // if this is an HTML marker, copy it\n\n      if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n        grafsOut.push(str); // test for presence of characters to prevent empty lines being parsed\n        // as paragraphs (resulting in undesired extra empty paragraphs)\n      } else if (str.search(/\\S/) >= 0) {\n        str = showdown.subParser('spanGamut')(str, options, globals);\n        str = str.replace(/^([ \\t]*)/g, '<p>');\n        str += '</p>';\n        grafsOut.push(str);\n      }\n    }\n    /** Unhashify HTML blocks */\n\n\n    end = grafsOut.length;\n\n    for (i = 0; i < end; i++) {\n      var blockText = '',\n          grafsOutIt = grafsOut[i],\n          codeFlag = false; // if this is a marker for an html block...\n      // use RegExp.test instead of string.search because of QML bug\n\n      while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n        var delim = RegExp.$1,\n            num = RegExp.$2;\n\n        if (delim === 'K') {\n          blockText = globals.gHtmlBlocks[num];\n        } else {\n          // we need to check if ghBlock is a false positive\n          if (codeFlag) {\n            // use encoded version of all text\n            blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n          } else {\n            blockText = globals.ghCodeBlocks[num].codeblock;\n          }\n        }\n\n        blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n        grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText); // Check if grafsOutIt is a pre->code\n\n        if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n          codeFlag = true;\n        }\n      }\n\n      grafsOut[i] = grafsOutIt;\n    }\n\n    text = grafsOut.join('\\n'); // Strip leading and trailing lines:\n\n    text = text.replace(/^\\n+/g, '');\n    text = text.replace(/\\n+$/g, '');\n    return globals.converter._dispatch('paragraphs.after', text, options, globals);\n  });\n  /**\n   * Run extension\n   */\n\n  showdown.subParser('runExtension', function (ext, text, options, globals) {\n    'use strict';\n\n    if (ext.filter) {\n      text = ext.filter(text, globals.converter, options);\n    } else if (ext.regex) {\n      // TODO remove this when old extension loading mechanism is deprecated\n      var re = ext.regex;\n\n      if (!(re instanceof RegExp)) {\n        re = new RegExp(re, 'g');\n      }\n\n      text = text.replace(re, ext.replace);\n    }\n\n    return text;\n  });\n  /**\n   * These are all the transformations that occur *within* block-level\n   * tags like paragraphs, headers, and list items.\n   */\n\n  showdown.subParser('spanGamut', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n    text = showdown.subParser('codeSpans')(text, options, globals);\n    text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n    text = showdown.subParser('encodeBackslashEscapes')(text, options, globals); // Process anchor and image tags. Images must come first,\n    // because ![foo][f] looks like an anchor.\n\n    text = showdown.subParser('images')(text, options, globals);\n    text = showdown.subParser('anchors')(text, options, globals); // Make links out of things like `<http://example.com/>`\n    // Must come after anchors, because you can use < and >\n    // delimiters in inline links like [this](<url>).\n\n    text = showdown.subParser('autoLinks')(text, options, globals);\n    text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\n    text = showdown.subParser('emoji')(text, options, globals);\n    text = showdown.subParser('underline')(text, options, globals);\n    text = showdown.subParser('italicsAndBold')(text, options, globals);\n    text = showdown.subParser('strikethrough')(text, options, globals);\n    text = showdown.subParser('ellipsis')(text, options, globals); // we need to hash HTML tags inside spans\n\n    text = showdown.subParser('hashHTMLSpans')(text, options, globals); // now we encode amps and angles\n\n    text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals); // Do hard breaks\n\n    if (options.simpleLineBreaks) {\n      // GFM style hard breaks\n      // only add line breaks if the text does not contain a block (special case for lists)\n      if (!/\\n\\n¨K/.test(text)) {\n        text = text.replace(/\\n+/g, '<br />\\n');\n      }\n    } else {\n      // Vanilla hard breaks\n      text = text.replace(/  +\\n/g, '<br />\\n');\n    }\n\n    text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('strikethrough', function (text, options, globals) {\n    'use strict';\n\n    function parseInside(txt) {\n      if (options.simplifiedAutoLink) {\n        txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n      }\n\n      return '<del>' + txt + '</del>';\n    }\n\n    if (options.strikethrough) {\n      text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n      text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) {\n        return parseInside(txt);\n      });\n      text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n    }\n\n    return text;\n  });\n  /**\n   * Strips link definitions from text, stores the URLs and titles in\n   * hash references.\n   * Link defs are in the form: ^[id]: url \"optional title\"\n   */\n\n  showdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n    'use strict';\n\n    var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm,\n        base64Regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n\\n|(?=¨0)|(?=\\n\\[))/gm; // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\n    text += '¨0';\n\n    var replaceFunc = function replaceFunc(wholeMatch, linkId, url, width, height, blankLines, title) {\n      linkId = linkId.toLowerCase();\n\n      if (url.match(/^data:.+?\\/.+?;base64,/)) {\n        // remove newlines\n        globals.gUrls[linkId] = url.replace(/\\s/g, '');\n      } else {\n        globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals); // Link IDs are case-insensitive\n      }\n\n      if (blankLines) {\n        // Oops, found blank lines, so it's not a title.\n        // Put back the parenthetical statement we stole.\n        return blankLines + title;\n      } else {\n        if (title) {\n          globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n        }\n\n        if (options.parseImgDimensions && width && height) {\n          globals.gDimensions[linkId] = {\n            width: width,\n            height: height\n          };\n        }\n      } // Completely remove the definition from the text\n\n\n      return '';\n    }; // first we try to find base64 link references\n\n\n    text = text.replace(base64Regex, replaceFunc);\n    text = text.replace(regex, replaceFunc); // attacklab: strip sentinel\n\n    text = text.replace(/¨0/, '');\n    return text;\n  });\n  showdown.subParser('tables', function (text, options, globals) {\n    'use strict';\n\n    if (!options.tables) {\n      return text;\n    }\n\n    var tableRgx = /^ {0,3}\\|?.+\\|.+\\n {0,3}\\|?[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm,\n        //singeColTblRgx = /^ {0,3}\\|.+\\|\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n(?: {0,3}\\|.+\\|\\n)+(?:\\n\\n|¨0)/gm;\n    singeColTblRgx = /^ {0,3}\\|.+\\|[ \\t]*\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n( {0,3}\\|.+\\|[ \\t]*\\n)*(?:\\n|¨0)/gm;\n\n    function parseStyles(sLine) {\n      if (/^:[ \\t]*--*$/.test(sLine)) {\n        return ' style=\"text-align:left;\"';\n      } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n        return ' style=\"text-align:right;\"';\n      } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n        return ' style=\"text-align:center;\"';\n      } else {\n        return '';\n      }\n    }\n\n    function parseHeaders(header, style) {\n      var id = '';\n      header = header.trim(); // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility\n\n      if (options.tablesHeaderId || options.tableHeaderId) {\n        id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n      }\n\n      header = showdown.subParser('spanGamut')(header, options, globals);\n      return '<th' + id + style + '>' + header + '</th>\\n';\n    }\n\n    function parseCells(cell, style) {\n      var subText = showdown.subParser('spanGamut')(cell, options, globals);\n      return '<td' + style + '>' + subText + '</td>\\n';\n    }\n\n    function buildTable(headers, cells) {\n      var tb = '<table>\\n<thead>\\n<tr>\\n',\n          tblLgn = headers.length;\n\n      for (var i = 0; i < tblLgn; ++i) {\n        tb += headers[i];\n      }\n\n      tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n      for (i = 0; i < cells.length; ++i) {\n        tb += '<tr>\\n';\n\n        for (var ii = 0; ii < tblLgn; ++ii) {\n          tb += cells[i][ii];\n        }\n\n        tb += '</tr>\\n';\n      }\n\n      tb += '</tbody>\\n</table>\\n';\n      return tb;\n    }\n\n    function parseTable(rawTable) {\n      var i,\n          tableLines = rawTable.split('\\n');\n\n      for (i = 0; i < tableLines.length; ++i) {\n        // strip wrong first and last column if wrapped tables are used\n        if (/^ {0,3}\\|/.test(tableLines[i])) {\n          tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n        }\n\n        if (/\\|[ \\t]*$/.test(tableLines[i])) {\n          tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n        } // parse code spans first, but we only support one line code spans\n\n\n        tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);\n      }\n\n      var rawHeaders = tableLines[0].split('|').map(function (s) {\n        return s.trim();\n      }),\n          rawStyles = tableLines[1].split('|').map(function (s) {\n        return s.trim();\n      }),\n          rawCells = [],\n          headers = [],\n          styles = [],\n          cells = [];\n      tableLines.shift();\n      tableLines.shift();\n\n      for (i = 0; i < tableLines.length; ++i) {\n        if (tableLines[i].trim() === '') {\n          continue;\n        }\n\n        rawCells.push(tableLines[i].split('|').map(function (s) {\n          return s.trim();\n        }));\n      }\n\n      if (rawHeaders.length < rawStyles.length) {\n        return rawTable;\n      }\n\n      for (i = 0; i < rawStyles.length; ++i) {\n        styles.push(parseStyles(rawStyles[i]));\n      }\n\n      for (i = 0; i < rawHeaders.length; ++i) {\n        if (showdown.helper.isUndefined(styles[i])) {\n          styles[i] = '';\n        }\n\n        headers.push(parseHeaders(rawHeaders[i], styles[i]));\n      }\n\n      for (i = 0; i < rawCells.length; ++i) {\n        var row = [];\n\n        for (var ii = 0; ii < headers.length; ++ii) {\n          if (showdown.helper.isUndefined(rawCells[i][ii])) {}\n\n          row.push(parseCells(rawCells[i][ii], styles[ii]));\n        }\n\n        cells.push(row);\n      }\n\n      return buildTable(headers, cells);\n    }\n\n    text = globals.converter._dispatch('tables.before', text, options, globals); // find escaped pipe characters\n\n    text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback); // parse multi column tables\n\n    text = text.replace(tableRgx, parseTable); // parse one column tables\n\n    text = text.replace(singeColTblRgx, parseTable);\n    text = globals.converter._dispatch('tables.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('underline', function (text, options, globals) {\n    'use strict';\n\n    if (!options.underline) {\n      return text;\n    }\n\n    text = globals.converter._dispatch('underline.before', text, options, globals);\n\n    if (options.literalMidWordUnderscores) {\n      text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n        return '<u>' + txt + '</u>';\n      });\n      text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n        return '<u>' + txt + '</u>';\n      });\n    } else {\n      text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n        return /\\S$/.test(m) ? '<u>' + m + '</u>' : wm;\n      });\n      text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n        return /\\S$/.test(m) ? '<u>' + m + '</u>' : wm;\n      });\n    } // escape remaining underscores to prevent them being parsed by italic and bold\n\n\n    text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);\n    text = globals.converter._dispatch('underline.after', text, options, globals);\n    return text;\n  });\n  /**\n   * Swap back in all the special characters we've hidden.\n   */\n\n  showdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n    'use strict';\n\n    text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n    text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n      var charCodeToReplace = parseInt(m1);\n      return String.fromCharCode(charCodeToReplace);\n    });\n    text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n    return text;\n  });\n  showdown.subParser('makeMarkdown.blockquote', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes()) {\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);\n\n        if (innerTxt === '') {\n          continue;\n        }\n\n        txt += innerTxt;\n      }\n    } // cleanup\n\n\n    txt = txt.trim();\n    txt = '> ' + txt.split('\\n').join('\\n> ');\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {\n    'use strict';\n\n    var lang = node.getAttribute('language'),\n        num = node.getAttribute('precodenum');\n    return '```' + lang + '\\n' + globals.preList[num] + '\\n```';\n  });\n  showdown.subParser('makeMarkdown.codeSpan', function (node) {\n    'use strict';\n\n    return '`' + node.innerHTML + '`';\n  });\n  showdown.subParser('makeMarkdown.emphasis', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes()) {\n      txt += '*';\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n\n      txt += '*';\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {\n    'use strict';\n\n    var headerMark = new Array(headerLevel + 1).join('#'),\n        txt = '';\n\n    if (node.hasChildNodes()) {\n      txt = headerMark + ' ';\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.hr', function () {\n    'use strict';\n\n    return '---';\n  });\n  showdown.subParser('makeMarkdown.image', function (node) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasAttribute('src')) {\n      txt += '![' + node.getAttribute('alt') + '](';\n      txt += '<' + node.getAttribute('src') + '>';\n\n      if (node.hasAttribute('width') && node.hasAttribute('height')) {\n        txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');\n      }\n\n      if (node.hasAttribute('title')) {\n        txt += ' \"' + node.getAttribute('title') + '\"';\n      }\n\n      txt += ')';\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.links', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes() && node.hasAttribute('href')) {\n      var children = node.childNodes,\n          childrenLength = children.length;\n      txt = '[';\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n\n      txt += '](';\n      txt += '<' + node.getAttribute('href') + '>';\n\n      if (node.hasAttribute('title')) {\n        txt += ' \"' + node.getAttribute('title') + '\"';\n      }\n\n      txt += ')';\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.list', function (node, globals, type) {\n    'use strict';\n\n    var txt = '';\n\n    if (!node.hasChildNodes()) {\n      return '';\n    }\n\n    var listItems = node.childNodes,\n        listItemsLenght = listItems.length,\n        listNum = node.getAttribute('start') || 1;\n\n    for (var i = 0; i < listItemsLenght; ++i) {\n      if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {\n        continue;\n      } // define the bullet to use in list\n\n\n      var bullet = '';\n\n      if (type === 'ol') {\n        bullet = listNum.toString() + '. ';\n      } else {\n        bullet = '- ';\n      } // parse list item\n\n\n      txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);\n      ++listNum;\n    } // add comment at the end to prevent consecutive lists to be parsed as one\n\n\n    txt += '\\n<!-- -->\\n';\n    return txt.trim();\n  });\n  showdown.subParser('makeMarkdown.listItem', function (node, globals) {\n    'use strict';\n\n    var listItemTxt = '';\n    var children = node.childNodes,\n        childrenLenght = children.length;\n\n    for (var i = 0; i < childrenLenght; ++i) {\n      listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    } // if it's only one liner, we need to add a newline at the end\n\n\n    if (!/\\n$/.test(listItemTxt)) {\n      listItemTxt += '\\n';\n    } else {\n      // it's multiparagraph, so we need to indent\n      listItemTxt = listItemTxt.split('\\n').join('\\n    ').replace(/^ {4}$/gm, '').replace(/\\n\\n+/g, '\\n\\n');\n    }\n\n    return listItemTxt;\n  });\n  showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {\n    'use strict';\n\n    spansOnly = spansOnly || false;\n    var txt = ''; // edge case of text without wrapper paragraph\n\n    if (node.nodeType === 3) {\n      return showdown.subParser('makeMarkdown.txt')(node, globals);\n    } // HTML comment\n\n\n    if (node.nodeType === 8) {\n      return '<!--' + node.data + '-->\\n\\n';\n    } // process only node elements\n\n\n    if (node.nodeType !== 1) {\n      return '';\n    }\n\n    var tagName = node.tagName.toLowerCase();\n\n    switch (tagName) {\n      //\n      // BLOCKS\n      //\n      case 'h1':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\\n\\n';\n        }\n\n        break;\n\n      case 'h2':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\\n\\n';\n        }\n\n        break;\n\n      case 'h3':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\\n\\n';\n        }\n\n        break;\n\n      case 'h4':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\\n\\n';\n        }\n\n        break;\n\n      case 'h5':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\\n\\n';\n        }\n\n        break;\n\n      case 'h6':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\\n\\n';\n        }\n\n        break;\n\n      case 'p':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\\n\\n';\n        }\n\n        break;\n\n      case 'blockquote':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\\n\\n';\n        }\n\n        break;\n\n      case 'hr':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\\n\\n';\n        }\n\n        break;\n\n      case 'ol':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\\n\\n';\n        }\n\n        break;\n\n      case 'ul':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\\n\\n';\n        }\n\n        break;\n\n      case 'precode':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\\n\\n';\n        }\n\n        break;\n\n      case 'pre':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\\n\\n';\n        }\n\n        break;\n\n      case 'table':\n        if (!spansOnly) {\n          txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\\n\\n';\n        }\n\n        break;\n      //\n      // SPANS\n      //\n\n      case 'code':\n        txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);\n        break;\n\n      case 'em':\n      case 'i':\n        txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);\n        break;\n\n      case 'strong':\n      case 'b':\n        txt = showdown.subParser('makeMarkdown.strong')(node, globals);\n        break;\n\n      case 'del':\n        txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);\n        break;\n\n      case 'a':\n        txt = showdown.subParser('makeMarkdown.links')(node, globals);\n        break;\n\n      case 'img':\n        txt = showdown.subParser('makeMarkdown.image')(node, globals);\n        break;\n\n      default:\n        txt = node.outerHTML + '\\n\\n';\n    } // common normalization\n    // TODO eventually\n\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.paragraph', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes()) {\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n    } // some text normalization\n\n\n    txt = txt.trim();\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.pre', function (node, globals) {\n    'use strict';\n\n    var num = node.getAttribute('prenum');\n    return '<pre>' + globals.preList[num] + '</pre>';\n  });\n  showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes()) {\n      txt += '~~';\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n\n      txt += '~~';\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.strong', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (node.hasChildNodes()) {\n      txt += '**';\n      var children = node.childNodes,\n          childrenLength = children.length;\n\n      for (var i = 0; i < childrenLength; ++i) {\n        txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n      }\n\n      txt += '**';\n    }\n\n    return txt;\n  });\n  showdown.subParser('makeMarkdown.table', function (node, globals) {\n    'use strict';\n\n    var txt = '',\n        tableArray = [[], []],\n        headings = node.querySelectorAll('thead>tr>th'),\n        rows = node.querySelectorAll('tbody>tr'),\n        i,\n        ii;\n\n    for (i = 0; i < headings.length; ++i) {\n      var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),\n          allign = '---';\n\n      if (headings[i].hasAttribute('style')) {\n        var style = headings[i].getAttribute('style').toLowerCase().replace(/\\s/g, '');\n\n        switch (style) {\n          case 'text-align:left;':\n            allign = ':---';\n            break;\n\n          case 'text-align:right;':\n            allign = '---:';\n            break;\n\n          case 'text-align:center;':\n            allign = ':---:';\n            break;\n        }\n      }\n\n      tableArray[0][i] = headContent.trim();\n      tableArray[1][i] = allign;\n    }\n\n    for (i = 0; i < rows.length; ++i) {\n      var r = tableArray.push([]) - 1,\n          cols = rows[i].getElementsByTagName('td');\n\n      for (ii = 0; ii < headings.length; ++ii) {\n        var cellContent = ' ';\n\n        if (typeof cols[ii] !== 'undefined') {\n          cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);\n        }\n\n        tableArray[r].push(cellContent);\n      }\n    }\n\n    var cellSpacesCount = 3;\n\n    for (i = 0; i < tableArray.length; ++i) {\n      for (ii = 0; ii < tableArray[i].length; ++ii) {\n        var strLen = tableArray[i][ii].length;\n\n        if (strLen > cellSpacesCount) {\n          cellSpacesCount = strLen;\n        }\n      }\n    }\n\n    for (i = 0; i < tableArray.length; ++i) {\n      for (ii = 0; ii < tableArray[i].length; ++ii) {\n        if (i === 1) {\n          if (tableArray[i][ii].slice(-1) === ':') {\n            tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';\n          } else {\n            tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');\n          }\n        } else {\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);\n        }\n      }\n\n      txt += '| ' + tableArray[i].join(' | ') + ' |\\n';\n    }\n\n    return txt.trim();\n  });\n  showdown.subParser('makeMarkdown.tableCell', function (node, globals) {\n    'use strict';\n\n    var txt = '';\n\n    if (!node.hasChildNodes()) {\n      return '';\n    }\n\n    var children = node.childNodes,\n        childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);\n    }\n\n    return txt.trim();\n  });\n  showdown.subParser('makeMarkdown.txt', function (node) {\n    'use strict';\n\n    var txt = node.nodeValue; // multiple spaces are collapsed\n\n    txt = txt.replace(/ +/g, ' '); // replace the custom ¨NBSP; with a space\n\n    txt = txt.replace(/¨NBSP;/g, ' '); // \", <, > and & should replace escaped html entities\n\n    txt = showdown.helper.unescapeHTMLEntities(txt); // escape markdown magic characters\n    // emphasis, strong and strikethrough - can appear everywhere\n    // we also escape pipe (|) because of tables\n    // and escape ` because of code blocks and spans\n\n    txt = txt.replace(/([*_~|`])/g, '\\\\$1'); // escape > because of blockquotes\n\n    txt = txt.replace(/^(\\s*)>/g, '\\\\$1>'); // hash character, only troublesome at the beginning of a line because of headers\n\n    txt = txt.replace(/^#/gm, '\\\\#'); // horizontal rules\n\n    txt = txt.replace(/^(\\s*)([-=]{3,})(\\s*)$/, '$1\\\\$2$3'); // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer\n\n    txt = txt.replace(/^( {0,3}\\d+)\\./gm, '$1\\\\.'); // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)\n\n    txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\\\$2'); // images and links, ] followed by ( is problematic, so we escape it\n\n    txt = txt.replace(/]([\\s]*)\\(/g, '\\\\]$1\\\\('); // reference URIs must also be escaped\n\n    txt = txt.replace(/^ {0,3}\\[([\\S \\t]*?)]:/gm, '\\\\[$1]:');\n    return txt;\n  });\n  var root = this; // AMD Loader\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      'use strict';\n\n      return showdown;\n    }); // CommonJS/nodeJS Loader\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = showdown; // Regular Browser loader\n  } else {\n    root.showdown = showdown;\n  }\n}).call(this);","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n"],"sourceRoot":""}